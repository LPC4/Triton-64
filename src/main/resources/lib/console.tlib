; ==================================================================================
; CONSOLE LIBRARY MODULE
; ==================================================================================
;
; Provides console output functions: print(), println(), and print_raw()
; Uses framebuffer at 0x20220000 with 80x30 character display
; Each character occupies 4 bytes (char, fg, bg, reserved)
; Supports newline handling, scrolling, and cursor management

; Constants
global SCREEN_WIDTH = 80
global SCREEN_HEIGHT = 30
global FRAMEBUFFER_BASE = 0x20220000

; Globals
global console_cursor = 0

func console_init() {
    console_cursor = 0
    console_clear()
}

func console_clear() {
    ; Clear entire screen with spaces
    var i = 0
    var total_chars = SCREEN_WIDTH * SCREEN_HEIGHT
    while (i < total_chars) {
        writeChar(FRAMEBUFFER_BASE + i*4, 32)  ; Space character
        i = i + 1
    }
    console_cursor = 0
}

func console_scroll() {
    ; copy character by character (4 bytes each)
    var src_line = 1
    var dst_line = 0

    ; Copy all lines except the last one
    while (src_line < SCREEN_HEIGHT) {
        var src_start = FRAMEBUFFER_BASE + src_line * SCREEN_WIDTH * 4
        var dst_start = FRAMEBUFFER_BASE + dst_line * SCREEN_WIDTH * 4

        var char_in_line = 0
        while (char_in_line < SCREEN_WIDTH) {
            var src_char = src_start + char_in_line * 4
            var dst_char = dst_start + char_in_line * 4

            @dst_char = @src_char           ; character
            @(dst_char + 1) = @(src_char + 1)   ; foreground
            @(dst_char + 2) = @(src_char + 2)   ; background
            @(dst_char + 3) = @(src_char + 3)   ; reserved

            char_in_line = char_in_line + 1
        }

        src_line = src_line + 1
        dst_line = dst_line + 1
    }

    var lastLineStart = FRAMEBUFFER_BASE + (SCREEN_HEIGHT-1) * SCREEN_WIDTH * 4
    var i = 0
    while (i < SCREEN_WIDTH) {
        writeChar(lastLineStart + i*4, ' ')
        i = i + 1
    }
}

func console_putc(char) {
    ; Handle control characters
    if (char == '\n') {
        var row = console_cursor / SCREEN_WIDTH
        if (row >= SCREEN_HEIGHT-1) {
            console_scroll()
            console_cursor = (SCREEN_HEIGHT-1) * SCREEN_WIDTH
        } else {
            console_cursor = (row + 1) * SCREEN_WIDTH
        }
        return
    }

    ; Handle printable characters
    if (console_cursor >= SCREEN_WIDTH * SCREEN_HEIGHT) {
        console_scroll()
        console_cursor = (SCREEN_HEIGHT-1) * SCREEN_WIDTH
    }

    writeChar(FRAMEBUFFER_BASE + console_cursor*4, char)
    console_cursor = console_cursor + 1
}

func console_puts(str, len) {
    ; Print buffer of characters with length
    var i = 0
    while (i < len) {
        console_putc(@(str + i))
        i = i + 1
    }
}

func writeChar(addr, char) {
    var fgColor = 0xF  ; White
    var bgColor = 0     ; Black

    @addr = char & 0xFF  ; Ensure char is byte-sized
    @(addr + 1) = fgColor
    @(addr + 2) = bgColor
    @(addr + 3) = 0
}

; ==================================================================================
; PUBLIC PRINTING FUNCTIONS
; ==================================================================================

func print(str, len) {
    ; Print raw byte buffer (8-byte aligned)
    console_puts(str, len)
}

func println(str, len) {
    ; Print with newline
    print(str, len)
    console_putc(10)  ; Newline
}

func print_raw(ptr, len) {
    ; Direct memory output (no malloc, for internal use)
    console_puts(ptr, len)
}