import memory

struct TestStruct {
    var a: long
    var b: byte[]
    var c: int[]*
}

func main(): byte {
    var s: TestStruct* = malloc(strideOf(TestStruct))
    s.a = 0x0FBEADDEEFBEADDE
    s.b = calloc(8, strideOf(byte))
    @s.b = [1, 2, 3, 4]

    s.b[4] = 5
    s.b[5] = s.b[4] + 1

    @(s.b + 6) = 7
    s.b[7] = byte@(s.b + 6) + 1 ; can also be done without the byte "cast"

    s.c = calloc(4, strideOf(int[]))

    var child1: int* = calloc(4, strideOf(int))
    @child1 = [0xFF, 0xAA, 0xFF, 0xAA]

    var child2 = int* calloc(4, strideOf(int)) ; cast and infer type
    @child2 = [0xAA, 0xBB, 0xCC, 0xDD]

    @s.c = [child1, child2, child1]

    while(1) {}

    return 1
}