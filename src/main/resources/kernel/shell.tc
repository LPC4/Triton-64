; ============================================================================
; Triton-OS Shell
;
; This file implements the main shell interface with:
; - Welcome message display with ASCII banner
; - Interactive command prompt
; - Keyboard input handling (including backspace)
; - Command processing with basic commands (help, info, clear, echo, date, reset, banner)
; ============================================================================

global __MMIO_BASE: long = 0x20020000
global __QUEUE_HEAD_OFFSET: long = 0x01
global __QUEUE_CONTROL_OFFSET: long = 0x02
global __TIME_MILLIS_OFFSET: long = 0x08

; Pre-allocated string constants
global __helpStr: byte*
global __helpStrLen: int
global __infoStr: byte*
global __infoStrLen: int
global __clearStr: byte*
global __clearStrLen: int
global __echoStr: byte*
global __echoStrLen: int
global __versionStr: byte*
global __versionStrLen: int
global __dateStr: byte*
global __dateStrLen: int
global __resetStr: byte*
global __resetStrLen: int
global __bannerStr: byte*
global __bannerStrLen: int

global __promptStr: byte*
global __promptStrLen: int

global __welcomeStr: byte*
global __welcomeStrLen: int
global __hintStr: byte*
global __hintStrLen: int

func __init_strings() {
    ; Keep global string initialization with manual malloc
    __helpStrLen = 4
    __helpStr = malloc(__helpStrLen)
    @__helpStr = "help"

    __infoStrLen = 4
    __infoStr = malloc(__infoStrLen)
    @__infoStr = "info"

    __clearStrLen = 5
    __clearStr = malloc(__clearStrLen)
    @__clearStr = "clear"

    __echoStrLen = 4
    __echoStr = malloc(__echoStrLen)
    @__echoStr = "echo"

    __versionStrLen = 7
    __versionStr = malloc(__versionStrLen)
    @__versionStr = "version"

    __dateStrLen = 4
    __dateStr = malloc(__dateStrLen)
    @__dateStr = "date"

    __resetStrLen = 5
    __resetStr = malloc(__resetStrLen)
    @__resetStr = "reset"

    __bannerStrLen = 6
    __bannerStr = malloc(__bannerStrLen)
    @__bannerStr = "banner"

    __promptStrLen = 2
    __promptStr = malloc(__promptStrLen)
    @__promptStr = "> "

    __welcomeStrLen = strideOf("Welcome to Triton-OS!")
    __welcomeStr = malloc(__welcomeStrLen)
    @__welcomeStr = "Welcome to Triton-OS!"

    __hintStrLen = strideOf("Type 'help' for available commands")
    __hintStr = malloc(__hintStrLen)
    @__hintStr = "Type 'help' for available commands"
}

func __display_banner() {
    var line1: byte* = "================================================================================"
    print(line1, strlen(line1))

    var line2: byte* = "                  .---..---. .-..---..----..-..-.   .----..---."
    println(line2, strlen(line2))

    var line3: byte* = "                  `| |'| |-< | |`| |'| || || .` |===| || |\\ \\"
    println(line3, strlen(line3))

    var line4: byte* = "                   `-' `-'`-'`-' `-' `----'`-'`-'   `----'`---'"
    println(line4, strlen(line4))

    var subtitle: byte* = "                                TRITON-OS v0.1"
    println(subtitle, strlen(subtitle))

    var tagline: byte* = "                            Advanced Shell System"
    println(tagline, strlen(tagline))

    var copyright: byte* = "                        Copyright (c) 2025 Triton Systems"
    println(copyright, strlen(copyright))

    var line5: byte* = "================================================================================"
    println(line5, strlen(line5))

    free(line1)
    free(line2)
    free(line3)
    free(line4)
    free(subtitle)
    free(tagline)
    free(copyright)
    free(line5)
}



; Command handler functions
func __handle_help() {
    ; Local variables use the simplified declaration syntax
    var msg1: byte* = "Available commands:"
    println(msg1, strlen(msg1))

    var msg2: byte* = "  help    - Show this help message"
    println(msg2, strlen(msg2))

    var msg3: byte* = "  info    - Display system information"
    println(msg3, strlen(msg3))

    var msg4: byte* = "  clear   - Clear the screen"
    println(msg4, strlen(msg4))

    var msg5: byte* = "  echo    - Echo input text"
    println(msg5, strlen(msg5))

    var msg6: byte* = "  version - Show version information"
    println(msg6, strlen(msg6))

    var msg7: byte* = "  date    - Display current date and time"
    println(msg7, strlen(msg7))

    var msg8: byte* = "  banner  - Display the Triton-OS banner"
    println(msg8, strlen(msg8))

    var msg9: byte* = "  reset   - Return to startup screen"
    println(msg9, strlen(msg9))

    free(msg1)
    free(msg2)
    free(msg3)
    free(msg4)
    free(msg5)
    free(msg6)
    free(msg7)
    free(msg8)
    free(msg9)
}

func __handle_info() {
    var msg1: byte* = "System Information:"
    println(msg1, strlen(msg1))
    println(0, 0)

    var msg2: byte* = "Operating System: Triton-OS v0.1"
    println(msg2, strlen(msg2))

    var msg3: byte* = "Architecture: Triton-64 Virtual Machine"
    println(msg3, strlen(msg3))

    var msg4: byte* = "CPU: 64-bit RISC processor, 32 registers"
    println(msg4, strlen(msg4))

    var msg5: byte* = "Instruction Set: 32-bit fixed-width"
    println(msg5, strlen(msg5))

    var msg6: byte* = "Console: 80x30 character display"
    println(msg6, strlen(msg6))

    println(0, 0)

    var msg7: byte* = "Memory Layout:"
    println(msg7, strlen(msg7))

    var msg8: byte* = "  ROM:         128 KB  (0x00000000 - 0x0001FFFF)"
    println(msg8, strlen(msg8))

    var msg9: byte* = "  RAM:         512 MB  (0x00020000 - 0x2001FFFF)"
    println(msg9, strlen(msg9))

    var msg10: byte* = "  MMIO:        2 MB    (0x20020000 - 0x2021FFFF)"
    println(msg10, strlen(msg10))

    var msg11: byte* = "  Framebuffer: 16 MB   (0x20220000 - 0x2121FFFF)"
    println(msg11, strlen(msg11))

    println(0, 0)

    var msg12: byte* = "Features:"
    println(msg12, strlen(msg12))

    var msg13: byte* = "  - TriC Programming Language Support"
    println(msg13, strlen(msg13))

    var msg14: byte* = "  - Advanced Memory Management"
    println(msg14, strlen(msg14))

    var msg15: byte* = "  - Real-time Visual Debugging"
    println(msg15, strlen(msg15))

    var msg16: byte* = "  - ROM-based Boot System"
    println(msg16, strlen(msg16))

    free(msg1)
    free(msg2)
    free(msg3)
    free(msg4)
    free(msg5)
    free(msg6)
    free(msg7)
    free(msg8)
    free(msg9)
    free(msg10)
    free(msg11)
    free(msg12)
    free(msg13)
    free(msg14)
    free(msg15)
    free(msg16)
}

func __handle_clear() {
    console_clear()
}

func __handle_banner() {
    __display_banner()
}

func __num_to_2digit_str(num: int, buffer: byte*) {
    buffer[0] = 48 + (num / 10) ; '0' + tens digit
    buffer[1] = 48 + (num % 10) ; '0' + ones digit
}

func __millis_to_date_str(millis: long, buffer: byte*) {
    ; Convert millis to seconds, minutes, hours, and days
    var totalSeconds: long = millis / 1000
    var totalMinutes: long = totalSeconds / 60
    var totalHours: long = totalMinutes / 60
    var totalDays: long = totalHours / 24

    ; Calculate time components within the day
    var seconds: int = totalSeconds % 60
    var minutes: int = totalMinutes % 60
    var hours: int = totalHours % 24

    ; Start from Unix epoch (Jan 1, 1970)
    var year: int = 1970
    var remainingDays: long = totalDays

    ; Calculate the correct year by counting years
    var yearCalcComplete: int = 0
    while (yearCalcComplete == 0) {
        ; Determine if current year is a leap year
        var isLeapYear: int = 0
        if (year % 4 == 0) {
            if (year % 100 != 0 || year % 400 == 0) {
                isLeapYear = 1
            }
        }

        ; Calculate days in this year
        var daysInYear: int = 365
        if (isLeapYear == 1) {
            daysInYear = 366
        }

        ; Check if we've consumed a full year
        if (remainingDays >= daysInYear) {
            remainingDays = remainingDays - daysInYear
            year = year + 1
        } else {
            yearCalcComplete = 1
        }
    }

    ; remainingDays now represents the day of year (0-365)
    var dayOfYear: int = remainingDays

    ; Calculate month and day
    var months: int* = malloc(strideOf(int) * 12)
    months[0] = 31  ; January
    months[1] = 28  ; February (non-leap year)
    months[2] = 31  ; March
    months[3] = 30  ; April
    months[4] = 31  ; May
    months[5] = 30  ; June
    months[6] = 31  ; July
    months[7] = 31  ; August
    months[8] = 30  ; September
    months[9] = 31  ; October
    months[10] = 30 ; November
    months[11] = 31 ; December

    ; Adjust February for leap year
    if (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0)) {
        months[1] = 29
    }

    ; Calculate month and day within month
    var month: int = 0
    var monthCalcComplete: int = 0
    while (monthCalcComplete == 0 && month < 12) {
        if (dayOfYear < months[month]) {
            monthCalcComplete = 1
        } else {
            dayOfYear = dayOfYear - months[month]
            month = month + 1
        }
    }

    ; Convert to 1-based indexing (Jan=1, not 0)
    var day: int = dayOfYear + 1
    month = month + 1

    ; Format: DD/MM/YYYY HH:MM:SS
    var dayStr: byte* = malloc(2)
    __num_to_2digit_str(day, dayStr)

    var monthStr: byte* = malloc(2)
    __num_to_2digit_str(month, monthStr)

    var hourStr: byte* = malloc(2)
    __num_to_2digit_str(hours, hourStr)

    var minuteStr: byte* = malloc(2)
    __num_to_2digit_str(minutes, minuteStr)

    var secondStr: byte* = malloc(2)
    __num_to_2digit_str(seconds, secondStr)

    ; Build the date string with calculated year
    ; Year is a 4-digit number, so we need to convert it to a string
    var yearStr: byte* = malloc(4)
    yearStr[0] = 48 + (year / 1000)         ; Thousands digit
    yearStr[1] = 48 + ((year / 100) % 10)   ; Hundreds digit
    yearStr[2] = 48 + ((year / 10) % 10)    ; Tens digit
    yearStr[3] = 48 + (year % 10)           ; Ones digit

    ; Build the date string
    buffer[0] = dayStr[0]
    buffer[1] = dayStr[1]
    buffer[2] = 47  ; '/'
    buffer[3] = monthStr[0]
    buffer[4] = monthStr[1]
    buffer[5] = 47  ; '/'
    buffer[6] = yearStr[0]
    buffer[7] = yearStr[1]
    buffer[8] = yearStr[2]
    buffer[9] = yearStr[3]
    buffer[10] = 32 ; ' '
    buffer[11] = hourStr[0]
    buffer[12] = hourStr[1]
    buffer[13] = 58 ; ':'
    buffer[14] = minuteStr[0]
    buffer[15] = minuteStr[1]
    buffer[16] = 58 ; ':'
    buffer[17] = secondStr[0]
    buffer[18] = secondStr[1]
    buffer[19] = 0  ; Null terminator

    free(months)
    free(dayStr)
    free(monthStr)
    free(hourStr)
    free(minuteStr)
    free(secondStr)
    free(yearStr)
}

func __handle_date() {
    var currentTime: long = long@(__MMIO_BASE + __TIME_MILLIS_OFFSET)

    ; Buffer for date string (20 characters)
    var dateBuffer: byte* = malloc(20)
    __millis_to_date_str(currentTime, dateBuffer)

    var msg1: byte* = "Current date and time: "
    print(msg1, strlen(msg1))

    print(dateBuffer, 19)
    println(0, 0)

    free(dateBuffer)
    free(msg1)
}

func __handle_version() {
    var msg1: byte* = "Triton-OS Version 0.1.0"
    println(msg1, strlen(msg1))

    var msg2: byte* = "Build Date: 20/08/2025"
    println(msg2, strlen(msg2))

    var msg3: byte* = "Copyright (c) 2025 Triton Systems"
    println(msg3, strlen(msg3))

    free(msg1)
    free(msg2)
    free(msg3)
}

func __handle_reset() {
    console_clear()
    __display_welcome()
}

func __handle_echo(cmdBuffer: byte*, cmdLength: int) {
    ; Skip the "echo" command itself (4 characters)
    var i: int = __echoStrLen

    ; Skip any additional spaces
    while (i < cmdLength && cmdBuffer[i] == 32) {
        i = i + 1
    }

    ; Print the rest of the string
    if (i < cmdLength) {
        print(cmdBuffer + i, cmdLength - i)
    }
    println(0, 0)  ; Newline
}

; Command processing
func __process_command(cmdBuffer: byte*, cmdLength: int) {
    ; Check for "help" command
    if (starts_with(cmdBuffer, cmdLength, __helpStr, __helpStrLen) == 1) {
        __handle_help()
        return
    }

    ; Check for "info" command
    if (starts_with(cmdBuffer, cmdLength, __infoStr, __infoStrLen) == 1) {
        __handle_info()
        return
    }

    ; Check for "clear" command
    if (starts_with(cmdBuffer, cmdLength, __clearStr, __clearStrLen) == 1) {
        __handle_clear()
        return
    }

    ; Check for "version" command
    if (starts_with(cmdBuffer, cmdLength, __versionStr, __versionStrLen) == 1) {
        __handle_version()
        return
    }

    ; Check for "date" command
    if (starts_with(cmdBuffer, cmdLength, __dateStr, __dateStrLen) == 1) {
        __handle_date()
        return
    }

    ; Check for "banner" command
    if (starts_with(cmdBuffer, cmdLength, __bannerStr, __bannerStrLen) == 1) {
        __handle_banner()
        return
    }

    ; Check for "reset" command
    if (starts_with(cmdBuffer, cmdLength, __resetStr, __resetStrLen) == 1) {
        __handle_reset()
        return
    }

    ; Check for "echo" command
    if (starts_with(cmdBuffer, cmdLength, __echoStr, __echoStrLen) == 1) {
        __handle_echo(cmdBuffer, cmdLength)
        return
    }

    ; Handle unknown command
    var prefix: byte* = "Unknown command '"
    print(prefix, strlen(prefix))

    print(cmdBuffer, cmdLength)

    var suffix: byte* = "' - type 'help' for available commands"
    println(suffix, strlen(suffix))

    free(prefix)
    free(suffix)
}

; Command input handling
func __read_command(cmdBuffer: byte*, cmdBufferSize: int): int {
    var cmdLength: int = 0
    var inputComplete: int = 0

    while (inputComplete == 0) {
        var hasInput: int = 0
        var inputChar = @(__MMIO_BASE + __QUEUE_HEAD_OFFSET)
        if (inputChar != 0xFF) {
            hasInput = 1
        }

        var processedInput: int = 0
        while (hasInput == 1 && processedInput == 0) {
            ; Pop the queue immediately after detecting input
            @(__MMIO_BASE + __QUEUE_CONTROL_OFFSET) = 1

            if (inputChar == 10) { ; newline
                println(0, 0)
                inputComplete = 1
                processedInput = 1
            } else if (inputChar == 8) { ; backspace
                if (cmdLength > 0) {
                    console_backspace()
                    cmdLength = cmdLength - 1
                }
                processedInput = 1
            } else { ; normal character
                if (cmdLength < cmdBufferSize - 1) {
                    cmdBuffer[cmdLength] = inputChar
                    cmdLength = cmdLength + 1
                    console_putc(inputChar)
                }
                processedInput = 1
            }
        }
    }

    return cmdLength
}

; Display welcome screen
func __display_welcome() {
    __display_banner()
    println(__hintStr, __hintStrLen)
}

; Main shell loop
func __shell_loop() {
    var CMD_BUFFER_SIZE: int = 128
    var cmdBuffer: byte* = malloc(CMD_BUFFER_SIZE)

    var mainLoop: int = 1
    while (mainLoop == 1) {
        ; Display prompt
        print(__promptStr, __promptStrLen)

        ; Read command
        var cmdLength: int = __read_command(cmdBuffer, CMD_BUFFER_SIZE)

        ; Process command if any was entered
        if (cmdLength > 0) {
            __process_command(cmdBuffer, cmdLength)
        }
    }
}

func main() {
    console_init()
    __init_strings()
    __display_welcome()
    __shell_loop()
}