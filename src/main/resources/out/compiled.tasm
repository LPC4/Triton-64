    ; Program entry point
_start:

    ; ====================================
    ; Global variables
    ; ====================================
    ADD hp, gp, 8
    ; Allocated 8 bytes for global variables
    ; Total global data size: 8 bytes
    LDI t0, 67
    LDI t1, 0
    ADD t1, gp, t1
    SB t1, t0
    JAL main, ra
    HLT

    ; ======================================
    ; Function: main
    ; ======================================
main:
    ; Pre-allocating 4 local variables
    ; Pre-allocated variable: b (BYTE)
    ; Pre-allocated variable: i (INT)
    ; Pre-allocated variable: l (LONG)
    ; Pre-allocated variable: d (INT)
    ; Function prologue
    PUSH ra
    PUSH fp
    MOV fp, sp
    ; Total frame size: 24 bytes
    LDI t0, 24
    SUB sp, sp, t0
    ; Allocated 24 bytes for stack frame
    ; Declaration: b
    LDI t0, 1
    LDI t1, -1
    ADD t1, fp, t1
    SB t1, t0
    ; Declaration: i
    LDI t0, 42
    LDI t1, -5
    ADD t1, fp, t1
    SI t1, t0
    ; Declaration: l
    ; Unary operation: NEG
    LDI t0, 1
    NEG t1, t0
    LDI t0, -13
    ADD t0, fp, t0
    ST t0, t1
    ; Declaration: d
    ; Binary operation: ADD
    LDI t0, -1
    ADD t0, fp, t0
    LB t1, t0
    LDI t0, 0
    ADD t0, gp, t0
    LB t2, t0
    ADD t0, t1, t2
    LDI t1, -17
    ADD t1, fp, t1
    SI t1, t0
    ; Function call: test
    ; Preparing function call: test
    ; Evaluating argument 0
    LDI t0, -17
    ADD t0, fp, t0
    LI t1, t0
    PUSH t1
    JAL test, ra
    LDI t0, 8
    ADD sp, sp, t0
    ; Cleaned up 1 arguments from stack
    MOV t0, a0
    ; Assignment to local variable: d
    LDI t1, -17
    ADD t1, fp, t1
    SI t1, t0
    ; return statement
    ; Type conversion to BYTE
    LDI t0, -17
    ADD t0, fp, t0
    LI t1, t0
    ; Converting INT to BYTE (truncate 32â†’8 and sign-extend to 64)
    LDI t2, 255
    AND t0, t1, t2
    SHL t0, t0, 56
    SAR t0, t0, 56
    MOV a0, t0
    JMP main_end_0
    ; Function epilogue
main_end_0:
    LDI t0, 24
    ADD sp, sp, t0
    ; Deallocated 24 bytes for frame
    POP fp
    POP ra
    JMP ra                               ; Return from function

    ; ======================================
    ; Function: test
    ; ======================================
test:
    ; Pre-allocating 1 local variables
    ; Pre-allocated variable: c (INT)
    ; Function prologue
    PUSH ra
    PUSH fp
    MOV fp, sp
    ; Total frame size: 8 bytes
    LDI t0, 8
    SUB sp, sp, t0
    ; Allocated 8 bytes for stack frame
    ; Declaration: c
    ; Binary operation: ADD
    LDI t0, 16
    ADD t0, fp, t0
    LI t1, t0
    LDI t0, 1
    ADD t2, t1, t0
    LDI t0, -4
    ADD t0, fp, t0
    SI t0, t2
    ; return statement
    LDI t0, -4
    ADD t0, fp, t0
    LI t1, t0
    MOV a0, t1
    JMP test_end_1
    ; Function epilogue
test_end_1:
    LDI t0, 8
    ADD sp, sp, t0
    ; Deallocated 8 bytes for frame
    POP fp
    POP ra
    JMP ra                               ; Return from function