    ; Program entry point
_start:

    ; ====================================
    ; Global variables
    ; ====================================
    ADD hp, gp, 208
    ; Allocated 208 bytes for global variables
    ; Total global data size: 208 bytes
    ; Literal value: 402784256
    LDI t0, 402784256
    LDI t1, 0
    ADD t1, gp, t1
    ST t1, t0
    ; Literal value: 134217728
    LDI t0, 134217728
    LDI t1, 8
    ADD t1, gp, t1
    ST t1, t0
    ; Literal value: 12
    LDI t0, 12
    LDI t1, 16
    ADD t1, gp, t1
    SI t1, t0
    ; Literal value: 16
    LDI t0, 16
    LDI t1, 20
    ADD t1, gp, t1
    SI t1, t0
    ; Literal value: 8
    LDI t0, 8
    LDI t1, 24
    ADD t1, gp, t1
    SI t1, t0
    ; Literal value: 0
    LDI t0, 0
    LDI t1, 28
    ADD t1, gp, t1
    ST t1, t0
    ; Literal value: 80
    LDI t0, 80
    LDI t1, 36
    ADD t1, gp, t1
    SI t1, t0
    ; Literal value: 30
    LDI t0, 30
    LDI t1, 40
    ADD t1, gp, t1
    SI t1, t0
    ; Literal value: 539099136
    LDI t0, 539099136
    LDI t1, 44
    ADD t1, gp, t1
    ST t1, t0
    ; Literal value: 0
    LDI t0, 0
    LDI t1, 52
    ADD t1, gp, t1
    SI t1, t0
    ; Literal value: 537001984
    LDI t0, 537001984
    LDI t1, 56
    ADD t1, gp, t1
    ST t1, t0
    ; Literal value: 1
    LDI t0, 1
    LDI t1, 64
    ADD t1, gp, t1
    ST t1, t0
    ; Literal value: 2
    LDI t0, 2
    LDI t1, 72
    ADD t1, gp, t1
    ST t1, t0
    ; Literal value: 8
    LDI t0, 8
    LDI t1, 80
    ADD t1, gp, t1
    ST t1, t0
    ; Literal value: 0
    LDI t0, 0
    LDI t1, 88
    ADD t1, gp, t1
    ST t1, t0
    ; Literal value: 0
    LDI t0, 0
    LDI t1, 96
    ADD t1, gp, t1
    SI t1, t0
    ; Literal value: 0
    LDI t0, 0
    LDI t1, 100
    ADD t1, gp, t1
    ST t1, t0
    ; Literal value: 0
    LDI t0, 0
    LDI t1, 108
    ADD t1, gp, t1
    SI t1, t0
    ; Literal value: 0
    LDI t0, 0
    LDI t1, 112
    ADD t1, gp, t1
    ST t1, t0
    ; Literal value: 0
    LDI t0, 0
    LDI t1, 120
    ADD t1, gp, t1
    SI t1, t0
    ; Literal value: 0
    LDI t0, 0
    LDI t1, 124
    ADD t1, gp, t1
    ST t1, t0
    ; Literal value: 0
    LDI t0, 0
    LDI t1, 132
    ADD t1, gp, t1
    SI t1, t0
    ; Literal value: 0
    LDI t0, 0
    LDI t1, 136
    ADD t1, gp, t1
    ST t1, t0
    ; Literal value: 0
    LDI t0, 0
    LDI t1, 144
    ADD t1, gp, t1
    SI t1, t0
    ; Literal value: 0
    LDI t0, 0
    LDI t1, 148
    ADD t1, gp, t1
    ST t1, t0
    ; Literal value: 0
    LDI t0, 0
    LDI t1, 156
    ADD t1, gp, t1
    SI t1, t0
    ; Literal value: 0
    LDI t0, 0
    LDI t1, 160
    ADD t1, gp, t1
    ST t1, t0
    ; Literal value: 0
    LDI t0, 0
    LDI t1, 168
    ADD t1, gp, t1
    SI t1, t0
    ; Literal value: 0
    LDI t0, 0
    LDI t1, 172
    ADD t1, gp, t1
    ST t1, t0
    ; Literal value: 0
    LDI t0, 0
    LDI t1, 180
    ADD t1, gp, t1
    SI t1, t0
    ; Literal value: 0
    LDI t0, 0
    LDI t1, 184
    ADD t1, gp, t1
    ST t1, t0
    ; Literal value: 0
    LDI t0, 0
    LDI t1, 192
    ADD t1, gp, t1
    SI t1, t0
    ; Literal value: 0
    LDI t0, 0
    LDI t1, 196
    ADD t1, gp, t1
    ST t1, t0
    ; Literal value: 0
    LDI t0, 0
    LDI t1, 204
    ADD t1, gp, t1
    SI t1, t0
    JAL main, ra
    HLT

    ; ================================
    ; Function: __align_up
    ; ================================
__align_up:
    ; Pre-allocating 0 local variables
    ; Function prologue
    PUSH ra
    PUSH fp
    MOV fp, sp
    ; Total frame size: 0 bytes
    ; Return statement
    ; Arithmetic operation: SUB
    ; Arithmetic operation: ADD
    ; Variable access: size
    LDI t2, 16
    ADD t2, fp, t2
    LD t3, t2
    ; Variable access: alignment
    LDI t2, 24
    ADD t2, fp, t2
    LD t4, t2
    ADD t1, t3, t4
    ; Arithmetic operation: MOD
    ; Variable access: size
    LDI t3, 16
    ADD t3, fp, t3
    LD t4, t3
    ; Variable access: alignment
    LDI t3, 24
    ADD t3, fp, t3
    LD t5, t3
    MOD t2, t4, t5
    SUB t0, t1, t2
    MOV a0, t0
    JMP __align_up_end_0
    ; Function epilogue
__align_up_end_0:
    POP fp
    POP ra
    JMP ra                               ; Return from function

    ; ===============================
    ; Function: __init_heap
    ; ===============================
__init_heap:
    ; Pre-allocating 0 local variables
    ; Function prologue
    PUSH ra
    PUSH fp
    MOV fp, sp
    ; Total frame size: 0 bytes
    ; If statement
    ; Comparison: Variable(name=__freeListHead, type=PointerType[elementType=StructType{name='BlockHeader', complete=true}]) EQ Literal(value=0, type=LONG)
    ; Variable access: __freeListHead
    LDI t0, 28
    ADD t0, gp, t0
    LD t1, t0
    ; Literal value: 0
    LDI t0, 0
    SUB t2, t1, t0
    ; Jump if t1 != t0
    JNZ else_2, t2
    ; Variable assignment: __freeListHead
    ; Variable access: __HEAP_START
    LDI t0, 0
    ADD t0, gp, t0
    LD t1, t0
    LDI t0, 28
    ADD t0, gp, t0
    ST t0, t1
    ; Struct field assignment: size
    ; Variable access: __freeListHead
    LDI t0, 28
    ADD t0, gp, t0
    LD t1, t0
    LDI t0, 0
    ADD t0, t1, t0
    ; Variable access: __HEAP_SIZE
    LDI t2, 8
    ADD t2, gp, t2
    LD t3, t2
    SI t0, t3
    ; Struct field assignment: next
    ; Variable access: __freeListHead
    LDI t0, 28
    ADD t0, gp, t0
    LD t1, t0
    LDI t0, 4
    ADD t0, t1, t0
    ; Literal value: 0
    LDI t2, 0
    ST t0, t2
else_2:
    ; Function epilogue
__init_heap_end_1:
    POP fp
    POP ra
    JMP ra                               ; Return from function

    ; ============================
    ; Function: __unlink_block
    ; ============================
__unlink_block:
    ; Pre-allocating 0 local variables
    ; Function prologue
    PUSH ra
    PUSH fp
    MOV fp, sp
    ; Total frame size: 0 bytes
    ; If statement
    ; Comparison: Variable(name=prev, type=PointerType[elementType=StructType{name='BlockHeader', complete=true}]) EQ Literal(value=0, type=LONG)
    ; Variable access: prev
    LDI t0, 24
    ADD t0, fp, t0
    LD t1, t0
    ; Literal value: 0
    LDI t0, 0
    SUB t2, t1, t0
    ; Jump if t1 != t0
    JNZ else_5, t2
    ; Variable assignment: __freeListHead
    ; Struct field access: next
    ; Variable access: block
    LDI t0, 16
    ADD t0, fp, t0
    LD t1, t0
    LDI t2, 4
    ADD t2, t1, t2
    LD t0, t2
    LDI t1, 28
    ADD t1, gp, t1
    ST t1, t0
    JMP endif_6
else_5:
    ; Struct field assignment: next
    ; Variable access: prev
    LDI t0, 24
    ADD t0, fp, t0
    LD t1, t0
    LDI t0, 4
    ADD t0, t1, t0
    ; Struct field access: next
    ; Variable access: block
    LDI t2, 16
    ADD t2, fp, t2
    LD t3, t2
    LDI t4, 4
    ADD t4, t3, t4
    LD t2, t4
    ST t0, t2
endif_6:
    ; Function epilogue
__unlink_block_end_4:
    POP fp
    POP ra
    JMP ra                               ; Return from function

    ; =============================
    ; Function: __split_block
    ; =============================
__split_block:
    ; Pre-allocating 2 local variables
    ; Pre-allocated variable: remaining (LONG)
    ; Pre-allocated variable: new_block (PointerType[elementType=StructType{name='BlockHeader', complete=true}])
    ; Function prologue
    PUSH ra
    PUSH fp
    MOV fp, sp
    ; Total frame size: 16 bytes
    LDI t0, 16
    SUB sp, sp, t0
    ; Allocated 16 bytes for stack frame
    ; Variable declaration: remaining
    ; Arithmetic operation: SUB
    ; Struct field access: size
    ; Variable access: block
    LDI t1, 16
    ADD t1, fp, t1
    LD t2, t1
    LDI t3, 0
    ADD t3, t2, t3
    LI t1, t3
    ; Variable access: needed_size
    LDI t2, 24
    ADD t2, fp, t2
    LD t3, t2
    SUB t0, t1, t3
    LDI t1, -8
    ADD t1, fp, t1
    ST t1, t0
    ; If statement
    ; Comparison: Variable(name=remaining, type=LONG) GE Variable(name=__MIN_BLOCK_SIZE, type=INT)
    ; Variable access: remaining
    LDI t0, -8
    ADD t0, fp, t0
    LD t1, t0
    ; Variable access: __MIN_BLOCK_SIZE
    LDI t0, 20
    ADD t0, gp, t0
    LI t2, t0
    SUB t0, t1, t2
    ; Jump if t1 < t2
    JPN else_8, t0
    ; Variable declaration: new_block
    ; Type conversion to PointerType[elementType=StructType{name='BlockHeader', complete=true}]
    ; Arithmetic operation: ADD
    ; Variable access: block
    LDI t2, 16
    ADD t2, fp, t2
    LD t3, t2
    ; Variable access: needed_size
    LDI t2, 24
    ADD t2, fp, t2
    LD t4, t2
    ADD t1, t3, t4
    MOV t0, t1
    LDI t1, -16
    ADD t1, fp, t1
    ST t1, t0
    ; Struct field assignment: size
    ; Variable access: new_block
    LDI t0, -16
    ADD t0, fp, t0
    LD t1, t0
    LDI t0, 0
    ADD t0, t1, t0
    ; Variable access: remaining
    LDI t2, -8
    ADD t2, fp, t2
    LD t3, t2
    SI t0, t3
    ; Struct field assignment: next
    ; Variable access: new_block
    LDI t0, -16
    ADD t0, fp, t0
    LD t1, t0
    LDI t0, 4
    ADD t0, t1, t0
    ; Variable access: __freeListHead
    LDI t2, 28
    ADD t2, gp, t2
    LD t3, t2
    ST t0, t3
    ; Variable assignment: __freeListHead
    ; Variable access: new_block
    LDI t0, -16
    ADD t0, fp, t0
    LD t1, t0
    LDI t0, 28
    ADD t0, gp, t0
    ST t0, t1
    ; Struct field assignment: size
    ; Variable access: block
    LDI t0, 16
    ADD t0, fp, t0
    LD t1, t0
    LDI t0, 0
    ADD t0, t1, t0
    ; Variable access: needed_size
    LDI t2, 24
    ADD t2, fp, t2
    LD t3, t2
    SI t0, t3
    ; Struct field assignment: next
    ; Variable access: block
    LDI t0, 16
    ADD t0, fp, t0
    LD t1, t0
    LDI t0, 4
    ADD t0, t1, t0
    ; Literal value: 0
    LDI t2, 0
    ST t0, t2
    JMP endif_9
else_8:
    ; Struct field assignment: next
    ; Variable access: block
    LDI t0, 16
    ADD t0, fp, t0
    LD t1, t0
    LDI t0, 4
    ADD t0, t1, t0
    ; Literal value: 0
    LDI t2, 0
    ST t0, t2
endif_9:
    ; Function epilogue
__split_block_end_7:
    LDI t0, 16
    ADD sp, sp, t0
    ; Deallocated 16 bytes for frame
    POP fp
    POP ra
    JMP ra                               ; Return from function

    ; ====================
    ; Function: __coalesce_free_blocks
    ; ====================
__coalesce_free_blocks:
    ; Pre-allocating 2 local variables
    ; Pre-allocated variable: current (PointerType[elementType=StructType{name='BlockHeader', complete=true}])
    ; Pre-allocated variable: next (PointerType[elementType=StructType{name='BlockHeader', complete=true}])
    ; Function prologue
    PUSH ra
    PUSH fp
    MOV fp, sp
    ; Total frame size: 16 bytes
    LDI t0, 16
    SUB sp, sp, t0
    ; Allocated 16 bytes for stack frame
    ; If statement
    ; Comparison: Variable(name=__freeListHead, type=PointerType[elementType=StructType{name='BlockHeader', complete=true}]) EQ Literal(value=0, type=LONG)
    ; Variable access: __freeListHead
    LDI t0, 28
    ADD t0, gp, t0
    LD t1, t0
    ; Literal value: 0
    LDI t0, 0
    SUB t2, t1, t0
    ; Jump if t1 != t0
    JNZ else_11, t2
    ; Return statement
    JMP __coalesce_free_blocks_end_10
else_11:
    ; Variable declaration: current
    ; Variable access: __freeListHead
    LDI t0, 28
    ADD t0, gp, t0
    LD t1, t0
    LDI t0, -8
    ADD t0, fp, t0
    ST t0, t1
    ; While loop
loop_13:
    ; Comparison: Variable(name=current, type=PointerType[elementType=StructType{name='BlockHeader', complete=true}]) NE Literal(value=0, type=LONG)
    ; Variable access: current
    LDI t0, -8
    ADD t0, fp, t0
    LD t1, t0
    ; Literal value: 0
    LDI t0, 0
    SUB t2, t1, t0
    ; Jump if t1 == t0
    JZ endloop_14, t2
    ; Variable declaration: next
    ; Struct field access: next
    ; Variable access: current
    LDI t0, -8
    ADD t0, fp, t0
    LD t1, t0
    LDI t2, 4
    ADD t2, t1, t2
    LD t0, t2
    LDI t1, -16
    ADD t1, fp, t1
    ST t1, t0
    ; If statement
    ; Logical AND: BinaryOp(op=NE, left=Variable(name=next, type=PointerType[elementType=StructType{name='BlockHeader', complete=true}]), right=Literal(value=0, type=LONG)) && BinaryOp(op=EQ, left=TypeConversion(expression=Variable(name=next, type=PointerType[elementType=StructType{name='BlockHeader', complete=true}]), targetType=LONG), right=BinaryOp(op=ADD, left=TypeConversion(expression=Variable(name=current, type=PointerType[elementType=StructType{name='BlockHeader', complete=true}]), targetType=LONG), right=StructFieldAccess(base=Variable(name=current, type=PointerType[elementType=StructType{name='BlockHeader', complete=true}]), fieldName=size, fieldType=INT, fieldOffset=0)))
    ; Comparison: Variable(name=next, type=PointerType[elementType=StructType{name='BlockHeader', complete=true}]) NE Literal(value=0, type=LONG)
    ; Variable access: next
    LDI t0, -16
    ADD t0, fp, t0
    LD t1, t0
    ; Literal value: 0
    LDI t0, 0
    SUB t2, t1, t0
    ; Jump if t1 == t0
    JZ else_15, t2
    ; Comparison: TypeConversion(expression=Variable(name=next, type=PointerType[elementType=StructType{name='BlockHeader', complete=true}]), targetType=LONG) EQ BinaryOp(op=ADD, left=TypeConversion(expression=Variable(name=current, type=PointerType[elementType=StructType{name='BlockHeader', complete=true}]), targetType=LONG), right=StructFieldAccess(base=Variable(name=current, type=PointerType[elementType=StructType{name='BlockHeader', complete=true}]), fieldName=size, fieldType=INT, fieldOffset=0))
    ; Type conversion to LONG
    ; Variable access: next
    LDI t1, -16
    ADD t1, fp, t1
    LD t2, t1
    MOV t0, t2
    ; Arithmetic operation: ADD
    ; Type conversion to LONG
    ; Variable access: current
    LDI t3, -8
    ADD t3, fp, t3
    LD t4, t3
    MOV t2, t4
    ; Struct field access: size
    ; Variable access: current
    LDI t3, -8
    ADD t3, fp, t3
    LD t4, t3
    LDI t5, 0
    ADD t5, t4, t5
    LI t3, t5
    ADD t1, t2, t3
    SUB t2, t0, t1
    ; Jump if t0 != t1
    JNZ else_15, t2
    ; Struct field assignment: size
    ; Variable access: current
    LDI t0, -8
    ADD t0, fp, t0
    LD t1, t0
    LDI t0, 0
    ADD t0, t1, t0
    ; Arithmetic operation: ADD
    ; Struct field access: size
    ; Variable access: current
    LDI t3, -8
    ADD t3, fp, t3
    LD t4, t3
    LDI t5, 0
    ADD t5, t4, t5
    LI t3, t5
    ; Struct field access: size
    ; Variable access: next
    LDI t4, -16
    ADD t4, fp, t4
    LD t5, t4
    LDI t6, 0
    ADD t6, t5, t6
    LI t4, t6
    ADD t2, t3, t4
    SI t0, t2
    ; Struct field assignment: next
    ; Variable access: current
    LDI t0, -8
    ADD t0, fp, t0
    LD t1, t0
    LDI t0, 4
    ADD t0, t1, t0
    ; Struct field access: next
    ; Variable access: next
    LDI t2, -16
    ADD t2, fp, t2
    LD t3, t2
    LDI t4, 4
    ADD t4, t3, t4
    LD t2, t4
    ST t0, t2
    JMP endif_16
else_15:
    ; Variable assignment: current
    ; Variable access: next
    LDI t0, -16
    ADD t0, fp, t0
    LD t1, t0
    LDI t0, -8
    ADD t0, fp, t0
    ST t0, t1
endif_16:
    JMP loop_13
endloop_14:
    ; Function epilogue
__coalesce_free_blocks_end_10:
    LDI t0, 16
    ADD sp, sp, t0
    ; Deallocated 16 bytes for frame
    POP fp
    POP ra
    JMP ra                               ; Return from function

    ; ====================================
    ; Function: malloc
    ; ====================================
malloc:
    ; Pre-allocating 3 local variables
    ; Pre-allocated variable: total_needed (LONG)
    ; Pre-allocated variable: current (PointerType[elementType=StructType{name='BlockHeader', complete=true}])
    ; Pre-allocated variable: prev (PointerType[elementType=StructType{name='BlockHeader', complete=true}])
    ; Function prologue
    PUSH ra
    PUSH fp
    MOV fp, sp
    ; Total frame size: 24 bytes
    LDI t0, 24
    SUB sp, sp, t0
    ; Allocated 24 bytes for stack frame
    ; If statement
    ; Comparison: Variable(name=size_req, type=LONG) EQ Literal(value=0, type=LONG)
    ; Variable access: size_req
    LDI t0, 16
    ADD t0, fp, t0
    LD t1, t0
    ; Literal value: 0
    LDI t0, 0
    SUB t2, t1, t0
    ; Jump if t1 != t0
    JNZ else_18, t2
    ; Return statement
    ; Literal value: 0
    LDI t0, 0
    MOV a0, t0
    JMP malloc_end_17
else_18:
    ; Expression statement
    ; Function call: __init_heap
    ; Preparing function call: __init_heap
    JAL __init_heap, ra
    MOV t0, a0
    ; Variable declaration: total_needed
    ; Function call: __align_up
    ; Preparing function call: __align_up
    ; Evaluating argument 0
    ; Arithmetic operation: ADD
    ; Variable access: size_req
    LDI t1, 16
    ADD t1, fp, t1
    LD t2, t1
    ; Variable access: __HEADER_SIZE
    LDI t1, 16
    ADD t1, gp, t1
    LI t3, t1
    ADD t0, t2, t3
    ; Evaluating argument 1
    ; Variable access: __ALIGNMENT
    LDI t1, 24
    ADD t1, gp, t1
    LI t2, t1
    PUSH t2
    PUSH t0
    JAL __align_up, ra
    LDI t0, 16
    ADD sp, sp, t0
    ; Cleaned up 2 arguments from stack
    MOV t0, a0
    LDI t1, -8
    ADD t1, fp, t1
    ST t1, t0
    ; Variable declaration: current
    ; Variable access: __freeListHead
    LDI t0, 28
    ADD t0, gp, t0
    LD t1, t0
    LDI t0, -16
    ADD t0, fp, t0
    ST t0, t1
    ; Variable declaration: prev
    ; Literal value: 0
    LDI t0, 0
    LDI t1, -24
    ADD t1, fp, t1
    ST t1, t0
    ; While loop
loop_20:
    ; Comparison: Variable(name=current, type=PointerType[elementType=StructType{name='BlockHeader', complete=true}]) NE Literal(value=0, type=LONG)
    ; Variable access: current
    LDI t0, -16
    ADD t0, fp, t0
    LD t1, t0
    ; Literal value: 0
    LDI t0, 0
    SUB t2, t1, t0
    ; Jump if t1 == t0
    JZ endloop_21, t2
    ; If statement
    ; Comparison: StructFieldAccess(base=Variable(name=current, type=PointerType[elementType=StructType{name='BlockHeader', complete=true}]), fieldName=size, fieldType=INT, fieldOffset=0) GE Variable(name=total_needed, type=LONG)
    ; Struct field access: size
    ; Variable access: current
    LDI t0, -16
    ADD t0, fp, t0
    LD t1, t0
    LDI t2, 0
    ADD t2, t1, t2
    LI t0, t2
    ; Variable access: total_needed
    LDI t1, -8
    ADD t1, fp, t1
    LD t2, t1
    SUB t1, t0, t2
    ; Jump if t0 < t2
    JPN else_22, t1
    ; Expression statement
    ; Function call: __unlink_block
    ; Preparing function call: __unlink_block
    ; Evaluating argument 0
    ; Variable access: current
    LDI t0, -16
    ADD t0, fp, t0
    LD t1, t0
    ; Evaluating argument 1
    ; Variable access: prev
    LDI t0, -24
    ADD t0, fp, t0
    LD t2, t0
    PUSH t2
    PUSH t1
    JAL __unlink_block, ra
    LDI t0, 16
    ADD sp, sp, t0
    ; Cleaned up 2 arguments from stack
    MOV t0, a0
    ; Expression statement
    ; Function call: __split_block
    ; Preparing function call: __split_block
    ; Evaluating argument 0
    ; Variable access: current
    LDI t0, -16
    ADD t0, fp, t0
    LD t1, t0
    ; Evaluating argument 1
    ; Variable access: total_needed
    LDI t0, -8
    ADD t0, fp, t0
    LD t2, t0
    PUSH t2
    PUSH t1
    JAL __split_block, ra
    LDI t0, 16
    ADD sp, sp, t0
    ; Cleaned up 2 arguments from stack
    MOV t0, a0
    ; Return statement
    ; Arithmetic operation: ADD
    ; Type conversion to LONG
    ; Variable access: current
    LDI t2, -16
    ADD t2, fp, t2
    LD t3, t2
    MOV t1, t3
    ; Variable access: __HEADER_SIZE
    LDI t2, 16
    ADD t2, gp, t2
    LI t3, t2
    ADD t0, t1, t3
    MOV a0, t0
    JMP malloc_end_17
else_22:
    ; Variable assignment: prev
    ; Variable access: current
    LDI t0, -16
    ADD t0, fp, t0
    LD t1, t0
    LDI t0, -24
    ADD t0, fp, t0
    ST t0, t1
    ; Variable assignment: current
    ; Struct field access: next
    ; Variable access: current
    LDI t0, -16
    ADD t0, fp, t0
    LD t1, t0
    LDI t2, 4
    ADD t2, t1, t2
    LD t0, t2
    LDI t1, -16
    ADD t1, fp, t1
    ST t1, t0
    JMP loop_20
endloop_21:
    ; Return statement
    ; Literal value: 0
    LDI t0, 0
    MOV a0, t0
    JMP malloc_end_17
    ; Function epilogue
malloc_end_17:
    LDI t0, 24
    ADD sp, sp, t0
    ; Deallocated 24 bytes for frame
    POP fp
    POP ra
    JMP ra                               ; Return from function

    ; ======================================
    ; Function: free
    ; ======================================
free:
    ; Pre-allocating 1 local variables
    ; Pre-allocated variable: block (PointerType[elementType=StructType{name='BlockHeader', complete=true}])
    ; Function prologue
    PUSH ra
    PUSH fp
    MOV fp, sp
    ; Total frame size: 8 bytes
    LDI t0, 8
    SUB sp, sp, t0
    ; Allocated 8 bytes for stack frame
    ; If statement
    ; Comparison: Variable(name=ptr, type=LONG) EQ Literal(value=0, type=LONG)
    ; Variable access: ptr
    LDI t0, 16
    ADD t0, fp, t0
    LD t1, t0
    ; Literal value: 0
    LDI t0, 0
    SUB t2, t1, t0
    ; Jump if t1 != t0
    JNZ else_25, t2
    ; Return statement
    JMP free_end_24
else_25:
    ; Variable declaration: block
    ; Type conversion to PointerType[elementType=StructType{name='BlockHeader', complete=true}]
    ; Arithmetic operation: SUB
    ; Variable access: ptr
    LDI t2, 16
    ADD t2, fp, t2
    LD t3, t2
    ; Variable access: __HEADER_SIZE
    LDI t2, 16
    ADD t2, gp, t2
    LI t4, t2
    SUB t1, t3, t4
    ; Converting LONG to POINTER (no-op)
    MOV t0, t1
    LDI t1, -8
    ADD t1, fp, t1
    ST t1, t0
    ; Struct field assignment: next
    ; Variable access: block
    LDI t0, -8
    ADD t0, fp, t0
    LD t1, t0
    LDI t0, 4
    ADD t0, t1, t0
    ; Variable access: __freeListHead
    LDI t2, 28
    ADD t2, gp, t2
    LD t3, t2
    ST t0, t3
    ; Variable assignment: __freeListHead
    ; Variable access: block
    LDI t0, -8
    ADD t0, fp, t0
    LD t1, t0
    LDI t0, 28
    ADD t0, gp, t0
    ST t0, t1
    ; Expression statement
    ; Function call: __coalesce_free_blocks
    ; Preparing function call: __coalesce_free_blocks
    JAL __coalesce_free_blocks, ra
    MOV t0, a0
    ; Function epilogue
free_end_24:
    LDI t0, 8
    ADD sp, sp, t0
    ; Deallocated 8 bytes for frame
    POP fp
    POP ra
    JMP ra                               ; Return from function

    ; ===================================
    ; Function: realloc
    ; ===================================
realloc:
    ; Pre-allocating 6 local variables
    ; Pre-allocated variable: block (PointerType[elementType=StructType{name='BlockHeader', complete=true}])
    ; Pre-allocated variable: current_size (LONG)
    ; Pre-allocated variable: aligned_new_size (LONG)
    ; Pre-allocated variable: new_ptr (LONG)
    ; Pre-allocated variable: copy_size (LONG)
    ; Pre-allocated variable: i (LONG)
    ; Function prologue
    PUSH ra
    PUSH fp
    MOV fp, sp
    ; Total frame size: 48 bytes
    LDI t0, 48
    SUB sp, sp, t0
    ; Allocated 48 bytes for stack frame
    ; If statement
    ; Comparison: Variable(name=ptr, type=LONG) EQ Literal(value=0, type=LONG)
    ; Variable access: ptr
    LDI t0, 16
    ADD t0, fp, t0
    LD t1, t0
    ; Literal value: 0
    LDI t0, 0
    SUB t2, t1, t0
    ; Jump if t1 != t0
    JNZ else_28, t2
    ; Return statement
    ; Function call: malloc
    ; Preparing function call: malloc
    ; Evaluating argument 0
    ; Variable access: new_size
    LDI t0, 24
    ADD t0, fp, t0
    LD t1, t0
    PUSH t1
    JAL malloc, ra
    LDI t0, 8
    ADD sp, sp, t0
    ; Cleaned up 1 arguments from stack
    MOV t0, a0
    MOV a0, t0
    JMP realloc_end_27
else_28:
    ; If statement
    ; Comparison: Variable(name=new_size, type=LONG) EQ Literal(value=0, type=LONG)
    ; Variable access: new_size
    LDI t0, 24
    ADD t0, fp, t0
    LD t1, t0
    ; Literal value: 0
    LDI t0, 0
    SUB t2, t1, t0
    ; Jump if t1 != t0
    JNZ else_30, t2
    ; Expression statement
    ; Function call: free
    ; Preparing function call: free
    ; Evaluating argument 0
    ; Variable access: ptr
    LDI t0, 16
    ADD t0, fp, t0
    LD t1, t0
    PUSH t1
    JAL free, ra
    LDI t0, 8
    ADD sp, sp, t0
    ; Cleaned up 1 arguments from stack
    MOV t0, a0
    ; Return statement
    ; Literal value: 0
    LDI t0, 0
    MOV a0, t0
    JMP realloc_end_27
else_30:
    ; Variable declaration: block
    ; Type conversion to PointerType[elementType=StructType{name='BlockHeader', complete=true}]
    ; Arithmetic operation: SUB
    ; Variable access: ptr
    LDI t2, 16
    ADD t2, fp, t2
    LD t3, t2
    ; Variable access: __HEADER_SIZE
    LDI t2, 16
    ADD t2, gp, t2
    LI t4, t2
    SUB t1, t3, t4
    ; Converting LONG to POINTER (no-op)
    MOV t0, t1
    LDI t1, -8
    ADD t1, fp, t1
    ST t1, t0
    ; Variable declaration: current_size
    ; Arithmetic operation: SUB
    ; Struct field access: size
    ; Variable access: block
    LDI t1, -8
    ADD t1, fp, t1
    LD t2, t1
    LDI t3, 0
    ADD t3, t2, t3
    LI t1, t3
    ; Variable access: __HEADER_SIZE
    LDI t2, 16
    ADD t2, gp, t2
    LI t3, t2
    SUB t0, t1, t3
    LDI t1, -16
    ADD t1, fp, t1
    ST t1, t0
    ; Variable declaration: aligned_new_size
    ; Function call: __align_up
    ; Preparing function call: __align_up
    ; Evaluating argument 0
    ; Variable access: new_size
    LDI t0, 24
    ADD t0, fp, t0
    LD t1, t0
    ; Evaluating argument 1
    ; Variable access: __ALIGNMENT
    LDI t0, 24
    ADD t0, gp, t0
    LI t2, t0
    PUSH t2
    PUSH t1
    JAL __align_up, ra
    LDI t0, 16
    ADD sp, sp, t0
    ; Cleaned up 2 arguments from stack
    MOV t0, a0
    LDI t1, -24
    ADD t1, fp, t1
    ST t1, t0
    ; If statement
    ; Comparison: Variable(name=aligned_new_size, type=LONG) LE Variable(name=current_size, type=LONG)
    ; Variable access: aligned_new_size
    LDI t0, -24
    ADD t0, fp, t0
    LD t1, t0
    ; Variable access: current_size
    LDI t0, -16
    ADD t0, fp, t0
    LD t2, t0
    SUB t0, t1, t2
    ; Jump if t1 > t2
    JPP else_32, t0
    ; Return statement
    ; Variable access: ptr
    LDI t0, 16
    ADD t0, fp, t0
    LD t1, t0
    MOV a0, t1
    JMP realloc_end_27
else_32:
    ; Variable declaration: new_ptr
    ; Function call: malloc
    ; Preparing function call: malloc
    ; Evaluating argument 0
    ; Variable access: new_size
    LDI t0, 24
    ADD t0, fp, t0
    LD t1, t0
    PUSH t1
    JAL malloc, ra
    LDI t0, 8
    ADD sp, sp, t0
    ; Cleaned up 1 arguments from stack
    MOV t0, a0
    LDI t1, -32
    ADD t1, fp, t1
    ST t1, t0
    ; If statement
    ; Comparison: Variable(name=new_ptr, type=LONG) EQ Literal(value=0, type=LONG)
    ; Variable access: new_ptr
    LDI t0, -32
    ADD t0, fp, t0
    LD t1, t0
    ; Literal value: 0
    LDI t0, 0
    SUB t2, t1, t0
    ; Jump if t1 != t0
    JNZ else_34, t2
    ; Return statement
    ; Literal value: 0
    LDI t0, 0
    MOV a0, t0
    JMP realloc_end_27
else_34:
    ; Variable declaration: copy_size
    ; Variable access: current_size
    LDI t0, -16
    ADD t0, fp, t0
    LD t1, t0
    LDI t0, -40
    ADD t0, fp, t0
    ST t0, t1
    ; If statement
    ; Comparison: Variable(name=aligned_new_size, type=LONG) LT Variable(name=copy_size, type=LONG)
    ; Variable access: aligned_new_size
    LDI t0, -24
    ADD t0, fp, t0
    LD t1, t0
    ; Variable access: copy_size
    LDI t0, -40
    ADD t0, fp, t0
    LD t2, t0
    SUB t0, t1, t2
    ; Jump if t1 >= t2
    JPN skip_ge_38, t0
    JMP else_36
skip_ge_38:
    ; Variable assignment: copy_size
    ; Variable access: aligned_new_size
    LDI t0, -24
    ADD t0, fp, t0
    LD t1, t0
    LDI t0, -40
    ADD t0, fp, t0
    ST t0, t1
else_36:
    ; Variable declaration: i
    ; Literal value: 0
    LDI t0, 0
    LDI t1, -48
    ADD t1, fp, t1
    ST t1, t0
    ; While loop
loop_39:
    ; Comparison: Variable(name=i, type=LONG) LT Variable(name=copy_size, type=LONG)
    ; Variable access: i
    LDI t0, -48
    ADD t0, fp, t0
    LD t1, t0
    ; Variable access: copy_size
    LDI t0, -40
    ADD t0, fp, t0
    LD t2, t0
    SUB t0, t1, t2
    ; Jump if t1 >= t2
    JPN skip_ge_41, t0
    JMP endloop_40
skip_ge_41:
    ; Arithmetic operation: ADD
    ; Variable access: new_ptr
    LDI t1, -32
    ADD t1, fp, t1
    LD t2, t1
    ; Variable access: i
    LDI t1, -48
    ADD t1, fp, t1
    LD t3, t1
    ADD t0, t2, t3
    ; Dereference assignment to address: t0
    ; Dereference operation
    ; Arithmetic operation: ADD
    ; Variable access: ptr
    LDI t3, 16
    ADD t3, fp, t3
    LD t4, t3
    ; Variable access: i
    LDI t3, -48
    ADD t3, fp, t3
    LD t5, t3
    ADD t2, t4, t5
    LB t1, t2
    ; Store BYTE to address t0
    SB t0, t1
    ; Variable assignment: i
    ; Arithmetic operation: ADD
    ; Variable access: i
    LDI t1, -48
    ADD t1, fp, t1
    LD t2, t1
    ; Literal value: 1
    LDI t1, 1
    ADD t0, t2, t1
    LDI t1, -48
    ADD t1, fp, t1
    ST t1, t0
    JMP loop_39
endloop_40:
    ; Expression statement
    ; Function call: free
    ; Preparing function call: free
    ; Evaluating argument 0
    ; Variable access: ptr
    LDI t0, 16
    ADD t0, fp, t0
    LD t1, t0
    PUSH t1
    JAL free, ra
    LDI t0, 8
    ADD sp, sp, t0
    ; Cleaned up 1 arguments from stack
    MOV t0, a0
    ; Return statement
    ; Variable access: new_ptr
    LDI t0, -32
    ADD t0, fp, t0
    LD t1, t0
    MOV a0, t1
    JMP realloc_end_27
    ; Function epilogue
realloc_end_27:
    LDI t0, 48
    ADD sp, sp, t0
    ; Deallocated 48 bytes for frame
    POP fp
    POP ra
    JMP ra                               ; Return from function

    ; ====================================
    ; Function: calloc
    ; ====================================
calloc:
    ; Pre-allocating 3 local variables
    ; Pre-allocated variable: total_size (LONG)
    ; Pre-allocated variable: ptr (LONG)
    ; Pre-allocated variable: i (LONG)
    ; Function prologue
    PUSH ra
    PUSH fp
    MOV fp, sp
    ; Total frame size: 24 bytes
    LDI t0, 24
    SUB sp, sp, t0
    ; Allocated 24 bytes for stack frame
    ; Variable declaration: total_size
    ; Arithmetic operation: MUL
    ; Variable access: count
    LDI t1, 16
    ADD t1, fp, t1
    LD t2, t1
    ; Variable access: size
    LDI t1, 24
    ADD t1, fp, t1
    LD t3, t1
    MUL t0, t2, t3
    LDI t1, -8
    ADD t1, fp, t1
    ST t1, t0
    ; Variable declaration: ptr
    ; Function call: malloc
    ; Preparing function call: malloc
    ; Evaluating argument 0
    ; Variable access: total_size
    LDI t0, -8
    ADD t0, fp, t0
    LD t1, t0
    PUSH t1
    JAL malloc, ra
    LDI t0, 8
    ADD sp, sp, t0
    ; Cleaned up 1 arguments from stack
    MOV t0, a0
    LDI t1, -16
    ADD t1, fp, t1
    ST t1, t0
    ; If statement
    ; Comparison: Variable(name=ptr, type=LONG) EQ Literal(value=0, type=LONG)
    ; Variable access: ptr
    LDI t0, -16
    ADD t0, fp, t0
    LD t1, t0
    ; Literal value: 0
    LDI t0, 0
    SUB t2, t1, t0
    ; Jump if t1 != t0
    JNZ else_43, t2
    ; Return statement
    ; Literal value: 0
    LDI t0, 0
    MOV a0, t0
    JMP calloc_end_42
else_43:
    ; Variable declaration: i
    ; Literal value: 0
    LDI t0, 0
    LDI t1, -24
    ADD t1, fp, t1
    ST t1, t0
    ; While loop
loop_45:
    ; Comparison: Variable(name=i, type=LONG) LT Variable(name=total_size, type=LONG)
    ; Variable access: i
    LDI t0, -24
    ADD t0, fp, t0
    LD t1, t0
    ; Variable access: total_size
    LDI t0, -8
    ADD t0, fp, t0
    LD t2, t0
    SUB t0, t1, t2
    ; Jump if t1 >= t2
    JPN skip_ge_47, t0
    JMP endloop_46
skip_ge_47:
    ; Arithmetic operation: ADD
    ; Variable access: ptr
    LDI t1, -16
    ADD t1, fp, t1
    LD t2, t1
    ; Variable access: i
    LDI t1, -24
    ADD t1, fp, t1
    LD t3, t1
    ADD t0, t2, t3
    ; Dereference assignment to address: t0
    ; Literal value: 0
    LDI t1, 0
    ; Store BYTE to address t0
    SB t0, t1
    ; Variable assignment: i
    ; Arithmetic operation: ADD
    ; Variable access: i
    LDI t1, -24
    ADD t1, fp, t1
    LD t2, t1
    ; Literal value: 1
    LDI t1, 1
    ADD t0, t2, t1
    LDI t1, -24
    ADD t1, fp, t1
    ST t1, t0
    JMP loop_45
endloop_46:
    ; Return statement
    ; Variable access: ptr
    LDI t0, -16
    ADD t0, fp, t0
    LD t1, t0
    MOV a0, t1
    JMP calloc_end_42
    ; Function epilogue
calloc_end_42:
    LDI t0, 24
    ADD sp, sp, t0
    ; Deallocated 24 bytes for frame
    POP fp
    POP ra
    JMP ra                               ; Return from function

    ; ==========================
    ; Function: __console_scroll
    ; ==========================
__console_scroll:
    ; Pre-allocating 10 local variables
    ; Pre-allocated variable: fb (LONG)
    ; Pre-allocated variable: row (INT)
    ; Pre-allocated variable: col (INT)
    ; Pre-allocated variable: src_index (INT)
    ; Pre-allocated variable: dst_index (INT)
    ; Pre-allocated variable: src (PointerType[elementType=StructType{name='ColorChar', complete=true}])
    ; Pre-allocated variable: dst (PointerType[elementType=StructType{name='ColorChar', complete=true}])
    ; Pre-allocated variable: col (INT)
    ; Pre-allocated variable: index (INT)
    ; Pre-allocated variable: cell (PointerType[elementType=StructType{name='ColorChar', complete=true}])
    ; Function prologue
    PUSH ra
    PUSH fp
    MOV fp, sp
    ; Total frame size: 56 bytes
    LDI t0, 56
    SUB sp, sp, t0
    ; Allocated 56 bytes for stack frame
    ; Variable declaration: fb
    ; Variable access: __FRAMEBUFFER_BASE
    LDI t0, 44
    ADD t0, gp, t0
    LD t1, t0
    LDI t0, -8
    ADD t0, fp, t0
    ST t0, t1
    ; Variable declaration: row
    ; Literal value: 0
    LDI t0, 0
    LDI t1, -12
    ADD t1, fp, t1
    SI t1, t0
    ; While loop
loop_49:
    ; Comparison: Variable(name=row, type=INT) LT BinaryOp(op=SUB, left=Variable(name=__SCREEN_HEIGHT, type=INT), right=Literal(value=1, type=LONG))
    ; Variable access: row
    LDI t0, -12
    ADD t0, fp, t0
    LI t1, t0
    ; Arithmetic operation: SUB
    ; Variable access: __SCREEN_HEIGHT
    LDI t2, 40
    ADD t2, gp, t2
    LI t3, t2
    ; Literal value: 1
    LDI t2, 1
    SUB t0, t3, t2
    SUB t2, t1, t0
    ; Jump if t1 >= t0
    JPN skip_ge_51, t2
    JMP endloop_50
skip_ge_51:
    ; Variable declaration: col
    ; Literal value: 0
    LDI t0, 0
    LDI t1, -16
    ADD t1, fp, t1
    SI t1, t0
    ; While loop
loop_52:
    ; Comparison: Variable(name=col, type=INT) LT Variable(name=__SCREEN_WIDTH, type=INT)
    ; Variable access: col
    LDI t0, -16
    ADD t0, fp, t0
    LI t1, t0
    ; Variable access: __SCREEN_WIDTH
    LDI t0, 36
    ADD t0, gp, t0
    LI t2, t0
    SUB t0, t1, t2
    ; Jump if t1 >= t2
    JPN skip_ge_54, t0
    JMP endloop_53
skip_ge_54:
    ; Variable declaration: src_index
    ; Arithmetic operation: ADD
    ; Arithmetic operation: MUL
    ; Arithmetic operation: ADD
    ; Variable access: row
    LDI t3, -12
    ADD t3, fp, t3
    LI t4, t3
    ; Literal value: 1
    LDI t3, 1
    ADD t2, t4, t3
    ; Variable access: __SCREEN_WIDTH
    LDI t3, 36
    ADD t3, gp, t3
    LI t4, t3
    MUL t1, t2, t4
    ; Variable access: col
    LDI t2, -16
    ADD t2, fp, t2
    LI t3, t2
    ADD t0, t1, t3
    LDI t1, -20
    ADD t1, fp, t1
    SI t1, t0
    ; Variable declaration: dst_index
    ; Arithmetic operation: ADD
    ; Arithmetic operation: MUL
    ; Variable access: row
    LDI t2, -12
    ADD t2, fp, t2
    LI t3, t2
    ; Variable access: __SCREEN_WIDTH
    LDI t2, 36
    ADD t2, gp, t2
    LI t4, t2
    MUL t1, t3, t4
    ; Variable access: col
    LDI t2, -16
    ADD t2, fp, t2
    LI t3, t2
    ADD t0, t1, t3
    LDI t1, -24
    ADD t1, fp, t1
    SI t1, t0
    ; Variable declaration: src
    ; Type conversion to PointerType[elementType=StructType{name='ColorChar', complete=true}]
    ; Arithmetic operation: ADD
    ; Variable access: fb
    LDI t2, -8
    ADD t2, fp, t2
    LD t3, t2
    ; Arithmetic operation: MUL
    ; Variable access: src_index
    LDI t4, -20
    ADD t4, fp, t4
    LI t5, t4
    ; Literal value: 4
    LDI t4, 4
    MUL t2, t5, t4
    ADD t1, t3, t2
    ; Converting LONG to POINTER (no-op)
    MOV t0, t1
    LDI t1, -32
    ADD t1, fp, t1
    ST t1, t0
    ; Variable declaration: dst
    ; Type conversion to PointerType[elementType=StructType{name='ColorChar', complete=true}]
    ; Arithmetic operation: ADD
    ; Variable access: fb
    LDI t2, -8
    ADD t2, fp, t2
    LD t3, t2
    ; Arithmetic operation: MUL
    ; Variable access: dst_index
    LDI t4, -24
    ADD t4, fp, t4
    LI t5, t4
    ; Literal value: 4
    LDI t4, 4
    MUL t2, t5, t4
    ADD t1, t3, t2
    ; Converting LONG to POINTER (no-op)
    MOV t0, t1
    LDI t1, -40
    ADD t1, fp, t1
    ST t1, t0
    ; Struct field assignment: ch
    ; Variable access: dst
    LDI t0, -40
    ADD t0, fp, t0
    LD t1, t0
    LDI t0, 0
    ADD t0, t1, t0
    ; Struct field access: ch
    ; Variable access: src
    LDI t2, -32
    ADD t2, fp, t2
    LD t3, t2
    LDI t4, 0
    ADD t4, t3, t4
    LB t2, t4
    SB t0, t2
    ; Struct field assignment: fg
    ; Variable access: dst
    LDI t0, -40
    ADD t0, fp, t0
    LD t1, t0
    LDI t0, 1
    ADD t0, t1, t0
    ; Struct field access: fg
    ; Variable access: src
    LDI t2, -32
    ADD t2, fp, t2
    LD t3, t2
    LDI t4, 1
    ADD t4, t3, t4
    LB t2, t4
    SB t0, t2
    ; Struct field assignment: bg
    ; Variable access: dst
    LDI t0, -40
    ADD t0, fp, t0
    LD t1, t0
    LDI t0, 2
    ADD t0, t1, t0
    ; Struct field access: bg
    ; Variable access: src
    LDI t2, -32
    ADD t2, fp, t2
    LD t3, t2
    LDI t4, 2
    ADD t4, t3, t4
    LB t2, t4
    SB t0, t2
    ; Struct field assignment: reserved
    ; Variable access: dst
    LDI t0, -40
    ADD t0, fp, t0
    LD t1, t0
    LDI t0, 3
    ADD t0, t1, t0
    ; Struct field access: reserved
    ; Variable access: src
    LDI t2, -32
    ADD t2, fp, t2
    LD t3, t2
    LDI t4, 3
    ADD t4, t3, t4
    LB t2, t4
    SB t0, t2
    ; Variable assignment: col
    ; Arithmetic operation: ADD
    ; Variable access: col
    LDI t1, -16
    ADD t1, fp, t1
    LI t2, t1
    ; Literal value: 1
    LDI t1, 1
    ADD t0, t2, t1
    LDI t1, -16
    ADD t1, fp, t1
    SI t1, t0
    JMP loop_52
endloop_53:
    ; Variable assignment: row
    ; Arithmetic operation: ADD
    ; Variable access: row
    LDI t1, -12
    ADD t1, fp, t1
    LI t2, t1
    ; Literal value: 1
    LDI t1, 1
    ADD t0, t2, t1
    LDI t1, -12
    ADD t1, fp, t1
    SI t1, t0
    JMP loop_49
endloop_50:
    ; Variable declaration: col
    ; Literal value: 0
    LDI t0, 0
    LDI t1, -16
    ADD t1, fp, t1
    SI t1, t0
    ; While loop
loop_55:
    ; Comparison: Variable(name=col, type=INT) LT Variable(name=__SCREEN_WIDTH, type=INT)
    ; Variable access: col
    LDI t0, -16
    ADD t0, fp, t0
    LI t1, t0
    ; Variable access: __SCREEN_WIDTH
    LDI t0, 36
    ADD t0, gp, t0
    LI t2, t0
    SUB t0, t1, t2
    ; Jump if t1 >= t2
    JPN skip_ge_57, t0
    JMP endloop_56
skip_ge_57:
    ; Variable declaration: index
    ; Arithmetic operation: ADD
    ; Arithmetic operation: MUL
    ; Arithmetic operation: SUB
    ; Variable access: __SCREEN_HEIGHT
    LDI t3, 40
    ADD t3, gp, t3
    LI t4, t3
    ; Literal value: 1
    LDI t3, 1
    SUB t2, t4, t3
    ; Variable access: __SCREEN_WIDTH
    LDI t3, 36
    ADD t3, gp, t3
    LI t4, t3
    MUL t1, t2, t4
    ; Variable access: col
    LDI t2, -16
    ADD t2, fp, t2
    LI t3, t2
    ADD t0, t1, t3
    LDI t1, -44
    ADD t1, fp, t1
    SI t1, t0
    ; Variable declaration: cell
    ; Type conversion to PointerType[elementType=StructType{name='ColorChar', complete=true}]
    ; Arithmetic operation: ADD
    ; Variable access: fb
    LDI t2, -8
    ADD t2, fp, t2
    LD t3, t2
    ; Arithmetic operation: MUL
    ; Variable access: index
    LDI t4, -44
    ADD t4, fp, t4
    LI t5, t4
    ; Literal value: 4
    LDI t4, 4
    MUL t2, t5, t4
    ADD t1, t3, t2
    ; Converting LONG to POINTER (no-op)
    MOV t0, t1
    LDI t1, -52
    ADD t1, fp, t1
    ST t1, t0
    ; Struct field assignment: ch
    ; Variable access: cell
    LDI t0, -52
    ADD t0, fp, t0
    LD t1, t0
    LDI t0, 0
    ADD t0, t1, t0
    ; Literal value: 32
    LDI t2, 32
    SB t0, t2
    ; Struct field assignment: fg
    ; Variable access: cell
    LDI t0, -52
    ADD t0, fp, t0
    LD t1, t0
    LDI t0, 1
    ADD t0, t1, t0
    ; Literal value: 15
    LDI t2, 15
    SB t0, t2
    ; Struct field assignment: bg
    ; Variable access: cell
    LDI t0, -52
    ADD t0, fp, t0
    LD t1, t0
    LDI t0, 2
    ADD t0, t1, t0
    ; Literal value: 0
    LDI t2, 0
    SB t0, t2
    ; Struct field assignment: reserved
    ; Variable access: cell
    LDI t0, -52
    ADD t0, fp, t0
    LD t1, t0
    LDI t0, 3
    ADD t0, t1, t0
    ; Literal value: 0
    LDI t2, 0
    SB t0, t2
    ; Variable assignment: col
    ; Arithmetic operation: ADD
    ; Variable access: col
    LDI t1, -16
    ADD t1, fp, t1
    LI t2, t1
    ; Literal value: 1
    LDI t1, 1
    ADD t0, t2, t1
    LDI t1, -16
    ADD t1, fp, t1
    SI t1, t0
    JMP loop_55
endloop_56:
    ; Function epilogue
__console_scroll_end_48:
    LDI t0, 56
    ADD sp, sp, t0
    ; Deallocated 56 bytes for frame
    POP fp
    POP ra
    JMP ra                               ; Return from function

    ; ==============================
    ; Function: console_init
    ; ==============================
console_init:
    ; Pre-allocating 0 local variables
    ; Function prologue
    PUSH ra
    PUSH fp
    MOV fp, sp
    ; Total frame size: 0 bytes
    ; Variable assignment: __console_cursor
    ; Literal value: 0
    LDI t0, 0
    LDI t1, 52
    ADD t1, gp, t1
    SI t1, t0
    ; Expression statement
    ; Function call: console_clear
    ; Preparing function call: console_clear
    JAL console_clear, ra
    MOV t0, a0
    ; Function epilogue
console_init_end_58:
    POP fp
    POP ra
    JMP ra                               ; Return from function

    ; =============================
    ; Function: console_clear
    ; =============================
console_clear:
    ; Pre-allocating 4 local variables
    ; Pre-allocated variable: i (INT)
    ; Pre-allocated variable: total_chars (INT)
    ; Pre-allocated variable: fb (LONG)
    ; Pre-allocated variable: cell (PointerType[elementType=StructType{name='ColorChar', complete=true}])
    ; Function prologue
    PUSH ra
    PUSH fp
    MOV fp, sp
    ; Total frame size: 24 bytes
    LDI t0, 24
    SUB sp, sp, t0
    ; Allocated 24 bytes for stack frame
    ; Variable declaration: i
    ; Literal value: 0
    LDI t0, 0
    LDI t1, -4
    ADD t1, fp, t1
    SI t1, t0
    ; Variable declaration: total_chars
    ; Arithmetic operation: MUL
    ; Variable access: __SCREEN_WIDTH
    LDI t1, 36
    ADD t1, gp, t1
    LI t2, t1
    ; Variable access: __SCREEN_HEIGHT
    LDI t1, 40
    ADD t1, gp, t1
    LI t3, t1
    MUL t0, t2, t3
    LDI t1, -8
    ADD t1, fp, t1
    SI t1, t0
    ; Variable declaration: fb
    ; Variable access: __FRAMEBUFFER_BASE
    LDI t0, 44
    ADD t0, gp, t0
    LD t1, t0
    LDI t0, -16
    ADD t0, fp, t0
    ST t0, t1
    ; While loop
loop_60:
    ; Comparison: Variable(name=i, type=INT) LT Variable(name=total_chars, type=INT)
    ; Variable access: i
    LDI t0, -4
    ADD t0, fp, t0
    LI t1, t0
    ; Variable access: total_chars
    LDI t0, -8
    ADD t0, fp, t0
    LI t2, t0
    SUB t0, t1, t2
    ; Jump if t1 >= t2
    JPN skip_ge_62, t0
    JMP endloop_61
skip_ge_62:
    ; Variable declaration: cell
    ; Type conversion to PointerType[elementType=StructType{name='ColorChar', complete=true}]
    ; Arithmetic operation: ADD
    ; Variable access: fb
    LDI t2, -16
    ADD t2, fp, t2
    LD t3, t2
    ; Arithmetic operation: MUL
    ; Variable access: i
    LDI t4, -4
    ADD t4, fp, t4
    LI t5, t4
    ; Literal value: 4
    LDI t4, 4
    MUL t2, t5, t4
    ADD t1, t3, t2
    ; Converting LONG to POINTER (no-op)
    MOV t0, t1
    LDI t1, -24
    ADD t1, fp, t1
    ST t1, t0
    ; Struct field assignment: ch
    ; Variable access: cell
    LDI t0, -24
    ADD t0, fp, t0
    LD t1, t0
    LDI t0, 0
    ADD t0, t1, t0
    ; Literal value: 32
    LDI t2, 32
    SB t0, t2
    ; Struct field assignment: fg
    ; Variable access: cell
    LDI t0, -24
    ADD t0, fp, t0
    LD t1, t0
    LDI t0, 1
    ADD t0, t1, t0
    ; Literal value: 15
    LDI t2, 15
    SB t0, t2
    ; Struct field assignment: bg
    ; Variable access: cell
    LDI t0, -24
    ADD t0, fp, t0
    LD t1, t0
    LDI t0, 2
    ADD t0, t1, t0
    ; Literal value: 0
    LDI t2, 0
    SB t0, t2
    ; Struct field assignment: reserved
    ; Variable access: cell
    LDI t0, -24
    ADD t0, fp, t0
    LD t1, t0
    LDI t0, 3
    ADD t0, t1, t0
    ; Literal value: 0
    LDI t2, 0
    SB t0, t2
    ; Variable assignment: i
    ; Arithmetic operation: ADD
    ; Variable access: i
    LDI t1, -4
    ADD t1, fp, t1
    LI t2, t1
    ; Literal value: 1
    LDI t1, 1
    ADD t0, t2, t1
    LDI t1, -4
    ADD t1, fp, t1
    SI t1, t0
    JMP loop_60
endloop_61:
    ; Variable assignment: __console_cursor
    ; Literal value: 0
    LDI t0, 0
    LDI t1, 52
    ADD t1, gp, t1
    SI t1, t0
    ; Function epilogue
console_clear_end_59:
    LDI t0, 24
    ADD sp, sp, t0
    ; Deallocated 24 bytes for frame
    POP fp
    POP ra
    JMP ra                               ; Return from function

    ; =========================
    ; Function: console_backspace
    ; =========================
console_backspace:
    ; Pre-allocating 2 local variables
    ; Pre-allocated variable: fb (LONG)
    ; Pre-allocated variable: cell (PointerType[elementType=StructType{name='ColorChar', complete=true}])
    ; Function prologue
    PUSH ra
    PUSH fp
    MOV fp, sp
    ; Total frame size: 16 bytes
    LDI t0, 16
    SUB sp, sp, t0
    ; Allocated 16 bytes for stack frame
    ; If statement
    ; Comparison: Variable(name=__console_cursor, type=INT) GT Literal(value=0, type=LONG)
    ; Variable access: __console_cursor
    LDI t0, 52
    ADD t0, gp, t0
    LI t1, t0
    ; Literal value: 0
    LDI t0, 0
    SUB t2, t1, t0
    ; Jump if t1 <= t0
    JPP skip_le_66, t2
    JMP else_64
skip_le_66:
    ; Variable assignment: __console_cursor
    ; Arithmetic operation: SUB
    ; Variable access: __console_cursor
    LDI t1, 52
    ADD t1, gp, t1
    LI t2, t1
    ; Literal value: 1
    LDI t1, 1
    SUB t0, t2, t1
    LDI t1, 52
    ADD t1, gp, t1
    SI t1, t0
    ; Variable declaration: fb
    ; Arithmetic operation: ADD
    ; Variable access: __FRAMEBUFFER_BASE
    LDI t1, 44
    ADD t1, gp, t1
    LD t2, t1
    ; Arithmetic operation: MUL
    ; Variable access: __console_cursor
    LDI t3, 52
    ADD t3, gp, t3
    LI t4, t3
    ; Literal value: 4
    LDI t3, 4
    MUL t1, t4, t3
    ADD t0, t2, t1
    LDI t1, -8
    ADD t1, fp, t1
    ST t1, t0
    ; Variable declaration: cell
    ; Type conversion to PointerType[elementType=StructType{name='ColorChar', complete=true}]
    ; Variable access: fb
    LDI t1, -8
    ADD t1, fp, t1
    LD t2, t1
    ; Converting LONG to POINTER (no-op)
    MOV t0, t2
    LDI t1, -16
    ADD t1, fp, t1
    ST t1, t0
    ; Struct field assignment: ch
    ; Variable access: cell
    LDI t0, -16
    ADD t0, fp, t0
    LD t1, t0
    LDI t0, 0
    ADD t0, t1, t0
    ; Literal value: 32
    LDI t2, 32
    SB t0, t2
else_64:
    ; Function epilogue
console_backspace_end_63:
    LDI t0, 16
    ADD sp, sp, t0
    ; Deallocated 16 bytes for frame
    POP fp
    POP ra
    JMP ra                               ; Return from function

    ; ==============================
    ; Function: console_putc
    ; ==============================
console_putc:
    ; Pre-allocating 3 local variables
    ; Pre-allocated variable: fb (LONG)
    ; Pre-allocated variable: row (INT)
    ; Pre-allocated variable: cell (PointerType[elementType=StructType{name='ColorChar', complete=true}])
    ; Function prologue
    PUSH ra
    PUSH fp
    MOV fp, sp
    ; Total frame size: 24 bytes
    LDI t0, 24
    SUB sp, sp, t0
    ; Allocated 24 bytes for stack frame
    ; Variable declaration: fb
    ; Variable access: __FRAMEBUFFER_BASE
    LDI t0, 44
    ADD t0, gp, t0
    LD t1, t0
    LDI t0, -8
    ADD t0, fp, t0
    ST t0, t1
    ; If statement
    ; Comparison: Variable(name=char, type=BYTE) EQ Literal(value=10, type=LONG)
    ; Variable access: char
    LDI t0, 16
    ADD t0, fp, t0
    LB t1, t0
    ; Literal value: 10
    LDI t0, 10
    SUB t2, t1, t0
    ; Jump if t1 != t0
    JNZ else_68, t2
    ; Variable declaration: row
    ; Arithmetic operation: DIV
    ; Variable access: __console_cursor
    LDI t1, 52
    ADD t1, gp, t1
    LI t2, t1
    ; Variable access: __SCREEN_WIDTH
    LDI t1, 36
    ADD t1, gp, t1
    LI t3, t1
    DIV t0, t2, t3
    LDI t1, -12
    ADD t1, fp, t1
    SI t1, t0
    ; If statement
    ; Comparison: Variable(name=row, type=INT) GE BinaryOp(op=SUB, left=Variable(name=__SCREEN_HEIGHT, type=INT), right=Literal(value=1, type=LONG))
    ; Variable access: row
    LDI t0, -12
    ADD t0, fp, t0
    LI t1, t0
    ; Arithmetic operation: SUB
    ; Variable access: __SCREEN_HEIGHT
    LDI t2, 40
    ADD t2, gp, t2
    LI t3, t2
    ; Literal value: 1
    LDI t2, 1
    SUB t0, t3, t2
    SUB t2, t1, t0
    ; Jump if t1 < t0
    JPN else_70, t2
    ; Expression statement
    ; Function call: __console_scroll
    ; Preparing function call: __console_scroll
    JAL __console_scroll, ra
    MOV t0, a0
    ; Variable assignment: __console_cursor
    ; Arithmetic operation: MUL
    ; Arithmetic operation: SUB
    ; Variable access: __SCREEN_HEIGHT
    LDI t2, 40
    ADD t2, gp, t2
    LI t3, t2
    ; Literal value: 1
    LDI t2, 1
    SUB t1, t3, t2
    ; Variable access: __SCREEN_WIDTH
    LDI t2, 36
    ADD t2, gp, t2
    LI t3, t2
    MUL t0, t1, t3
    LDI t1, 52
    ADD t1, gp, t1
    SI t1, t0
    JMP endif_71
else_70:
    ; Variable assignment: __console_cursor
    ; Arithmetic operation: MUL
    ; Arithmetic operation: ADD
    ; Variable access: row
    LDI t2, -12
    ADD t2, fp, t2
    LI t3, t2
    ; Literal value: 1
    LDI t2, 1
    ADD t1, t3, t2
    ; Variable access: __SCREEN_WIDTH
    LDI t2, 36
    ADD t2, gp, t2
    LI t3, t2
    MUL t0, t1, t3
    LDI t1, 52
    ADD t1, gp, t1
    SI t1, t0
endif_71:
    ; Return statement
    JMP console_putc_end_67
else_68:
    ; If statement
    ; Comparison: Variable(name=__console_cursor, type=INT) GE BinaryOp(op=MUL, left=Variable(name=__SCREEN_WIDTH, type=INT), right=Variable(name=__SCREEN_HEIGHT, type=INT))
    ; Variable access: __console_cursor
    LDI t0, 52
    ADD t0, gp, t0
    LI t1, t0
    ; Arithmetic operation: MUL
    ; Variable access: __SCREEN_WIDTH
    LDI t2, 36
    ADD t2, gp, t2
    LI t3, t2
    ; Variable access: __SCREEN_HEIGHT
    LDI t2, 40
    ADD t2, gp, t2
    LI t4, t2
    MUL t0, t3, t4
    SUB t2, t1, t0
    ; Jump if t1 < t0
    JPN else_72, t2
    ; Expression statement
    ; Function call: __console_scroll
    ; Preparing function call: __console_scroll
    JAL __console_scroll, ra
    MOV t0, a0
    ; Variable assignment: __console_cursor
    ; Arithmetic operation: MUL
    ; Arithmetic operation: SUB
    ; Variable access: __SCREEN_HEIGHT
    LDI t2, 40
    ADD t2, gp, t2
    LI t3, t2
    ; Literal value: 1
    LDI t2, 1
    SUB t1, t3, t2
    ; Variable access: __SCREEN_WIDTH
    LDI t2, 36
    ADD t2, gp, t2
    LI t3, t2
    MUL t0, t1, t3
    LDI t1, 52
    ADD t1, gp, t1
    SI t1, t0
else_72:
    ; Variable declaration: cell
    ; Type conversion to PointerType[elementType=StructType{name='ColorChar', complete=true}]
    ; Arithmetic operation: ADD
    ; Variable access: fb
    LDI t2, -8
    ADD t2, fp, t2
    LD t3, t2
    ; Arithmetic operation: MUL
    ; Variable access: __console_cursor
    LDI t4, 52
    ADD t4, gp, t4
    LI t5, t4
    ; Literal value: 4
    LDI t4, 4
    MUL t2, t5, t4
    ADD t1, t3, t2
    ; Converting LONG to POINTER (no-op)
    MOV t0, t1
    LDI t1, -20
    ADD t1, fp, t1
    ST t1, t0
    ; Struct field assignment: ch
    ; Variable access: cell
    LDI t0, -20
    ADD t0, fp, t0
    LD t1, t0
    LDI t0, 0
    ADD t0, t1, t0
    ; Variable access: char
    LDI t2, 16
    ADD t2, fp, t2
    LB t3, t2
    SB t0, t3
    ; Struct field assignment: fg
    ; Variable access: cell
    LDI t0, -20
    ADD t0, fp, t0
    LD t1, t0
    LDI t0, 1
    ADD t0, t1, t0
    ; Literal value: 15
    LDI t2, 15
    SB t0, t2
    ; Struct field assignment: bg
    ; Variable access: cell
    LDI t0, -20
    ADD t0, fp, t0
    LD t1, t0
    LDI t0, 2
    ADD t0, t1, t0
    ; Literal value: 0
    LDI t2, 0
    SB t0, t2
    ; Struct field assignment: reserved
    ; Variable access: cell
    LDI t0, -20
    ADD t0, fp, t0
    LD t1, t0
    LDI t0, 3
    ADD t0, t1, t0
    ; Literal value: 0
    LDI t2, 0
    SB t0, t2
    ; Variable assignment: __console_cursor
    ; Arithmetic operation: ADD
    ; Variable access: __console_cursor
    LDI t1, 52
    ADD t1, gp, t1
    LI t2, t1
    ; Literal value: 1
    LDI t1, 1
    ADD t0, t2, t1
    LDI t1, 52
    ADD t1, gp, t1
    SI t1, t0
    ; Function epilogue
console_putc_end_67:
    LDI t0, 24
    ADD sp, sp, t0
    ; Deallocated 24 bytes for frame
    POP fp
    POP ra
    JMP ra                               ; Return from function

    ; ==============================
    ; Function: console_puts
    ; ==============================
console_puts:
    ; Pre-allocating 1 local variables
    ; Pre-allocated variable: i (INT)
    ; Function prologue
    PUSH ra
    PUSH fp
    MOV fp, sp
    ; Total frame size: 8 bytes
    LDI t0, 8
    SUB sp, sp, t0
    ; Allocated 8 bytes for stack frame
    ; Variable declaration: i
    ; Literal value: 0
    LDI t0, 0
    LDI t1, -4
    ADD t1, fp, t1
    SI t1, t0
    ; While loop
loop_75:
    ; Comparison: Variable(name=i, type=INT) LT Variable(name=len, type=INT)
    ; Variable access: i
    LDI t0, -4
    ADD t0, fp, t0
    LI t1, t0
    ; Variable access: len
    LDI t0, 24
    ADD t0, fp, t0
    LI t2, t0
    SUB t0, t1, t2
    ; Jump if t1 >= t2
    JPN skip_ge_77, t0
    JMP endloop_76
skip_ge_77:
    ; Expression statement
    ; Function call: console_putc
    ; Preparing function call: console_putc
    ; Evaluating argument 0
    ; Dereference operation
    ; Arithmetic operation: ADD
    ; Variable access: str
    LDI t2, 16
    ADD t2, fp, t2
    LD t3, t2
    ; Variable access: i
    LDI t2, -4
    ADD t2, fp, t2
    LI t4, t2
    ADD t1, t3, t4
    LB t0, t1
    PUSH t0
    JAL console_putc, ra
    LDI t0, 8
    ADD sp, sp, t0
    ; Cleaned up 1 arguments from stack
    MOV t0, a0
    ; Variable assignment: i
    ; Arithmetic operation: ADD
    ; Variable access: i
    LDI t1, -4
    ADD t1, fp, t1
    LI t2, t1
    ; Literal value: 1
    LDI t1, 1
    ADD t0, t2, t1
    LDI t1, -4
    ADD t1, fp, t1
    SI t1, t0
    JMP loop_75
endloop_76:
    ; Function epilogue
console_puts_end_74:
    LDI t0, 8
    ADD sp, sp, t0
    ; Deallocated 8 bytes for frame
    POP fp
    POP ra
    JMP ra                               ; Return from function

    ; =====================================
    ; Function: print
    ; =====================================
print:
    ; Pre-allocating 0 local variables
    ; Function prologue
    PUSH ra
    PUSH fp
    MOV fp, sp
    ; Total frame size: 0 bytes
    ; Expression statement
    ; Function call: console_puts
    ; Preparing function call: console_puts
    ; Evaluating argument 0
    ; Variable access: str
    LDI t0, 16
    ADD t0, fp, t0
    LD t1, t0
    ; Evaluating argument 1
    ; Variable access: len
    LDI t0, 24
    ADD t0, fp, t0
    LI t2, t0
    PUSH t2
    PUSH t1
    JAL console_puts, ra
    LDI t0, 16
    ADD sp, sp, t0
    ; Cleaned up 2 arguments from stack
    MOV t0, a0
    ; Function epilogue
print_end_78:
    POP fp
    POP ra
    JMP ra                               ; Return from function

    ; ===================================
    ; Function: println
    ; ===================================
println:
    ; Pre-allocating 0 local variables
    ; Function prologue
    PUSH ra
    PUSH fp
    MOV fp, sp
    ; Total frame size: 0 bytes
    ; Expression statement
    ; Function call: print
    ; Preparing function call: print
    ; Evaluating argument 0
    ; Variable access: str
    LDI t0, 16
    ADD t0, fp, t0
    LD t1, t0
    ; Evaluating argument 1
    ; Variable access: len
    LDI t0, 24
    ADD t0, fp, t0
    LI t2, t0
    PUSH t2
    PUSH t1
    JAL print, ra
    LDI t0, 16
    ADD sp, sp, t0
    ; Cleaned up 2 arguments from stack
    MOV t0, a0
    ; Expression statement
    ; Function call: console_putc
    ; Preparing function call: console_putc
    ; Evaluating argument 0
    ; Literal value: 10
    LDI t0, 10
    PUSH t0
    JAL console_putc, ra
    LDI t0, 8
    ADD sp, sp, t0
    ; Cleaned up 1 arguments from stack
    MOV t0, a0
    ; Function epilogue
println_end_79:
    POP fp
    POP ra
    JMP ra                               ; Return from function

    ; =================================
    ; Function: print_raw
    ; =================================
print_raw:
    ; Pre-allocating 0 local variables
    ; Function prologue
    PUSH ra
    PUSH fp
    MOV fp, sp
    ; Total frame size: 0 bytes
    ; Expression statement
    ; Function call: console_puts
    ; Preparing function call: console_puts
    ; Evaluating argument 0
    ; Variable access: ptr
    LDI t0, 16
    ADD t0, fp, t0
    LD t1, t0
    ; Evaluating argument 1
    ; Variable access: len
    LDI t0, 24
    ADD t0, fp, t0
    LI t2, t0
    PUSH t2
    PUSH t1
    JAL console_puts, ra
    LDI t0, 16
    ADD sp, sp, t0
    ; Cleaned up 2 arguments from stack
    MOV t0, a0
    ; Function epilogue
print_raw_end_80:
    POP fp
    POP ra
    JMP ra                               ; Return from function

    ; ====================================
    ; Function: strcmp
    ; ====================================
strcmp:
    ; Pre-allocating 2 local variables
    ; Pre-allocated variable: i (INT)
    ; Pre-allocated variable: equal (INT)
    ; Function prologue
    PUSH ra
    PUSH fp
    MOV fp, sp
    ; Total frame size: 8 bytes
    LDI t0, 8
    SUB sp, sp, t0
    ; Allocated 8 bytes for stack frame
    ; If statement
    ; Comparison: Variable(name=len1, type=INT) NE Variable(name=len2, type=INT)
    ; Variable access: len1
    LDI t0, 24
    ADD t0, fp, t0
    LI t1, t0
    ; Variable access: len2
    LDI t0, 40
    ADD t0, fp, t0
    LI t2, t0
    SUB t0, t1, t2
    ; Jump if t1 == t2
    JZ else_82, t0
    ; Return statement
    ; Literal value: 0
    LDI t0, 0
    MOV a0, t0
    JMP strcmp_end_81
else_82:
    ; Variable declaration: i
    ; Literal value: 0
    LDI t0, 0
    LDI t1, -4
    ADD t1, fp, t1
    SI t1, t0
    ; Variable declaration: equal
    ; Literal value: 1
    LDI t0, 1
    LDI t1, -8
    ADD t1, fp, t1
    SI t1, t0
    ; While loop
loop_84:
    ; Logical AND: BinaryOp(op=LT, left=Variable(name=i, type=INT), right=Variable(name=len1, type=INT)) && BinaryOp(op=EQ, left=Variable(name=equal, type=INT), right=Literal(value=1, type=LONG))
    ; Comparison: Variable(name=i, type=INT) LT Variable(name=len1, type=INT)
    ; Variable access: i
    LDI t0, -4
    ADD t0, fp, t0
    LI t1, t0
    ; Variable access: len1
    LDI t0, 24
    ADD t0, fp, t0
    LI t2, t0
    SUB t0, t1, t2
    ; Jump if t1 >= t2
    JPN skip_ge_86, t0
    JMP endloop_85
skip_ge_86:
    ; Comparison: Variable(name=equal, type=INT) EQ Literal(value=1, type=LONG)
    ; Variable access: equal
    LDI t0, -8
    ADD t0, fp, t0
    LI t1, t0
    ; Literal value: 1
    LDI t0, 1
    SUB t2, t1, t0
    ; Jump if t1 != t0
    JNZ endloop_85, t2
    ; If statement
    ; Comparison: Dereference(address=BinaryOp(op=ADD, left=Variable(name=str1, type=LONG), right=Variable(name=i, type=INT)), type=BYTE) NE Dereference(address=BinaryOp(op=ADD, left=Variable(name=str2, type=LONG), right=Variable(name=i, type=INT)), type=BYTE)
    ; Dereference operation
    ; Arithmetic operation: ADD
    ; Variable access: str1
    LDI t2, 16
    ADD t2, fp, t2
    LD t3, t2
    ; Variable access: i
    LDI t2, -4
    ADD t2, fp, t2
    LI t4, t2
    ADD t1, t3, t4
    LB t0, t1
    ; Dereference operation
    ; Arithmetic operation: ADD
    ; Variable access: str2
    LDI t3, 32
    ADD t3, fp, t3
    LD t4, t3
    ; Variable access: i
    LDI t3, -4
    ADD t3, fp, t3
    LI t5, t3
    ADD t2, t4, t5
    LB t1, t2
    SUB t2, t0, t1
    ; Jump if t0 == t1
    JZ else_87, t2
    ; Variable assignment: equal
    ; Literal value: 0
    LDI t0, 0
    LDI t1, -8
    ADD t1, fp, t1
    SI t1, t0
else_87:
    ; Variable assignment: i
    ; Arithmetic operation: ADD
    ; Variable access: i
    LDI t1, -4
    ADD t1, fp, t1
    LI t2, t1
    ; Literal value: 1
    LDI t1, 1
    ADD t0, t2, t1
    LDI t1, -4
    ADD t1, fp, t1
    SI t1, t0
    JMP loop_84
endloop_85:
    ; Return statement
    ; Variable access: equal
    LDI t0, -8
    ADD t0, fp, t0
    LI t1, t0
    MOV a0, t1
    JMP strcmp_end_81
    ; Function epilogue
strcmp_end_81:
    LDI t0, 8
    ADD sp, sp, t0
    ; Deallocated 8 bytes for frame
    POP fp
    POP ra
    JMP ra                               ; Return from function

    ; ============================
    ; Function: __init_strings
    ; ============================
__init_strings:
    ; Pre-allocating 0 local variables
    ; Function prologue
    PUSH ra
    PUSH fp
    MOV fp, sp
    ; Total frame size: 0 bytes
    ; Variable assignment: __helpStrLen
    ; Literal value: 4
    LDI t0, 4
    LDI t1, 96
    ADD t1, gp, t1
    SI t1, t0
    ; Variable assignment: __helpStr
    ; Function call: malloc
    ; Preparing function call: malloc
    ; Evaluating argument 0
    ; Variable access: __helpStrLen
    LDI t0, 96
    ADD t0, gp, t0
    LI t1, t0
    PUSH t1
    JAL malloc, ra
    LDI t0, 8
    ADD sp, sp, t0
    ; Cleaned up 1 arguments from stack
    MOV t0, a0
    LDI t1, 88
    ADD t1, gp, t1
    ST t1, t0
    ; Variable access: __helpStr
    LDI t0, 88
    ADD t0, gp, t0
    LD t1, t0
    ; Dereference assignment to address: t1
    ; Storing array literal to memory at t1
    LDI t0, 0
    ADD t2, t1, t0
    ; Literal value: 104
    LDI t3, 104
    SB t2, t3
    LDI t0, 1
    ADD t2, t1, t0
    ; Literal value: 101
    LDI t3, 101
    SB t2, t3
    LDI t0, 2
    ADD t2, t1, t0
    ; Literal value: 108
    LDI t3, 108
    SB t2, t3
    LDI t0, 3
    ADD t2, t1, t0
    ; Literal value: 112
    LDI t3, 112
    SB t2, t3
    LDI t0, 4
    ADD t2, t1, t0
    ; Literal value: 0
    LDI t3, 0
    SB t2, t3
    ; Variable assignment: __infoStrLen
    ; Literal value: 4
    LDI t0, 4
    LDI t1, 108
    ADD t1, gp, t1
    SI t1, t0
    ; Variable assignment: __infoStr
    ; Function call: malloc
    ; Preparing function call: malloc
    ; Evaluating argument 0
    ; Variable access: __infoStrLen
    LDI t0, 108
    ADD t0, gp, t0
    LI t1, t0
    PUSH t1
    JAL malloc, ra
    LDI t0, 8
    ADD sp, sp, t0
    ; Cleaned up 1 arguments from stack
    MOV t0, a0
    LDI t1, 100
    ADD t1, gp, t1
    ST t1, t0
    ; Variable access: __infoStr
    LDI t0, 100
    ADD t0, gp, t0
    LD t1, t0
    ; Dereference assignment to address: t1
    ; Storing array literal to memory at t1
    LDI t0, 0
    ADD t2, t1, t0
    ; Literal value: 105
    LDI t3, 105
    SB t2, t3
    LDI t0, 1
    ADD t2, t1, t0
    ; Literal value: 110
    LDI t3, 110
    SB t2, t3
    LDI t0, 2
    ADD t2, t1, t0
    ; Literal value: 102
    LDI t3, 102
    SB t2, t3
    LDI t0, 3
    ADD t2, t1, t0
    ; Literal value: 111
    LDI t3, 111
    SB t2, t3
    LDI t0, 4
    ADD t2, t1, t0
    ; Literal value: 0
    LDI t3, 0
    SB t2, t3
    ; Variable assignment: __clearStrLen
    ; Literal value: 5
    LDI t0, 5
    LDI t1, 120
    ADD t1, gp, t1
    SI t1, t0
    ; Variable assignment: __clearStr
    ; Function call: malloc
    ; Preparing function call: malloc
    ; Evaluating argument 0
    ; Variable access: __clearStrLen
    LDI t0, 120
    ADD t0, gp, t0
    LI t1, t0
    PUSH t1
    JAL malloc, ra
    LDI t0, 8
    ADD sp, sp, t0
    ; Cleaned up 1 arguments from stack
    MOV t0, a0
    LDI t1, 112
    ADD t1, gp, t1
    ST t1, t0
    ; Variable access: __clearStr
    LDI t0, 112
    ADD t0, gp, t0
    LD t1, t0
    ; Dereference assignment to address: t1
    ; Storing array literal to memory at t1
    LDI t0, 0
    ADD t2, t1, t0
    ; Literal value: 99
    LDI t3, 99
    SB t2, t3
    LDI t0, 1
    ADD t2, t1, t0
    ; Literal value: 108
    LDI t3, 108
    SB t2, t3
    LDI t0, 2
    ADD t2, t1, t0
    ; Literal value: 101
    LDI t3, 101
    SB t2, t3
    LDI t0, 3
    ADD t2, t1, t0
    ; Literal value: 97
    LDI t3, 97
    SB t2, t3
    LDI t0, 4
    ADD t2, t1, t0
    ; Literal value: 114
    LDI t3, 114
    SB t2, t3
    LDI t0, 5
    ADD t2, t1, t0
    ; Literal value: 0
    LDI t3, 0
    SB t2, t3
    ; Variable assignment: __echoStrLen
    ; Literal value: 4
    LDI t0, 4
    LDI t1, 132
    ADD t1, gp, t1
    SI t1, t0
    ; Variable assignment: __echoStr
    ; Function call: malloc
    ; Preparing function call: malloc
    ; Evaluating argument 0
    ; Variable access: __echoStrLen
    LDI t0, 132
    ADD t0, gp, t0
    LI t1, t0
    PUSH t1
    JAL malloc, ra
    LDI t0, 8
    ADD sp, sp, t0
    ; Cleaned up 1 arguments from stack
    MOV t0, a0
    LDI t1, 124
    ADD t1, gp, t1
    ST t1, t0
    ; Variable access: __echoStr
    LDI t0, 124
    ADD t0, gp, t0
    LD t1, t0
    ; Dereference assignment to address: t1
    ; Storing array literal to memory at t1
    LDI t0, 0
    ADD t2, t1, t0
    ; Literal value: 101
    LDI t3, 101
    SB t2, t3
    LDI t0, 1
    ADD t2, t1, t0
    ; Literal value: 99
    LDI t3, 99
    SB t2, t3
    LDI t0, 2
    ADD t2, t1, t0
    ; Literal value: 104
    LDI t3, 104
    SB t2, t3
    LDI t0, 3
    ADD t2, t1, t0
    ; Literal value: 111
    LDI t3, 111
    SB t2, t3
    LDI t0, 4
    ADD t2, t1, t0
    ; Literal value: 0
    LDI t3, 0
    SB t2, t3
    ; Variable assignment: __versionStrLen
    ; Literal value: 7
    LDI t0, 7
    LDI t1, 144
    ADD t1, gp, t1
    SI t1, t0
    ; Variable assignment: __versionStr
    ; Function call: malloc
    ; Preparing function call: malloc
    ; Evaluating argument 0
    ; Variable access: __versionStrLen
    LDI t0, 144
    ADD t0, gp, t0
    LI t1, t0
    PUSH t1
    JAL malloc, ra
    LDI t0, 8
    ADD sp, sp, t0
    ; Cleaned up 1 arguments from stack
    MOV t0, a0
    LDI t1, 136
    ADD t1, gp, t1
    ST t1, t0
    ; Variable access: __versionStr
    LDI t0, 136
    ADD t0, gp, t0
    LD t1, t0
    ; Dereference assignment to address: t1
    ; Storing array literal to memory at t1
    LDI t0, 0
    ADD t2, t1, t0
    ; Literal value: 118
    LDI t3, 118
    SB t2, t3
    LDI t0, 1
    ADD t2, t1, t0
    ; Literal value: 101
    LDI t3, 101
    SB t2, t3
    LDI t0, 2
    ADD t2, t1, t0
    ; Literal value: 114
    LDI t3, 114
    SB t2, t3
    LDI t0, 3
    ADD t2, t1, t0
    ; Literal value: 115
    LDI t3, 115
    SB t2, t3
    LDI t0, 4
    ADD t2, t1, t0
    ; Literal value: 105
    LDI t3, 105
    SB t2, t3
    LDI t0, 5
    ADD t2, t1, t0
    ; Literal value: 111
    LDI t3, 111
    SB t2, t3
    LDI t0, 6
    ADD t2, t1, t0
    ; Literal value: 110
    LDI t3, 110
    SB t2, t3
    LDI t0, 7
    ADD t2, t1, t0
    ; Literal value: 0
    LDI t3, 0
    SB t2, t3
    ; Variable assignment: __dateStrLen
    ; Literal value: 4
    LDI t0, 4
    LDI t1, 156
    ADD t1, gp, t1
    SI t1, t0
    ; Variable assignment: __dateStr
    ; Function call: malloc
    ; Preparing function call: malloc
    ; Evaluating argument 0
    ; Variable access: __dateStrLen
    LDI t0, 156
    ADD t0, gp, t0
    LI t1, t0
    PUSH t1
    JAL malloc, ra
    LDI t0, 8
    ADD sp, sp, t0
    ; Cleaned up 1 arguments from stack
    MOV t0, a0
    LDI t1, 148
    ADD t1, gp, t1
    ST t1, t0
    ; Variable access: __dateStr
    LDI t0, 148
    ADD t0, gp, t0
    LD t1, t0
    ; Dereference assignment to address: t1
    ; Storing array literal to memory at t1
    LDI t0, 0
    ADD t2, t1, t0
    ; Literal value: 100
    LDI t3, 100
    SB t2, t3
    LDI t0, 1
    ADD t2, t1, t0
    ; Literal value: 97
    LDI t3, 97
    SB t2, t3
    LDI t0, 2
    ADD t2, t1, t0
    ; Literal value: 116
    LDI t3, 116
    SB t2, t3
    LDI t0, 3
    ADD t2, t1, t0
    ; Literal value: 101
    LDI t3, 101
    SB t2, t3
    LDI t0, 4
    ADD t2, t1, t0
    ; Literal value: 0
    LDI t3, 0
    SB t2, t3
    ; Variable assignment: __resetStrLen
    ; Literal value: 5
    LDI t0, 5
    LDI t1, 168
    ADD t1, gp, t1
    SI t1, t0
    ; Variable assignment: __resetStr
    ; Function call: malloc
    ; Preparing function call: malloc
    ; Evaluating argument 0
    ; Variable access: __resetStrLen
    LDI t0, 168
    ADD t0, gp, t0
    LI t1, t0
    PUSH t1
    JAL malloc, ra
    LDI t0, 8
    ADD sp, sp, t0
    ; Cleaned up 1 arguments from stack
    MOV t0, a0
    LDI t1, 160
    ADD t1, gp, t1
    ST t1, t0
    ; Variable access: __resetStr
    LDI t0, 160
    ADD t0, gp, t0
    LD t1, t0
    ; Dereference assignment to address: t1
    ; Storing array literal to memory at t1
    LDI t0, 0
    ADD t2, t1, t0
    ; Literal value: 114
    LDI t3, 114
    SB t2, t3
    LDI t0, 1
    ADD t2, t1, t0
    ; Literal value: 101
    LDI t3, 101
    SB t2, t3
    LDI t0, 2
    ADD t2, t1, t0
    ; Literal value: 115
    LDI t3, 115
    SB t2, t3
    LDI t0, 3
    ADD t2, t1, t0
    ; Literal value: 101
    LDI t3, 101
    SB t2, t3
    LDI t0, 4
    ADD t2, t1, t0
    ; Literal value: 116
    LDI t3, 116
    SB t2, t3
    LDI t0, 5
    ADD t2, t1, t0
    ; Literal value: 0
    LDI t3, 0
    SB t2, t3
    ; Variable assignment: __promptStrLen
    ; Literal value: 2
    LDI t0, 2
    LDI t1, 180
    ADD t1, gp, t1
    SI t1, t0
    ; Variable assignment: __promptStr
    ; Function call: malloc
    ; Preparing function call: malloc
    ; Evaluating argument 0
    ; Variable access: __promptStrLen
    LDI t0, 180
    ADD t0, gp, t0
    LI t1, t0
    PUSH t1
    JAL malloc, ra
    LDI t0, 8
    ADD sp, sp, t0
    ; Cleaned up 1 arguments from stack
    MOV t0, a0
    LDI t1, 172
    ADD t1, gp, t1
    ST t1, t0
    ; Variable access: __promptStr
    LDI t0, 172
    ADD t0, gp, t0
    LD t1, t0
    ; Dereference assignment to address: t1
    ; Storing array literal to memory at t1
    LDI t0, 0
    ADD t2, t1, t0
    ; Literal value: 62
    LDI t3, 62
    SB t2, t3
    LDI t0, 1
    ADD t2, t1, t0
    ; Literal value: 32
    LDI t3, 32
    SB t2, t3
    LDI t0, 2
    ADD t2, t1, t0
    ; Literal value: 0
    LDI t3, 0
    SB t2, t3
    ; Variable assignment: __welcomeStrLen
    ; Literal value: 21
    LDI t0, 21
    LDI t1, 192
    ADD t1, gp, t1
    SI t1, t0
    ; Variable assignment: __welcomeStr
    ; Function call: malloc
    ; Preparing function call: malloc
    ; Evaluating argument 0
    ; Variable access: __welcomeStrLen
    LDI t0, 192
    ADD t0, gp, t0
    LI t1, t0
    PUSH t1
    JAL malloc, ra
    LDI t0, 8
    ADD sp, sp, t0
    ; Cleaned up 1 arguments from stack
    MOV t0, a0
    LDI t1, 184
    ADD t1, gp, t1
    ST t1, t0
    ; Variable access: __welcomeStr
    LDI t0, 184
    ADD t0, gp, t0
    LD t1, t0
    ; Dereference assignment to address: t1
    ; Storing array literal to memory at t1
    LDI t0, 0
    ADD t2, t1, t0
    ; Literal value: 87
    LDI t3, 87
    SB t2, t3
    LDI t0, 1
    ADD t2, t1, t0
    ; Literal value: 101
    LDI t3, 101
    SB t2, t3
    LDI t0, 2
    ADD t2, t1, t0
    ; Literal value: 108
    LDI t3, 108
    SB t2, t3
    LDI t0, 3
    ADD t2, t1, t0
    ; Literal value: 99
    LDI t3, 99
    SB t2, t3
    LDI t0, 4
    ADD t2, t1, t0
    ; Literal value: 111
    LDI t3, 111
    SB t2, t3
    LDI t0, 5
    ADD t2, t1, t0
    ; Literal value: 109
    LDI t3, 109
    SB t2, t3
    LDI t0, 6
    ADD t2, t1, t0
    ; Literal value: 101
    LDI t3, 101
    SB t2, t3
    LDI t0, 7
    ADD t2, t1, t0
    ; Literal value: 32
    LDI t3, 32
    SB t2, t3
    LDI t0, 8
    ADD t2, t1, t0
    ; Literal value: 116
    LDI t3, 116
    SB t2, t3
    LDI t0, 9
    ADD t2, t1, t0
    ; Literal value: 111
    LDI t3, 111
    SB t2, t3
    LDI t0, 10
    ADD t2, t1, t0
    ; Literal value: 32
    LDI t3, 32
    SB t2, t3
    LDI t0, 11
    ADD t2, t1, t0
    ; Literal value: 84
    LDI t3, 84
    SB t2, t3
    LDI t0, 12
    ADD t2, t1, t0
    ; Literal value: 114
    LDI t3, 114
    SB t2, t3
    LDI t0, 13
    ADD t2, t1, t0
    ; Literal value: 105
    LDI t3, 105
    SB t2, t3
    LDI t0, 14
    ADD t2, t1, t0
    ; Literal value: 116
    LDI t3, 116
    SB t2, t3
    LDI t0, 15
    ADD t2, t1, t0
    ; Literal value: 111
    LDI t3, 111
    SB t2, t3
    LDI t0, 16
    ADD t2, t1, t0
    ; Literal value: 110
    LDI t3, 110
    SB t2, t3
    LDI t0, 17
    ADD t2, t1, t0
    ; Literal value: 45
    LDI t3, 45
    SB t2, t3
    LDI t0, 18
    ADD t2, t1, t0
    ; Literal value: 79
    LDI t3, 79
    SB t2, t3
    LDI t0, 19
    ADD t2, t1, t0
    ; Literal value: 83
    LDI t3, 83
    SB t2, t3
    LDI t0, 20
    ADD t2, t1, t0
    ; Literal value: 33
    LDI t3, 33
    SB t2, t3
    LDI t0, 21
    ADD t2, t1, t0
    ; Literal value: 0
    LDI t3, 0
    SB t2, t3
    ; Variable assignment: __hintStrLen
    ; Literal value: 34
    LDI t0, 34
    LDI t1, 204
    ADD t1, gp, t1
    SI t1, t0
    ; Variable assignment: __hintStr
    ; Function call: malloc
    ; Preparing function call: malloc
    ; Evaluating argument 0
    ; Variable access: __hintStrLen
    LDI t0, 204
    ADD t0, gp, t0
    LI t1, t0
    PUSH t1
    JAL malloc, ra
    LDI t0, 8
    ADD sp, sp, t0
    ; Cleaned up 1 arguments from stack
    MOV t0, a0
    LDI t1, 196
    ADD t1, gp, t1
    ST t1, t0
    ; Variable access: __hintStr
    LDI t0, 196
    ADD t0, gp, t0
    LD t1, t0
    ; Dereference assignment to address: t1
    ; Storing array literal to memory at t1
    LDI t0, 0
    ADD t2, t1, t0
    ; Literal value: 84
    LDI t3, 84
    SB t2, t3
    LDI t0, 1
    ADD t2, t1, t0
    ; Literal value: 121
    LDI t3, 121
    SB t2, t3
    LDI t0, 2
    ADD t2, t1, t0
    ; Literal value: 112
    LDI t3, 112
    SB t2, t3
    LDI t0, 3
    ADD t2, t1, t0
    ; Literal value: 101
    LDI t3, 101
    SB t2, t3
    LDI t0, 4
    ADD t2, t1, t0
    ; Literal value: 32
    LDI t3, 32
    SB t2, t3
    LDI t0, 5
    ADD t2, t1, t0
    ; Literal value: 39
    LDI t3, 39
    SB t2, t3
    LDI t0, 6
    ADD t2, t1, t0
    ; Literal value: 104
    LDI t3, 104
    SB t2, t3
    LDI t0, 7
    ADD t2, t1, t0
    ; Literal value: 101
    LDI t3, 101
    SB t2, t3
    LDI t0, 8
    ADD t2, t1, t0
    ; Literal value: 108
    LDI t3, 108
    SB t2, t3
    LDI t0, 9
    ADD t2, t1, t0
    ; Literal value: 112
    LDI t3, 112
    SB t2, t3
    LDI t0, 10
    ADD t2, t1, t0
    ; Literal value: 39
    LDI t3, 39
    SB t2, t3
    LDI t0, 11
    ADD t2, t1, t0
    ; Literal value: 32
    LDI t3, 32
    SB t2, t3
    LDI t0, 12
    ADD t2, t1, t0
    ; Literal value: 102
    LDI t3, 102
    SB t2, t3
    LDI t0, 13
    ADD t2, t1, t0
    ; Literal value: 111
    LDI t3, 111
    SB t2, t3
    LDI t0, 14
    ADD t2, t1, t0
    ; Literal value: 114
    LDI t3, 114
    SB t2, t3
    LDI t0, 15
    ADD t2, t1, t0
    ; Literal value: 32
    LDI t3, 32
    SB t2, t3
    LDI t0, 16
    ADD t2, t1, t0
    ; Literal value: 97
    LDI t3, 97
    SB t2, t3
    LDI t0, 17
    ADD t2, t1, t0
    ; Literal value: 118
    LDI t3, 118
    SB t2, t3
    LDI t0, 18
    ADD t2, t1, t0
    ; Literal value: 97
    LDI t3, 97
    SB t2, t3
    LDI t0, 19
    ADD t2, t1, t0
    ; Literal value: 105
    LDI t3, 105
    SB t2, t3
    LDI t0, 20
    ADD t2, t1, t0
    ; Literal value: 108
    LDI t3, 108
    SB t2, t3
    LDI t0, 21
    ADD t2, t1, t0
    ; Literal value: 97
    LDI t3, 97
    SB t2, t3
    LDI t0, 22
    ADD t2, t1, t0
    ; Literal value: 98
    LDI t3, 98
    SB t2, t3
    LDI t0, 23
    ADD t2, t1, t0
    ; Literal value: 108
    LDI t3, 108
    SB t2, t3
    LDI t0, 24
    ADD t2, t1, t0
    ; Literal value: 101
    LDI t3, 101
    SB t2, t3
    LDI t0, 25
    ADD t2, t1, t0
    ; Literal value: 32
    LDI t3, 32
    SB t2, t3
    LDI t0, 26
    ADD t2, t1, t0
    ; Literal value: 99
    LDI t3, 99
    SB t2, t3
    LDI t0, 27
    ADD t2, t1, t0
    ; Literal value: 111
    LDI t3, 111
    SB t2, t3
    LDI t0, 28
    ADD t2, t1, t0
    ; Literal value: 109
    LDI t3, 109
    SB t2, t3
    LDI t0, 29
    ADD t2, t1, t0
    ; Literal value: 109
    LDI t3, 109
    SB t2, t3
    LDI t0, 30
    ADD t2, t1, t0
    ; Literal value: 97
    LDI t3, 97
    SB t2, t3
    LDI t0, 31
    ADD t2, t1, t0
    ; Literal value: 110
    LDI t3, 110
    SB t2, t3
    LDI t0, 32
    ADD t2, t1, t0
    ; Literal value: 100
    LDI t3, 100
    SB t2, t3
    LDI t0, 33
    ADD t2, t1, t0
    ; Literal value: 115
    LDI t3, 115
    SB t2, t3
    LDI t0, 34
    ADD t2, t1, t0
    ; Literal value: 0
    LDI t3, 0
    SB t2, t3
    ; Function epilogue
__init_strings_end_89:
    POP fp
    POP ra
    JMP ra                               ; Return from function

    ; =============================
    ; Function: __handle_help
    ; =============================
__handle_help:
    ; Pre-allocating 14 local variables
    ; Pre-allocated variable: msg1Len (INT)
    ; Pre-allocated variable: msg1 (PointerType[elementType=BYTE])
    ; Pre-allocated variable: msg2Len (INT)
    ; Pre-allocated variable: msg2 (PointerType[elementType=BYTE])
    ; Pre-allocated variable: msg3Len (INT)
    ; Pre-allocated variable: msg3 (PointerType[elementType=BYTE])
    ; Pre-allocated variable: msg4Len (INT)
    ; Pre-allocated variable: msg4 (PointerType[elementType=BYTE])
    ; Pre-allocated variable: msg6Len (INT)
    ; Pre-allocated variable: msg6 (PointerType[elementType=BYTE])
    ; Pre-allocated variable: msg7Len (INT)
    ; Pre-allocated variable: msg7 (PointerType[elementType=BYTE])
    ; Pre-allocated variable: msg8Len (INT)
    ; Pre-allocated variable: msg8 (PointerType[elementType=BYTE])
    ; Function prologue
    PUSH ra
    PUSH fp
    MOV fp, sp
    ; Total frame size: 88 bytes
    LDI t0, 88
    SUB sp, sp, t0
    ; Allocated 88 bytes for stack frame
    ; Variable declaration: msg1Len
    ; Literal value: 19
    LDI t0, 19
    LDI t1, -4
    ADD t1, fp, t1
    SI t1, t0
    ; Variable declaration: msg1
    ; Function call: malloc
    ; Preparing function call: malloc
    ; Evaluating argument 0
    ; Variable access: msg1Len
    LDI t0, -4
    ADD t0, fp, t0
    LI t1, t0
    PUSH t1
    JAL malloc, ra
    LDI t0, 8
    ADD sp, sp, t0
    ; Cleaned up 1 arguments from stack
    MOV t0, a0
    LDI t1, -12
    ADD t1, fp, t1
    ST t1, t0
    ; Variable access: msg1
    LDI t0, -12
    ADD t0, fp, t0
    LD t1, t0
    ; Dereference assignment to address: t1
    ; Storing array literal to memory at t1
    LDI t0, 0
    ADD t2, t1, t0
    ; Literal value: 65
    LDI t3, 65
    SB t2, t3
    LDI t0, 1
    ADD t2, t1, t0
    ; Literal value: 118
    LDI t3, 118
    SB t2, t3
    LDI t0, 2
    ADD t2, t1, t0
    ; Literal value: 97
    LDI t3, 97
    SB t2, t3
    LDI t0, 3
    ADD t2, t1, t0
    ; Literal value: 105
    LDI t3, 105
    SB t2, t3
    LDI t0, 4
    ADD t2, t1, t0
    ; Literal value: 108
    LDI t3, 108
    SB t2, t3
    LDI t0, 5
    ADD t2, t1, t0
    ; Literal value: 97
    LDI t3, 97
    SB t2, t3
    LDI t0, 6
    ADD t2, t1, t0
    ; Literal value: 98
    LDI t3, 98
    SB t2, t3
    LDI t0, 7
    ADD t2, t1, t0
    ; Literal value: 108
    LDI t3, 108
    SB t2, t3
    LDI t0, 8
    ADD t2, t1, t0
    ; Literal value: 101
    LDI t3, 101
    SB t2, t3
    LDI t0, 9
    ADD t2, t1, t0
    ; Literal value: 32
    LDI t3, 32
    SB t2, t3
    LDI t0, 10
    ADD t2, t1, t0
    ; Literal value: 99
    LDI t3, 99
    SB t2, t3
    LDI t0, 11
    ADD t2, t1, t0
    ; Literal value: 111
    LDI t3, 111
    SB t2, t3
    LDI t0, 12
    ADD t2, t1, t0
    ; Literal value: 109
    LDI t3, 109
    SB t2, t3
    LDI t0, 13
    ADD t2, t1, t0
    ; Literal value: 109
    LDI t3, 109
    SB t2, t3
    LDI t0, 14
    ADD t2, t1, t0
    ; Literal value: 97
    LDI t3, 97
    SB t2, t3
    LDI t0, 15
    ADD t2, t1, t0
    ; Literal value: 110
    LDI t3, 110
    SB t2, t3
    LDI t0, 16
    ADD t2, t1, t0
    ; Literal value: 100
    LDI t3, 100
    SB t2, t3
    LDI t0, 17
    ADD t2, t1, t0
    ; Literal value: 115
    LDI t3, 115
    SB t2, t3
    LDI t0, 18
    ADD t2, t1, t0
    ; Literal value: 58
    LDI t3, 58
    SB t2, t3
    LDI t0, 19
    ADD t2, t1, t0
    ; Literal value: 0
    LDI t3, 0
    SB t2, t3
    ; Expression statement
    ; Function call: println
    ; Preparing function call: println
    ; Evaluating argument 0
    ; Variable access: msg1
    LDI t0, -12
    ADD t0, fp, t0
    LD t1, t0
    ; Evaluating argument 1
    ; Variable access: msg1Len
    LDI t0, -4
    ADD t0, fp, t0
    LI t2, t0
    PUSH t2
    PUSH t1
    JAL println, ra
    LDI t0, 16
    ADD sp, sp, t0
    ; Cleaned up 2 arguments from stack
    MOV t0, a0
    ; Variable declaration: msg2Len
    ; Literal value: 34
    LDI t0, 34
    LDI t1, -16
    ADD t1, fp, t1
    SI t1, t0
    ; Variable declaration: msg2
    ; Function call: malloc
    ; Preparing function call: malloc
    ; Evaluating argument 0
    ; Variable access: msg2Len
    LDI t0, -16
    ADD t0, fp, t0
    LI t1, t0
    PUSH t1
    JAL malloc, ra
    LDI t0, 8
    ADD sp, sp, t0
    ; Cleaned up 1 arguments from stack
    MOV t0, a0
    LDI t1, -24
    ADD t1, fp, t1
    ST t1, t0
    ; Variable access: msg2
    LDI t0, -24
    ADD t0, fp, t0
    LD t1, t0
    ; Dereference assignment to address: t1
    ; Storing array literal to memory at t1
    LDI t0, 0
    ADD t2, t1, t0
    ; Literal value: 32
    LDI t3, 32
    SB t2, t3
    LDI t0, 1
    ADD t2, t1, t0
    ; Literal value: 32
    LDI t3, 32
    SB t2, t3
    LDI t0, 2
    ADD t2, t1, t0
    ; Literal value: 104
    LDI t3, 104
    SB t2, t3
    LDI t0, 3
    ADD t2, t1, t0
    ; Literal value: 101
    LDI t3, 101
    SB t2, t3
    LDI t0, 4
    ADD t2, t1, t0
    ; Literal value: 108
    LDI t3, 108
    SB t2, t3
    LDI t0, 5
    ADD t2, t1, t0
    ; Literal value: 112
    LDI t3, 112
    SB t2, t3
    LDI t0, 6
    ADD t2, t1, t0
    ; Literal value: 32
    LDI t3, 32
    SB t2, t3
    LDI t0, 7
    ADD t2, t1, t0
    ; Literal value: 32
    LDI t3, 32
    SB t2, t3
    LDI t0, 8
    ADD t2, t1, t0
    ; Literal value: 32
    LDI t3, 32
    SB t2, t3
    LDI t0, 9
    ADD t2, t1, t0
    ; Literal value: 32
    LDI t3, 32
    SB t2, t3
    LDI t0, 10
    ADD t2, t1, t0
    ; Literal value: 45
    LDI t3, 45
    SB t2, t3
    LDI t0, 11
    ADD t2, t1, t0
    ; Literal value: 32
    LDI t3, 32
    SB t2, t3
    LDI t0, 12
    ADD t2, t1, t0
    ; Literal value: 83
    LDI t3, 83
    SB t2, t3
    LDI t0, 13
    ADD t2, t1, t0
    ; Literal value: 104
    LDI t3, 104
    SB t2, t3
    LDI t0, 14
    ADD t2, t1, t0
    ; Literal value: 111
    LDI t3, 111
    SB t2, t3
    LDI t0, 15
    ADD t2, t1, t0
    ; Literal value: 119
    LDI t3, 119
    SB t2, t3
    LDI t0, 16
    ADD t2, t1, t0
    ; Literal value: 32
    LDI t3, 32
    SB t2, t3
    LDI t0, 17
    ADD t2, t1, t0
    ; Literal value: 116
    LDI t3, 116
    SB t2, t3
    LDI t0, 18
    ADD t2, t1, t0
    ; Literal value: 104
    LDI t3, 104
    SB t2, t3
    LDI t0, 19
    ADD t2, t1, t0
    ; Literal value: 105
    LDI t3, 105
    SB t2, t3
    LDI t0, 20
    ADD t2, t1, t0
    ; Literal value: 115
    LDI t3, 115
    SB t2, t3
    LDI t0, 21
    ADD t2, t1, t0
    ; Literal value: 32
    LDI t3, 32
    SB t2, t3
    LDI t0, 22
    ADD t2, t1, t0
    ; Literal value: 104
    LDI t3, 104
    SB t2, t3
    LDI t0, 23
    ADD t2, t1, t0
    ; Literal value: 101
    LDI t3, 101
    SB t2, t3
    LDI t0, 24
    ADD t2, t1, t0
    ; Literal value: 108
    LDI t3, 108
    SB t2, t3
    LDI t0, 25
    ADD t2, t1, t0
    ; Literal value: 112
    LDI t3, 112
    SB t2, t3
    LDI t0, 26
    ADD t2, t1, t0
    ; Literal value: 32
    LDI t3, 32
    SB t2, t3
    LDI t0, 27
    ADD t2, t1, t0
    ; Literal value: 109
    LDI t3, 109
    SB t2, t3
    LDI t0, 28
    ADD t2, t1, t0
    ; Literal value: 101
    LDI t3, 101
    SB t2, t3
    LDI t0, 29
    ADD t2, t1, t0
    ; Literal value: 115
    LDI t3, 115
    SB t2, t3
    LDI t0, 30
    ADD t2, t1, t0
    ; Literal value: 115
    LDI t3, 115
    SB t2, t3
    LDI t0, 31
    ADD t2, t1, t0
    ; Literal value: 97
    LDI t3, 97
    SB t2, t3
    LDI t0, 32
    ADD t2, t1, t0
    ; Literal value: 103
    LDI t3, 103
    SB t2, t3
    LDI t0, 33
    ADD t2, t1, t0
    ; Literal value: 101
    LDI t3, 101
    SB t2, t3
    LDI t0, 34
    ADD t2, t1, t0
    ; Literal value: 0
    LDI t3, 0
    SB t2, t3
    ; Expression statement
    ; Function call: println
    ; Preparing function call: println
    ; Evaluating argument 0
    ; Variable access: msg2
    LDI t0, -24
    ADD t0, fp, t0
    LD t1, t0
    ; Evaluating argument 1
    ; Variable access: msg2Len
    LDI t0, -16
    ADD t0, fp, t0
    LI t2, t0
    PUSH t2
    PUSH t1
    JAL println, ra
    LDI t0, 16
    ADD sp, sp, t0
    ; Cleaned up 2 arguments from stack
    MOV t0, a0
    ; Variable declaration: msg3Len
    ; Literal value: 38
    LDI t0, 38
    LDI t1, -28
    ADD t1, fp, t1
    SI t1, t0
    ; Variable declaration: msg3
    ; Function call: malloc
    ; Preparing function call: malloc
    ; Evaluating argument 0
    ; Variable access: msg3Len
    LDI t0, -28
    ADD t0, fp, t0
    LI t1, t0
    PUSH t1
    JAL malloc, ra
    LDI t0, 8
    ADD sp, sp, t0
    ; Cleaned up 1 arguments from stack
    MOV t0, a0
    LDI t1, -36
    ADD t1, fp, t1
    ST t1, t0
    ; Variable access: msg3
    LDI t0, -36
    ADD t0, fp, t0
    LD t1, t0
    ; Dereference assignment to address: t1
    ; Storing array literal to memory at t1
    LDI t0, 0
    ADD t2, t1, t0
    ; Literal value: 32
    LDI t3, 32
    SB t2, t3
    LDI t0, 1
    ADD t2, t1, t0
    ; Literal value: 32
    LDI t3, 32
    SB t2, t3
    LDI t0, 2
    ADD t2, t1, t0
    ; Literal value: 105
    LDI t3, 105
    SB t2, t3
    LDI t0, 3
    ADD t2, t1, t0
    ; Literal value: 110
    LDI t3, 110
    SB t2, t3
    LDI t0, 4
    ADD t2, t1, t0
    ; Literal value: 102
    LDI t3, 102
    SB t2, t3
    LDI t0, 5
    ADD t2, t1, t0
    ; Literal value: 111
    LDI t3, 111
    SB t2, t3
    LDI t0, 6
    ADD t2, t1, t0
    ; Literal value: 32
    LDI t3, 32
    SB t2, t3
    LDI t0, 7
    ADD t2, t1, t0
    ; Literal value: 32
    LDI t3, 32
    SB t2, t3
    LDI t0, 8
    ADD t2, t1, t0
    ; Literal value: 32
    LDI t3, 32
    SB t2, t3
    LDI t0, 9
    ADD t2, t1, t0
    ; Literal value: 32
    LDI t3, 32
    SB t2, t3
    LDI t0, 10
    ADD t2, t1, t0
    ; Literal value: 45
    LDI t3, 45
    SB t2, t3
    LDI t0, 11
    ADD t2, t1, t0
    ; Literal value: 32
    LDI t3, 32
    SB t2, t3
    LDI t0, 12
    ADD t2, t1, t0
    ; Literal value: 68
    LDI t3, 68
    SB t2, t3
    LDI t0, 13
    ADD t2, t1, t0
    ; Literal value: 105
    LDI t3, 105
    SB t2, t3
    LDI t0, 14
    ADD t2, t1, t0
    ; Literal value: 115
    LDI t3, 115
    SB t2, t3
    LDI t0, 15
    ADD t2, t1, t0
    ; Literal value: 112
    LDI t3, 112
    SB t2, t3
    LDI t0, 16
    ADD t2, t1, t0
    ; Literal value: 108
    LDI t3, 108
    SB t2, t3
    LDI t0, 17
    ADD t2, t1, t0
    ; Literal value: 97
    LDI t3, 97
    SB t2, t3
    LDI t0, 18
    ADD t2, t1, t0
    ; Literal value: 121
    LDI t3, 121
    SB t2, t3
    LDI t0, 19
    ADD t2, t1, t0
    ; Literal value: 32
    LDI t3, 32
    SB t2, t3
    LDI t0, 20
    ADD t2, t1, t0
    ; Literal value: 115
    LDI t3, 115
    SB t2, t3
    LDI t0, 21
    ADD t2, t1, t0
    ; Literal value: 121
    LDI t3, 121
    SB t2, t3
    LDI t0, 22
    ADD t2, t1, t0
    ; Literal value: 115
    LDI t3, 115
    SB t2, t3
    LDI t0, 23
    ADD t2, t1, t0
    ; Literal value: 116
    LDI t3, 116
    SB t2, t3
    LDI t0, 24
    ADD t2, t1, t0
    ; Literal value: 101
    LDI t3, 101
    SB t2, t3
    LDI t0, 25
    ADD t2, t1, t0
    ; Literal value: 109
    LDI t3, 109
    SB t2, t3
    LDI t0, 26
    ADD t2, t1, t0
    ; Literal value: 32
    LDI t3, 32
    SB t2, t3
    LDI t0, 27
    ADD t2, t1, t0
    ; Literal value: 105
    LDI t3, 105
    SB t2, t3
    LDI t0, 28
    ADD t2, t1, t0
    ; Literal value: 110
    LDI t3, 110
    SB t2, t3
    LDI t0, 29
    ADD t2, t1, t0
    ; Literal value: 102
    LDI t3, 102
    SB t2, t3
    LDI t0, 30
    ADD t2, t1, t0
    ; Literal value: 111
    LDI t3, 111
    SB t2, t3
    LDI t0, 31
    ADD t2, t1, t0
    ; Literal value: 114
    LDI t3, 114
    SB t2, t3
    LDI t0, 32
    ADD t2, t1, t0
    ; Literal value: 109
    LDI t3, 109
    SB t2, t3
    LDI t0, 33
    ADD t2, t1, t0
    ; Literal value: 97
    LDI t3, 97
    SB t2, t3
    LDI t0, 34
    ADD t2, t1, t0
    ; Literal value: 116
    LDI t3, 116
    SB t2, t3
    LDI t0, 35
    ADD t2, t1, t0
    ; Literal value: 105
    LDI t3, 105
    SB t2, t3
    LDI t0, 36
    ADD t2, t1, t0
    ; Literal value: 111
    LDI t3, 111
    SB t2, t3
    LDI t0, 37
    ADD t2, t1, t0
    ; Literal value: 110
    LDI t3, 110
    SB t2, t3
    LDI t0, 38
    ADD t2, t1, t0
    ; Literal value: 0
    LDI t3, 0
    SB t2, t3
    ; Expression statement
    ; Function call: println
    ; Preparing function call: println
    ; Evaluating argument 0
    ; Variable access: msg3
    LDI t0, -36
    ADD t0, fp, t0
    LD t1, t0
    ; Evaluating argument 1
    ; Variable access: msg3Len
    LDI t0, -28
    ADD t0, fp, t0
    LI t2, t0
    PUSH t2
    PUSH t1
    JAL println, ra
    LDI t0, 16
    ADD sp, sp, t0
    ; Cleaned up 2 arguments from stack
    MOV t0, a0
    ; Variable declaration: msg4Len
    ; Literal value: 28
    LDI t0, 28
    LDI t1, -40
    ADD t1, fp, t1
    SI t1, t0
    ; Variable declaration: msg4
    ; Function call: malloc
    ; Preparing function call: malloc
    ; Evaluating argument 0
    ; Variable access: msg4Len
    LDI t0, -40
    ADD t0, fp, t0
    LI t1, t0
    PUSH t1
    JAL malloc, ra
    LDI t0, 8
    ADD sp, sp, t0
    ; Cleaned up 1 arguments from stack
    MOV t0, a0
    LDI t1, -48
    ADD t1, fp, t1
    ST t1, t0
    ; Variable access: msg4
    LDI t0, -48
    ADD t0, fp, t0
    LD t1, t0
    ; Dereference assignment to address: t1
    ; Storing array literal to memory at t1
    LDI t0, 0
    ADD t2, t1, t0
    ; Literal value: 32
    LDI t3, 32
    SB t2, t3
    LDI t0, 1
    ADD t2, t1, t0
    ; Literal value: 32
    LDI t3, 32
    SB t2, t3
    LDI t0, 2
    ADD t2, t1, t0
    ; Literal value: 99
    LDI t3, 99
    SB t2, t3
    LDI t0, 3
    ADD t2, t1, t0
    ; Literal value: 108
    LDI t3, 108
    SB t2, t3
    LDI t0, 4
    ADD t2, t1, t0
    ; Literal value: 101
    LDI t3, 101
    SB t2, t3
    LDI t0, 5
    ADD t2, t1, t0
    ; Literal value: 97
    LDI t3, 97
    SB t2, t3
    LDI t0, 6
    ADD t2, t1, t0
    ; Literal value: 114
    LDI t3, 114
    SB t2, t3
    LDI t0, 7
    ADD t2, t1, t0
    ; Literal value: 32
    LDI t3, 32
    SB t2, t3
    LDI t0, 8
    ADD t2, t1, t0
    ; Literal value: 32
    LDI t3, 32
    SB t2, t3
    LDI t0, 9
    ADD t2, t1, t0
    ; Literal value: 32
    LDI t3, 32
    SB t2, t3
    LDI t0, 10
    ADD t2, t1, t0
    ; Literal value: 45
    LDI t3, 45
    SB t2, t3
    LDI t0, 11
    ADD t2, t1, t0
    ; Literal value: 32
    LDI t3, 32
    SB t2, t3
    LDI t0, 12
    ADD t2, t1, t0
    ; Literal value: 67
    LDI t3, 67
    SB t2, t3
    LDI t0, 13
    ADD t2, t1, t0
    ; Literal value: 108
    LDI t3, 108
    SB t2, t3
    LDI t0, 14
    ADD t2, t1, t0
    ; Literal value: 101
    LDI t3, 101
    SB t2, t3
    LDI t0, 15
    ADD t2, t1, t0
    ; Literal value: 97
    LDI t3, 97
    SB t2, t3
    LDI t0, 16
    ADD t2, t1, t0
    ; Literal value: 114
    LDI t3, 114
    SB t2, t3
    LDI t0, 17
    ADD t2, t1, t0
    ; Literal value: 32
    LDI t3, 32
    SB t2, t3
    LDI t0, 18
    ADD t2, t1, t0
    ; Literal value: 116
    LDI t3, 116
    SB t2, t3
    LDI t0, 19
    ADD t2, t1, t0
    ; Literal value: 104
    LDI t3, 104
    SB t2, t3
    LDI t0, 20
    ADD t2, t1, t0
    ; Literal value: 101
    LDI t3, 101
    SB t2, t3
    LDI t0, 21
    ADD t2, t1, t0
    ; Literal value: 32
    LDI t3, 32
    SB t2, t3
    LDI t0, 22
    ADD t2, t1, t0
    ; Literal value: 115
    LDI t3, 115
    SB t2, t3
    LDI t0, 23
    ADD t2, t1, t0
    ; Literal value: 99
    LDI t3, 99
    SB t2, t3
    LDI t0, 24
    ADD t2, t1, t0
    ; Literal value: 114
    LDI t3, 114
    SB t2, t3
    LDI t0, 25
    ADD t2, t1, t0
    ; Literal value: 101
    LDI t3, 101
    SB t2, t3
    LDI t0, 26
    ADD t2, t1, t0
    ; Literal value: 101
    LDI t3, 101
    SB t2, t3
    LDI t0, 27
    ADD t2, t1, t0
    ; Literal value: 110
    LDI t3, 110
    SB t2, t3
    LDI t0, 28
    ADD t2, t1, t0
    ; Literal value: 0
    LDI t3, 0
    SB t2, t3
    ; Expression statement
    ; Function call: println
    ; Preparing function call: println
    ; Evaluating argument 0
    ; Variable access: msg4
    LDI t0, -48
    ADD t0, fp, t0
    LD t1, t0
    ; Evaluating argument 1
    ; Variable access: msg4Len
    LDI t0, -40
    ADD t0, fp, t0
    LI t2, t0
    PUSH t2
    PUSH t1
    JAL println, ra
    LDI t0, 16
    ADD sp, sp, t0
    ; Cleaned up 2 arguments from stack
    MOV t0, a0
    ; Variable declaration: msg6Len
    ; Literal value: 36
    LDI t0, 36
    LDI t1, -52
    ADD t1, fp, t1
    SI t1, t0
    ; Variable declaration: msg6
    ; Function call: malloc
    ; Preparing function call: malloc
    ; Evaluating argument 0
    ; Variable access: msg6Len
    LDI t0, -52
    ADD t0, fp, t0
    LI t1, t0
    PUSH t1
    JAL malloc, ra
    LDI t0, 8
    ADD sp, sp, t0
    ; Cleaned up 1 arguments from stack
    MOV t0, a0
    LDI t1, -60
    ADD t1, fp, t1
    ST t1, t0
    ; Variable access: msg6
    LDI t0, -60
    ADD t0, fp, t0
    LD t1, t0
    ; Dereference assignment to address: t1
    ; Storing array literal to memory at t1
    LDI t0, 0
    ADD t2, t1, t0
    ; Literal value: 32
    LDI t3, 32
    SB t2, t3
    LDI t0, 1
    ADD t2, t1, t0
    ; Literal value: 32
    LDI t3, 32
    SB t2, t3
    LDI t0, 2
    ADD t2, t1, t0
    ; Literal value: 118
    LDI t3, 118
    SB t2, t3
    LDI t0, 3
    ADD t2, t1, t0
    ; Literal value: 101
    LDI t3, 101
    SB t2, t3
    LDI t0, 4
    ADD t2, t1, t0
    ; Literal value: 114
    LDI t3, 114
    SB t2, t3
    LDI t0, 5
    ADD t2, t1, t0
    ; Literal value: 115
    LDI t3, 115
    SB t2, t3
    LDI t0, 6
    ADD t2, t1, t0
    ; Literal value: 105
    LDI t3, 105
    SB t2, t3
    LDI t0, 7
    ADD t2, t1, t0
    ; Literal value: 111
    LDI t3, 111
    SB t2, t3
    LDI t0, 8
    ADD t2, t1, t0
    ; Literal value: 110
    LDI t3, 110
    SB t2, t3
    LDI t0, 9
    ADD t2, t1, t0
    ; Literal value: 32
    LDI t3, 32
    SB t2, t3
    LDI t0, 10
    ADD t2, t1, t0
    ; Literal value: 45
    LDI t3, 45
    SB t2, t3
    LDI t0, 11
    ADD t2, t1, t0
    ; Literal value: 32
    LDI t3, 32
    SB t2, t3
    LDI t0, 12
    ADD t2, t1, t0
    ; Literal value: 83
    LDI t3, 83
    SB t2, t3
    LDI t0, 13
    ADD t2, t1, t0
    ; Literal value: 104
    LDI t3, 104
    SB t2, t3
    LDI t0, 14
    ADD t2, t1, t0
    ; Literal value: 111
    LDI t3, 111
    SB t2, t3
    LDI t0, 15
    ADD t2, t1, t0
    ; Literal value: 119
    LDI t3, 119
    SB t2, t3
    LDI t0, 16
    ADD t2, t1, t0
    ; Literal value: 32
    LDI t3, 32
    SB t2, t3
    LDI t0, 17
    ADD t2, t1, t0
    ; Literal value: 118
    LDI t3, 118
    SB t2, t3
    LDI t0, 18
    ADD t2, t1, t0
    ; Literal value: 101
    LDI t3, 101
    SB t2, t3
    LDI t0, 19
    ADD t2, t1, t0
    ; Literal value: 114
    LDI t3, 114
    SB t2, t3
    LDI t0, 20
    ADD t2, t1, t0
    ; Literal value: 115
    LDI t3, 115
    SB t2, t3
    LDI t0, 21
    ADD t2, t1, t0
    ; Literal value: 105
    LDI t3, 105
    SB t2, t3
    LDI t0, 22
    ADD t2, t1, t0
    ; Literal value: 111
    LDI t3, 111
    SB t2, t3
    LDI t0, 23
    ADD t2, t1, t0
    ; Literal value: 110
    LDI t3, 110
    SB t2, t3
    LDI t0, 24
    ADD t2, t1, t0
    ; Literal value: 32
    LDI t3, 32
    SB t2, t3
    LDI t0, 25
    ADD t2, t1, t0
    ; Literal value: 105
    LDI t3, 105
    SB t2, t3
    LDI t0, 26
    ADD t2, t1, t0
    ; Literal value: 110
    LDI t3, 110
    SB t2, t3
    LDI t0, 27
    ADD t2, t1, t0
    ; Literal value: 102
    LDI t3, 102
    SB t2, t3
    LDI t0, 28
    ADD t2, t1, t0
    ; Literal value: 111
    LDI t3, 111
    SB t2, t3
    LDI t0, 29
    ADD t2, t1, t0
    ; Literal value: 114
    LDI t3, 114
    SB t2, t3
    LDI t0, 30
    ADD t2, t1, t0
    ; Literal value: 109
    LDI t3, 109
    SB t2, t3
    LDI t0, 31
    ADD t2, t1, t0
    ; Literal value: 97
    LDI t3, 97
    SB t2, t3
    LDI t0, 32
    ADD t2, t1, t0
    ; Literal value: 116
    LDI t3, 116
    SB t2, t3
    LDI t0, 33
    ADD t2, t1, t0
    ; Literal value: 105
    LDI t3, 105
    SB t2, t3
    LDI t0, 34
    ADD t2, t1, t0
    ; Literal value: 111
    LDI t3, 111
    SB t2, t3
    LDI t0, 35
    ADD t2, t1, t0
    ; Literal value: 110
    LDI t3, 110
    SB t2, t3
    LDI t0, 36
    ADD t2, t1, t0
    ; Literal value: 0
    LDI t3, 0
    SB t2, t3
    ; Expression statement
    ; Function call: println
    ; Preparing function call: println
    ; Evaluating argument 0
    ; Variable access: msg6
    LDI t0, -60
    ADD t0, fp, t0
    LD t1, t0
    ; Evaluating argument 1
    ; Variable access: msg6Len
    LDI t0, -52
    ADD t0, fp, t0
    LI t2, t0
    PUSH t2
    PUSH t1
    JAL println, ra
    LDI t0, 16
    ADD sp, sp, t0
    ; Cleaned up 2 arguments from stack
    MOV t0, a0
    ; Variable declaration: msg7Len
    ; Literal value: 41
    LDI t0, 41
    LDI t1, -64
    ADD t1, fp, t1
    SI t1, t0
    ; Variable declaration: msg7
    ; Function call: malloc
    ; Preparing function call: malloc
    ; Evaluating argument 0
    ; Variable access: msg7Len
    LDI t0, -64
    ADD t0, fp, t0
    LI t1, t0
    PUSH t1
    JAL malloc, ra
    LDI t0, 8
    ADD sp, sp, t0
    ; Cleaned up 1 arguments from stack
    MOV t0, a0
    LDI t1, -72
    ADD t1, fp, t1
    ST t1, t0
    ; Variable access: msg7
    LDI t0, -72
    ADD t0, fp, t0
    LD t1, t0
    ; Dereference assignment to address: t1
    ; Storing array literal to memory at t1
    LDI t0, 0
    ADD t2, t1, t0
    ; Literal value: 32
    LDI t3, 32
    SB t2, t3
    LDI t0, 1
    ADD t2, t1, t0
    ; Literal value: 32
    LDI t3, 32
    SB t2, t3
    LDI t0, 2
    ADD t2, t1, t0
    ; Literal value: 100
    LDI t3, 100
    SB t2, t3
    LDI t0, 3
    ADD t2, t1, t0
    ; Literal value: 97
    LDI t3, 97
    SB t2, t3
    LDI t0, 4
    ADD t2, t1, t0
    ; Literal value: 116
    LDI t3, 116
    SB t2, t3
    LDI t0, 5
    ADD t2, t1, t0
    ; Literal value: 101
    LDI t3, 101
    SB t2, t3
    LDI t0, 6
    ADD t2, t1, t0
    ; Literal value: 32
    LDI t3, 32
    SB t2, t3
    LDI t0, 7
    ADD t2, t1, t0
    ; Literal value: 32
    LDI t3, 32
    SB t2, t3
    LDI t0, 8
    ADD t2, t1, t0
    ; Literal value: 32
    LDI t3, 32
    SB t2, t3
    LDI t0, 9
    ADD t2, t1, t0
    ; Literal value: 32
    LDI t3, 32
    SB t2, t3
    LDI t0, 10
    ADD t2, t1, t0
    ; Literal value: 45
    LDI t3, 45
    SB t2, t3
    LDI t0, 11
    ADD t2, t1, t0
    ; Literal value: 32
    LDI t3, 32
    SB t2, t3
    LDI t0, 12
    ADD t2, t1, t0
    ; Literal value: 68
    LDI t3, 68
    SB t2, t3
    LDI t0, 13
    ADD t2, t1, t0
    ; Literal value: 105
    LDI t3, 105
    SB t2, t3
    LDI t0, 14
    ADD t2, t1, t0
    ; Literal value: 115
    LDI t3, 115
    SB t2, t3
    LDI t0, 15
    ADD t2, t1, t0
    ; Literal value: 112
    LDI t3, 112
    SB t2, t3
    LDI t0, 16
    ADD t2, t1, t0
    ; Literal value: 108
    LDI t3, 108
    SB t2, t3
    LDI t0, 17
    ADD t2, t1, t0
    ; Literal value: 97
    LDI t3, 97
    SB t2, t3
    LDI t0, 18
    ADD t2, t1, t0
    ; Literal value: 121
    LDI t3, 121
    SB t2, t3
    LDI t0, 19
    ADD t2, t1, t0
    ; Literal value: 32
    LDI t3, 32
    SB t2, t3
    LDI t0, 20
    ADD t2, t1, t0
    ; Literal value: 99
    LDI t3, 99
    SB t2, t3
    LDI t0, 21
    ADD t2, t1, t0
    ; Literal value: 117
    LDI t3, 117
    SB t2, t3
    LDI t0, 22
    ADD t2, t1, t0
    ; Literal value: 114
    LDI t3, 114
    SB t2, t3
    LDI t0, 23
    ADD t2, t1, t0
    ; Literal value: 114
    LDI t3, 114
    SB t2, t3
    LDI t0, 24
    ADD t2, t1, t0
    ; Literal value: 101
    LDI t3, 101
    SB t2, t3
    LDI t0, 25
    ADD t2, t1, t0
    ; Literal value: 110
    LDI t3, 110
    SB t2, t3
    LDI t0, 26
    ADD t2, t1, t0
    ; Literal value: 116
    LDI t3, 116
    SB t2, t3
    LDI t0, 27
    ADD t2, t1, t0
    ; Literal value: 32
    LDI t3, 32
    SB t2, t3
    LDI t0, 28
    ADD t2, t1, t0
    ; Literal value: 100
    LDI t3, 100
    SB t2, t3
    LDI t0, 29
    ADD t2, t1, t0
    ; Literal value: 97
    LDI t3, 97
    SB t2, t3
    LDI t0, 30
    ADD t2, t1, t0
    ; Literal value: 116
    LDI t3, 116
    SB t2, t3
    LDI t0, 31
    ADD t2, t1, t0
    ; Literal value: 101
    LDI t3, 101
    SB t2, t3
    LDI t0, 32
    ADD t2, t1, t0
    ; Literal value: 32
    LDI t3, 32
    SB t2, t3
    LDI t0, 33
    ADD t2, t1, t0
    ; Literal value: 97
    LDI t3, 97
    SB t2, t3
    LDI t0, 34
    ADD t2, t1, t0
    ; Literal value: 110
    LDI t3, 110
    SB t2, t3
    LDI t0, 35
    ADD t2, t1, t0
    ; Literal value: 100
    LDI t3, 100
    SB t2, t3
    LDI t0, 36
    ADD t2, t1, t0
    ; Literal value: 32
    LDI t3, 32
    SB t2, t3
    LDI t0, 37
    ADD t2, t1, t0
    ; Literal value: 116
    LDI t3, 116
    SB t2, t3
    LDI t0, 38
    ADD t2, t1, t0
    ; Literal value: 105
    LDI t3, 105
    SB t2, t3
    LDI t0, 39
    ADD t2, t1, t0
    ; Literal value: 109
    LDI t3, 109
    SB t2, t3
    LDI t0, 40
    ADD t2, t1, t0
    ; Literal value: 101
    LDI t3, 101
    SB t2, t3
    LDI t0, 41
    ADD t2, t1, t0
    ; Literal value: 0
    LDI t3, 0
    SB t2, t3
    ; Expression statement
    ; Function call: println
    ; Preparing function call: println
    ; Evaluating argument 0
    ; Variable access: msg7
    LDI t0, -72
    ADD t0, fp, t0
    LD t1, t0
    ; Evaluating argument 1
    ; Variable access: msg7Len
    LDI t0, -64
    ADD t0, fp, t0
    LI t2, t0
    PUSH t2
    PUSH t1
    JAL println, ra
    LDI t0, 16
    ADD sp, sp, t0
    ; Cleaned up 2 arguments from stack
    MOV t0, a0
    ; Variable declaration: msg8Len
    ; Literal value: 36
    LDI t0, 36
    LDI t1, -76
    ADD t1, fp, t1
    SI t1, t0
    ; Variable declaration: msg8
    ; Function call: malloc
    ; Preparing function call: malloc
    ; Evaluating argument 0
    ; Variable access: msg8Len
    LDI t0, -76
    ADD t0, fp, t0
    LI t1, t0
    PUSH t1
    JAL malloc, ra
    LDI t0, 8
    ADD sp, sp, t0
    ; Cleaned up 1 arguments from stack
    MOV t0, a0
    LDI t1, -84
    ADD t1, fp, t1
    ST t1, t0
    ; Variable access: msg8
    LDI t0, -84
    ADD t0, fp, t0
    LD t1, t0
    ; Dereference assignment to address: t1
    ; Storing array literal to memory at t1
    LDI t0, 0
    ADD t2, t1, t0
    ; Literal value: 32
    LDI t3, 32
    SB t2, t3
    LDI t0, 1
    ADD t2, t1, t0
    ; Literal value: 32
    LDI t3, 32
    SB t2, t3
    LDI t0, 2
    ADD t2, t1, t0
    ; Literal value: 114
    LDI t3, 114
    SB t2, t3
    LDI t0, 3
    ADD t2, t1, t0
    ; Literal value: 101
    LDI t3, 101
    SB t2, t3
    LDI t0, 4
    ADD t2, t1, t0
    ; Literal value: 115
    LDI t3, 115
    SB t2, t3
    LDI t0, 5
    ADD t2, t1, t0
    ; Literal value: 101
    LDI t3, 101
    SB t2, t3
    LDI t0, 6
    ADD t2, t1, t0
    ; Literal value: 116
    LDI t3, 116
    SB t2, t3
    LDI t0, 7
    ADD t2, t1, t0
    ; Literal value: 32
    LDI t3, 32
    SB t2, t3
    LDI t0, 8
    ADD t2, t1, t0
    ; Literal value: 32
    LDI t3, 32
    SB t2, t3
    LDI t0, 9
    ADD t2, t1, t0
    ; Literal value: 32
    LDI t3, 32
    SB t2, t3
    LDI t0, 10
    ADD t2, t1, t0
    ; Literal value: 45
    LDI t3, 45
    SB t2, t3
    LDI t0, 11
    ADD t2, t1, t0
    ; Literal value: 32
    LDI t3, 32
    SB t2, t3
    LDI t0, 12
    ADD t2, t1, t0
    ; Literal value: 82
    LDI t3, 82
    SB t2, t3
    LDI t0, 13
    ADD t2, t1, t0
    ; Literal value: 101
    LDI t3, 101
    SB t2, t3
    LDI t0, 14
    ADD t2, t1, t0
    ; Literal value: 116
    LDI t3, 116
    SB t2, t3
    LDI t0, 15
    ADD t2, t1, t0
    ; Literal value: 117
    LDI t3, 117
    SB t2, t3
    LDI t0, 16
    ADD t2, t1, t0
    ; Literal value: 114
    LDI t3, 114
    SB t2, t3
    LDI t0, 17
    ADD t2, t1, t0
    ; Literal value: 110
    LDI t3, 110
    SB t2, t3
    LDI t0, 18
    ADD t2, t1, t0
    ; Literal value: 32
    LDI t3, 32
    SB t2, t3
    LDI t0, 19
    ADD t2, t1, t0
    ; Literal value: 116
    LDI t3, 116
    SB t2, t3
    LDI t0, 20
    ADD t2, t1, t0
    ; Literal value: 111
    LDI t3, 111
    SB t2, t3
    LDI t0, 21
    ADD t2, t1, t0
    ; Literal value: 32
    LDI t3, 32
    SB t2, t3
    LDI t0, 22
    ADD t2, t1, t0
    ; Literal value: 115
    LDI t3, 115
    SB t2, t3
    LDI t0, 23
    ADD t2, t1, t0
    ; Literal value: 116
    LDI t3, 116
    SB t2, t3
    LDI t0, 24
    ADD t2, t1, t0
    ; Literal value: 97
    LDI t3, 97
    SB t2, t3
    LDI t0, 25
    ADD t2, t1, t0
    ; Literal value: 114
    LDI t3, 114
    SB t2, t3
    LDI t0, 26
    ADD t2, t1, t0
    ; Literal value: 116
    LDI t3, 116
    SB t2, t3
    LDI t0, 27
    ADD t2, t1, t0
    ; Literal value: 117
    LDI t3, 117
    SB t2, t3
    LDI t0, 28
    ADD t2, t1, t0
    ; Literal value: 112
    LDI t3, 112
    SB t2, t3
    LDI t0, 29
    ADD t2, t1, t0
    ; Literal value: 32
    LDI t3, 32
    SB t2, t3
    LDI t0, 30
    ADD t2, t1, t0
    ; Literal value: 115
    LDI t3, 115
    SB t2, t3
    LDI t0, 31
    ADD t2, t1, t0
    ; Literal value: 99
    LDI t3, 99
    SB t2, t3
    LDI t0, 32
    ADD t2, t1, t0
    ; Literal value: 114
    LDI t3, 114
    SB t2, t3
    LDI t0, 33
    ADD t2, t1, t0
    ; Literal value: 101
    LDI t3, 101
    SB t2, t3
    LDI t0, 34
    ADD t2, t1, t0
    ; Literal value: 101
    LDI t3, 101
    SB t2, t3
    LDI t0, 35
    ADD t2, t1, t0
    ; Literal value: 110
    LDI t3, 110
    SB t2, t3
    LDI t0, 36
    ADD t2, t1, t0
    ; Literal value: 0
    LDI t3, 0
    SB t2, t3
    ; Expression statement
    ; Function call: println
    ; Preparing function call: println
    ; Evaluating argument 0
    ; Variable access: msg8
    LDI t0, -84
    ADD t0, fp, t0
    LD t1, t0
    ; Evaluating argument 1
    ; Variable access: msg8Len
    LDI t0, -76
    ADD t0, fp, t0
    LI t2, t0
    PUSH t2
    PUSH t1
    JAL println, ra
    LDI t0, 16
    ADD sp, sp, t0
    ; Cleaned up 2 arguments from stack
    MOV t0, a0
    ; Function epilogue
__handle_help_end_90:
    LDI t0, 88
    ADD sp, sp, t0
    ; Deallocated 88 bytes for frame
    POP fp
    POP ra
    JMP ra                               ; Return from function

    ; =============================
    ; Function: __handle_info
    ; =============================
__handle_info:
    ; Pre-allocating 6 local variables
    ; Pre-allocated variable: msg1Len (INT)
    ; Pre-allocated variable: msg1 (PointerType[elementType=BYTE])
    ; Pre-allocated variable: msg2Len (INT)
    ; Pre-allocated variable: msg2 (PointerType[elementType=BYTE])
    ; Pre-allocated variable: msg3Len (INT)
    ; Pre-allocated variable: msg3 (PointerType[elementType=BYTE])
    ; Function prologue
    PUSH ra
    PUSH fp
    MOV fp, sp
    ; Total frame size: 40 bytes
    LDI t0, 40
    SUB sp, sp, t0
    ; Allocated 40 bytes for stack frame
    ; Variable declaration: msg1Len
    ; Literal value: 14
    LDI t0, 14
    LDI t1, -4
    ADD t1, fp, t1
    SI t1, t0
    ; Variable declaration: msg1
    ; Function call: malloc
    ; Preparing function call: malloc
    ; Evaluating argument 0
    ; Variable access: msg1Len
    LDI t0, -4
    ADD t0, fp, t0
    LI t1, t0
    PUSH t1
    JAL malloc, ra
    LDI t0, 8
    ADD sp, sp, t0
    ; Cleaned up 1 arguments from stack
    MOV t0, a0
    LDI t1, -12
    ADD t1, fp, t1
    ST t1, t0
    ; Variable access: msg1
    LDI t0, -12
    ADD t0, fp, t0
    LD t1, t0
    ; Dereference assignment to address: t1
    ; Storing array literal to memory at t1
    LDI t0, 0
    ADD t2, t1, t0
    ; Literal value: 84
    LDI t3, 84
    SB t2, t3
    LDI t0, 1
    ADD t2, t1, t0
    ; Literal value: 114
    LDI t3, 114
    SB t2, t3
    LDI t0, 2
    ADD t2, t1, t0
    ; Literal value: 105
    LDI t3, 105
    SB t2, t3
    LDI t0, 3
    ADD t2, t1, t0
    ; Literal value: 116
    LDI t3, 116
    SB t2, t3
    LDI t0, 4
    ADD t2, t1, t0
    ; Literal value: 111
    LDI t3, 111
    SB t2, t3
    LDI t0, 5
    ADD t2, t1, t0
    ; Literal value: 110
    LDI t3, 110
    SB t2, t3
    LDI t0, 6
    ADD t2, t1, t0
    ; Literal value: 45
    LDI t3, 45
    SB t2, t3
    LDI t0, 7
    ADD t2, t1, t0
    ; Literal value: 79
    LDI t3, 79
    SB t2, t3
    LDI t0, 8
    ADD t2, t1, t0
    ; Literal value: 83
    LDI t3, 83
    SB t2, t3
    LDI t0, 9
    ADD t2, t1, t0
    ; Literal value: 32
    LDI t3, 32
    SB t2, t3
    LDI t0, 10
    ADD t2, t1, t0
    ; Literal value: 118
    LDI t3, 118
    SB t2, t3
    LDI t0, 11
    ADD t2, t1, t0
    ; Literal value: 48
    LDI t3, 48
    SB t2, t3
    LDI t0, 12
    ADD t2, t1, t0
    ; Literal value: 46
    LDI t3, 46
    SB t2, t3
    LDI t0, 13
    ADD t2, t1, t0
    ; Literal value: 49
    LDI t3, 49
    SB t2, t3
    LDI t0, 14
    ADD t2, t1, t0
    ; Literal value: 0
    LDI t3, 0
    SB t2, t3
    ; Expression statement
    ; Function call: println
    ; Preparing function call: println
    ; Evaluating argument 0
    ; Variable access: msg1
    LDI t0, -12
    ADD t0, fp, t0
    LD t1, t0
    ; Evaluating argument 1
    ; Variable access: msg1Len
    LDI t0, -4
    ADD t0, fp, t0
    LI t2, t0
    PUSH t2
    PUSH t1
    JAL println, ra
    LDI t0, 16
    ADD sp, sp, t0
    ; Cleaned up 2 arguments from stack
    MOV t0, a0
    ; Variable declaration: msg2Len
    ; Literal value: 14
    LDI t0, 14
    LDI t1, -16
    ADD t1, fp, t1
    SI t1, t0
    ; Variable declaration: msg2
    ; Function call: malloc
    ; Preparing function call: malloc
    ; Evaluating argument 0
    ; Variable access: msg2Len
    LDI t0, -16
    ADD t0, fp, t0
    LI t1, t0
    PUSH t1
    JAL malloc, ra
    LDI t0, 8
    ADD sp, sp, t0
    ; Cleaned up 1 arguments from stack
    MOV t0, a0
    LDI t1, -24
    ADD t1, fp, t1
    ST t1, t0
    ; Variable access: msg2
    LDI t0, -24
    ADD t0, fp, t0
    LD t1, t0
    ; Dereference assignment to address: t1
    ; Storing array literal to memory at t1
    LDI t0, 0
    ADD t2, t1, t0
    ; Literal value: 67
    LDI t3, 67
    SB t2, t3
    LDI t0, 1
    ADD t2, t1, t0
    ; Literal value: 111
    LDI t3, 111
    SB t2, t3
    LDI t0, 2
    ADD t2, t1, t0
    ; Literal value: 110
    LDI t3, 110
    SB t2, t3
    LDI t0, 3
    ADD t2, t1, t0
    ; Literal value: 115
    LDI t3, 115
    SB t2, t3
    LDI t0, 4
    ADD t2, t1, t0
    ; Literal value: 111
    LDI t3, 111
    SB t2, t3
    LDI t0, 5
    ADD t2, t1, t0
    ; Literal value: 108
    LDI t3, 108
    SB t2, t3
    LDI t0, 6
    ADD t2, t1, t0
    ; Literal value: 101
    LDI t3, 101
    SB t2, t3
    LDI t0, 7
    ADD t2, t1, t0
    ; Literal value: 58
    LDI t3, 58
    SB t2, t3
    LDI t0, 8
    ADD t2, t1, t0
    ; Literal value: 32
    LDI t3, 32
    SB t2, t3
    LDI t0, 9
    ADD t2, t1, t0
    ; Literal value: 56
    LDI t3, 56
    SB t2, t3
    LDI t0, 10
    ADD t2, t1, t0
    ; Literal value: 48
    LDI t3, 48
    SB t2, t3
    LDI t0, 11
    ADD t2, t1, t0
    ; Literal value: 120
    LDI t3, 120
    SB t2, t3
    LDI t0, 12
    ADD t2, t1, t0
    ; Literal value: 51
    LDI t3, 51
    SB t2, t3
    LDI t0, 13
    ADD t2, t1, t0
    ; Literal value: 48
    LDI t3, 48
    SB t2, t3
    LDI t0, 14
    ADD t2, t1, t0
    ; Literal value: 0
    LDI t3, 0
    SB t2, t3
    ; Expression statement
    ; Function call: println
    ; Preparing function call: println
    ; Evaluating argument 0
    ; Variable access: msg2
    LDI t0, -24
    ADD t0, fp, t0
    LD t1, t0
    ; Evaluating argument 1
    ; Variable access: msg2Len
    LDI t0, -16
    ADD t0, fp, t0
    LI t2, t0
    PUSH t2
    PUSH t1
    JAL println, ra
    LDI t0, 16
    ADD sp, sp, t0
    ; Cleaned up 2 arguments from stack
    MOV t0, a0
    ; Variable declaration: msg3Len
    ; Literal value: 11
    LDI t0, 11
    LDI t1, -28
    ADD t1, fp, t1
    SI t1, t0
    ; Variable declaration: msg3
    ; Function call: malloc
    ; Preparing function call: malloc
    ; Evaluating argument 0
    ; Variable access: msg3Len
    LDI t0, -28
    ADD t0, fp, t0
    LI t1, t0
    PUSH t1
    JAL malloc, ra
    LDI t0, 8
    ADD sp, sp, t0
    ; Cleaned up 1 arguments from stack
    MOV t0, a0
    LDI t1, -36
    ADD t1, fp, t1
    ST t1, t0
    ; Variable access: msg3
    LDI t0, -36
    ADD t0, fp, t0
    LD t1, t0
    ; Dereference assignment to address: t1
    ; Storing array literal to memory at t1
    LDI t0, 0
    ADD t2, t1, t0
    ; Literal value: 72
    LDI t3, 72
    SB t2, t3
    LDI t0, 1
    ADD t2, t1, t0
    ; Literal value: 101
    LDI t3, 101
    SB t2, t3
    LDI t0, 2
    ADD t2, t1, t0
    ; Literal value: 97
    LDI t3, 97
    SB t2, t3
    LDI t0, 3
    ADD t2, t1, t0
    ; Literal value: 112
    LDI t3, 112
    SB t2, t3
    LDI t0, 4
    ADD t2, t1, t0
    ; Literal value: 58
    LDI t3, 58
    SB t2, t3
    LDI t0, 5
    ADD t2, t1, t0
    ; Literal value: 32
    LDI t3, 32
    SB t2, t3
    LDI t0, 6
    ADD t2, t1, t0
    ; Literal value: 49
    LDI t3, 49
    SB t2, t3
    LDI t0, 7
    ADD t2, t1, t0
    ; Literal value: 50
    LDI t3, 50
    SB t2, t3
    LDI t0, 8
    ADD t2, t1, t0
    ; Literal value: 56
    LDI t3, 56
    SB t2, t3
    LDI t0, 9
    ADD t2, t1, t0
    ; Literal value: 77
    LDI t3, 77
    SB t2, t3
    LDI t0, 10
    ADD t2, t1, t0
    ; Literal value: 66
    LDI t3, 66
    SB t2, t3
    LDI t0, 11
    ADD t2, t1, t0
    ; Literal value: 0
    LDI t3, 0
    SB t2, t3
    ; Expression statement
    ; Function call: println
    ; Preparing function call: println
    ; Evaluating argument 0
    ; Variable access: msg3
    LDI t0, -36
    ADD t0, fp, t0
    LD t1, t0
    ; Evaluating argument 1
    ; Variable access: msg3Len
    LDI t0, -28
    ADD t0, fp, t0
    LI t2, t0
    PUSH t2
    PUSH t1
    JAL println, ra
    LDI t0, 16
    ADD sp, sp, t0
    ; Cleaned up 2 arguments from stack
    MOV t0, a0
    ; Function epilogue
__handle_info_end_91:
    LDI t0, 40
    ADD sp, sp, t0
    ; Deallocated 40 bytes for frame
    POP fp
    POP ra
    JMP ra                               ; Return from function

    ; ============================
    ; Function: __handle_clear
    ; ============================
__handle_clear:
    ; Pre-allocating 0 local variables
    ; Function prologue
    PUSH ra
    PUSH fp
    MOV fp, sp
    ; Total frame size: 0 bytes
    ; Expression statement
    ; Function call: console_clear
    ; Preparing function call: console_clear
    JAL console_clear, ra
    MOV t0, a0
    ; Function epilogue
__handle_clear_end_92:
    POP fp
    POP ra
    JMP ra                               ; Return from function

    ; =======================
    ; Function: __num_to_2digit_str
    ; =======================
__num_to_2digit_str:
    ; Pre-allocating 0 local variables
    ; Function prologue
    PUSH ra
    PUSH fp
    MOV fp, sp
    ; Total frame size: 0 bytes
    ; Variable access: buffer
    LDI t0, 24
    ADD t0, fp, t0
    LD t1, t0
    ; Literal value: 0
    LDI t0, 0
    ; Arithmetic operation: ADD
    ; Literal value: 48
    LDI t3, 48
    ; Arithmetic operation: DIV
    ; Variable access: num
    LDI t5, 16
    ADD t5, fp, t5
    LI t6, t5
    ; Literal value: 10
    LDI t5, 10
    DIV t4, t6, t5
    ADD t2, t3, t4
    ; Array index assignment
    LDI t3, 1
    MUL t3, t0, t3
    ADD t4, t1, t3
    SB t4, t2
    ; Variable access: buffer
    LDI t0, 24
    ADD t0, fp, t0
    LD t1, t0
    ; Literal value: 1
    LDI t0, 1
    ; Arithmetic operation: ADD
    ; Literal value: 48
    LDI t3, 48
    ; Arithmetic operation: MOD
    ; Variable access: num
    LDI t5, 16
    ADD t5, fp, t5
    LI t6, t5
    ; Literal value: 10
    LDI t5, 10
    MOD t4, t6, t5
    ADD t2, t3, t4
    ; Array index assignment
    LDI t3, 1
    MUL t3, t0, t3
    ADD t4, t1, t3
    SB t4, t2
    ; Function epilogue
__num_to_2digit_str_end_93:
    POP fp
    POP ra
    JMP ra                               ; Return from function

    ; ======================
    ; Function: __millis_to_date_str
    ; ======================
__millis_to_date_str:
    ; Pre-allocating 23 local variables
    ; Pre-allocated variable: totalSeconds (LONG)
    ; Pre-allocated variable: totalMinutes (LONG)
    ; Pre-allocated variable: totalHours (LONG)
    ; Pre-allocated variable: totalDays (LONG)
    ; Pre-allocated variable: seconds (INT)
    ; Pre-allocated variable: minutes (INT)
    ; Pre-allocated variable: hours (INT)
    ; Pre-allocated variable: year (INT)
    ; Pre-allocated variable: remainingDays (LONG)
    ; Pre-allocated variable: yearCalcComplete (INT)
    ; Pre-allocated variable: isLeapYear (INT)
    ; Pre-allocated variable: daysInYear (INT)
    ; Pre-allocated variable: dayOfYear (INT)
    ; Pre-allocated variable: months (PointerType[elementType=INT])
    ; Pre-allocated variable: month (INT)
    ; Pre-allocated variable: monthCalcComplete (INT)
    ; Pre-allocated variable: day (INT)
    ; Pre-allocated variable: dayStr (PointerType[elementType=BYTE])
    ; Pre-allocated variable: monthStr (PointerType[elementType=BYTE])
    ; Pre-allocated variable: hourStr (PointerType[elementType=BYTE])
    ; Pre-allocated variable: minuteStr (PointerType[elementType=BYTE])
    ; Pre-allocated variable: secondStr (PointerType[elementType=BYTE])
    ; Pre-allocated variable: yearStr (PointerType[elementType=BYTE])
    ; Function prologue
    PUSH ra
    PUSH fp
    MOV fp, sp
    ; Total frame size: 144 bytes
    LDI t0, 144
    SUB sp, sp, t0
    ; Allocated 144 bytes for stack frame
    ; Variable declaration: totalSeconds
    ; Arithmetic operation: DIV
    ; Variable access: millis
    LDI t1, 16
    ADD t1, fp, t1
    LD t2, t1
    ; Literal value: 1000
    LDI t1, 1000
    DIV t0, t2, t1
    LDI t1, -8
    ADD t1, fp, t1
    ST t1, t0
    ; Variable declaration: totalMinutes
    ; Arithmetic operation: DIV
    ; Variable access: totalSeconds
    LDI t1, -8
    ADD t1, fp, t1
    LD t2, t1
    ; Literal value: 60
    LDI t1, 60
    DIV t0, t2, t1
    LDI t1, -16
    ADD t1, fp, t1
    ST t1, t0
    ; Variable declaration: totalHours
    ; Arithmetic operation: DIV
    ; Variable access: totalMinutes
    LDI t1, -16
    ADD t1, fp, t1
    LD t2, t1
    ; Literal value: 60
    LDI t1, 60
    DIV t0, t2, t1
    LDI t1, -24
    ADD t1, fp, t1
    ST t1, t0
    ; Variable declaration: totalDays
    ; Arithmetic operation: DIV
    ; Variable access: totalHours
    LDI t1, -24
    ADD t1, fp, t1
    LD t2, t1
    ; Literal value: 24
    LDI t1, 24
    DIV t0, t2, t1
    LDI t1, -32
    ADD t1, fp, t1
    ST t1, t0
    ; Variable declaration: seconds
    ; Arithmetic operation: MOD
    ; Variable access: totalSeconds
    LDI t1, -8
    ADD t1, fp, t1
    LD t2, t1
    ; Literal value: 60
    LDI t1, 60
    MOD t0, t2, t1
    LDI t1, -36
    ADD t1, fp, t1
    SI t1, t0
    ; Variable declaration: minutes
    ; Arithmetic operation: MOD
    ; Variable access: totalMinutes
    LDI t1, -16
    ADD t1, fp, t1
    LD t2, t1
    ; Literal value: 60
    LDI t1, 60
    MOD t0, t2, t1
    LDI t1, -40
    ADD t1, fp, t1
    SI t1, t0
    ; Variable declaration: hours
    ; Arithmetic operation: MOD
    ; Variable access: totalHours
    LDI t1, -24
    ADD t1, fp, t1
    LD t2, t1
    ; Literal value: 24
    LDI t1, 24
    MOD t0, t2, t1
    LDI t1, -44
    ADD t1, fp, t1
    SI t1, t0
    ; Variable declaration: year
    ; Literal value: 1970
    LDI t0, 1970
    LDI t1, -48
    ADD t1, fp, t1
    SI t1, t0
    ; Variable declaration: remainingDays
    ; Variable access: totalDays
    LDI t0, -32
    ADD t0, fp, t0
    LD t1, t0
    LDI t0, -56
    ADD t0, fp, t0
    ST t0, t1
    ; Variable declaration: yearCalcComplete
    ; Literal value: 0
    LDI t0, 0
    LDI t1, -60
    ADD t1, fp, t1
    SI t1, t0
    ; While loop
loop_95:
    ; Comparison: Variable(name=yearCalcComplete, type=INT) EQ Literal(value=0, type=LONG)
    ; Variable access: yearCalcComplete
    LDI t0, -60
    ADD t0, fp, t0
    LI t1, t0
    ; Literal value: 0
    LDI t0, 0
    SUB t2, t1, t0
    ; Jump if t1 != t0
    JNZ endloop_96, t2
    ; Variable declaration: isLeapYear
    ; Literal value: 0
    LDI t0, 0
    LDI t1, -64
    ADD t1, fp, t1
    SI t1, t0
    ; If statement
    ; Comparison: BinaryOp(op=MOD, left=Variable(name=year, type=INT), right=Literal(value=4, type=LONG)) EQ Literal(value=0, type=LONG)
    ; Arithmetic operation: MOD
    ; Variable access: year
    LDI t1, -48
    ADD t1, fp, t1
    LI t2, t1
    ; Literal value: 4
    LDI t1, 4
    MOD t0, t2, t1
    ; Literal value: 0
    LDI t1, 0
    SUB t2, t0, t1
    ; Jump if t0 != t1
    JNZ else_97, t2
    ; If statement
    ; Logical OR: BinaryOp(op=NE, left=BinaryOp(op=MOD, left=Variable(name=year, type=INT), right=Literal(value=100, type=LONG)), right=Literal(value=0, type=LONG)) || BinaryOp(op=EQ, left=BinaryOp(op=MOD, left=Variable(name=year, type=INT), right=Literal(value=400, type=LONG)), right=Literal(value=0, type=LONG))
    ; Comparison: BinaryOp(op=MOD, left=Variable(name=year, type=INT), right=Literal(value=100, type=LONG)) NE Literal(value=0, type=LONG)
    ; Arithmetic operation: MOD
    ; Variable access: year
    LDI t1, -48
    ADD t1, fp, t1
    LI t2, t1
    ; Literal value: 100
    LDI t1, 100
    MOD t0, t2, t1
    ; Literal value: 0
    LDI t1, 0
    SUB t2, t0, t1
    ; Jump if t0 == t1
    JZ or_eval_right_101, t2
    JMP or_skip_102
or_eval_right_101:
    ; Comparison: BinaryOp(op=MOD, left=Variable(name=year, type=INT), right=Literal(value=400, type=LONG)) EQ Literal(value=0, type=LONG)
    ; Arithmetic operation: MOD
    ; Variable access: year
    LDI t1, -48
    ADD t1, fp, t1
    LI t2, t1
    ; Literal value: 400
    LDI t1, 400
    MOD t0, t2, t1
    ; Literal value: 0
    LDI t1, 0
    SUB t2, t0, t1
    ; Jump if t0 != t1
    JNZ else_99, t2
or_skip_102:
    ; Variable assignment: isLeapYear
    ; Literal value: 1
    LDI t0, 1
    LDI t1, -64
    ADD t1, fp, t1
    SI t1, t0
else_99:
else_97:
    ; Variable declaration: daysInYear
    ; Literal value: 365
    LDI t0, 365
    LDI t1, -68
    ADD t1, fp, t1
    SI t1, t0
    ; If statement
    ; Comparison: Variable(name=isLeapYear, type=INT) EQ Literal(value=1, type=LONG)
    ; Variable access: isLeapYear
    LDI t0, -64
    ADD t0, fp, t0
    LI t1, t0
    ; Literal value: 1
    LDI t0, 1
    SUB t2, t1, t0
    ; Jump if t1 != t0
    JNZ else_103, t2
    ; Variable assignment: daysInYear
    ; Literal value: 366
    LDI t0, 366
    LDI t1, -68
    ADD t1, fp, t1
    SI t1, t0
else_103:
    ; If statement
    ; Comparison: Variable(name=remainingDays, type=LONG) GE Variable(name=daysInYear, type=INT)
    ; Variable access: remainingDays
    LDI t0, -56
    ADD t0, fp, t0
    LD t1, t0
    ; Variable access: daysInYear
    LDI t0, -68
    ADD t0, fp, t0
    LI t2, t0
    SUB t0, t1, t2
    ; Jump if t1 < t2
    JPN else_105, t0
    ; Variable assignment: remainingDays
    ; Arithmetic operation: SUB
    ; Variable access: remainingDays
    LDI t1, -56
    ADD t1, fp, t1
    LD t2, t1
    ; Variable access: daysInYear
    LDI t1, -68
    ADD t1, fp, t1
    LI t3, t1
    SUB t0, t2, t3
    LDI t1, -56
    ADD t1, fp, t1
    ST t1, t0
    ; Variable assignment: year
    ; Arithmetic operation: ADD
    ; Variable access: year
    LDI t1, -48
    ADD t1, fp, t1
    LI t2, t1
    ; Literal value: 1
    LDI t1, 1
    ADD t0, t2, t1
    LDI t1, -48
    ADD t1, fp, t1
    SI t1, t0
    JMP endif_106
else_105:
    ; Variable assignment: yearCalcComplete
    ; Literal value: 1
    LDI t0, 1
    LDI t1, -60
    ADD t1, fp, t1
    SI t1, t0
endif_106:
    JMP loop_95
endloop_96:
    ; Variable declaration: dayOfYear
    ; Variable access: remainingDays
    LDI t0, -56
    ADD t0, fp, t0
    LD t1, t0
    LDI t0, -72
    ADD t0, fp, t0
    SI t0, t1
    ; Variable declaration: months
    ; Function call: malloc
    ; Preparing function call: malloc
    ; Evaluating argument 0
    ; Arithmetic operation: MUL
    ; Literal value: 4
    LDI t1, 4
    ; Literal value: 12
    LDI t2, 12
    MUL t0, t1, t2
    PUSH t0
    JAL malloc, ra
    LDI t0, 8
    ADD sp, sp, t0
    ; Cleaned up 1 arguments from stack
    MOV t0, a0
    LDI t1, -80
    ADD t1, fp, t1
    ST t1, t0
    ; Variable access: months
    LDI t0, -80
    ADD t0, fp, t0
    LD t1, t0
    ; Literal value: 0
    LDI t0, 0
    ; Literal value: 31
    LDI t2, 31
    ; Array index assignment
    LDI t3, 4
    MUL t3, t0, t3
    ADD t4, t1, t3
    SI t4, t2
    ; Variable access: months
    LDI t0, -80
    ADD t0, fp, t0
    LD t1, t0
    ; Literal value: 1
    LDI t0, 1
    ; Literal value: 28
    LDI t2, 28
    ; Array index assignment
    LDI t3, 4
    MUL t3, t0, t3
    ADD t4, t1, t3
    SI t4, t2
    ; Variable access: months
    LDI t0, -80
    ADD t0, fp, t0
    LD t1, t0
    ; Literal value: 2
    LDI t0, 2
    ; Literal value: 31
    LDI t2, 31
    ; Array index assignment
    LDI t3, 4
    MUL t3, t0, t3
    ADD t4, t1, t3
    SI t4, t2
    ; Variable access: months
    LDI t0, -80
    ADD t0, fp, t0
    LD t1, t0
    ; Literal value: 3
    LDI t0, 3
    ; Literal value: 30
    LDI t2, 30
    ; Array index assignment
    LDI t3, 4
    MUL t3, t0, t3
    ADD t4, t1, t3
    SI t4, t2
    ; Variable access: months
    LDI t0, -80
    ADD t0, fp, t0
    LD t1, t0
    ; Literal value: 4
    LDI t0, 4
    ; Literal value: 31
    LDI t2, 31
    ; Array index assignment
    LDI t3, 4
    MUL t3, t0, t3
    ADD t4, t1, t3
    SI t4, t2
    ; Variable access: months
    LDI t0, -80
    ADD t0, fp, t0
    LD t1, t0
    ; Literal value: 5
    LDI t0, 5
    ; Literal value: 30
    LDI t2, 30
    ; Array index assignment
    LDI t3, 4
    MUL t3, t0, t3
    ADD t4, t1, t3
    SI t4, t2
    ; Variable access: months
    LDI t0, -80
    ADD t0, fp, t0
    LD t1, t0
    ; Literal value: 6
    LDI t0, 6
    ; Literal value: 31
    LDI t2, 31
    ; Array index assignment
    LDI t3, 4
    MUL t3, t0, t3
    ADD t4, t1, t3
    SI t4, t2
    ; Variable access: months
    LDI t0, -80
    ADD t0, fp, t0
    LD t1, t0
    ; Literal value: 7
    LDI t0, 7
    ; Literal value: 31
    LDI t2, 31
    ; Array index assignment
    LDI t3, 4
    MUL t3, t0, t3
    ADD t4, t1, t3
    SI t4, t2
    ; Variable access: months
    LDI t0, -80
    ADD t0, fp, t0
    LD t1, t0
    ; Literal value: 8
    LDI t0, 8
    ; Literal value: 30
    LDI t2, 30
    ; Array index assignment
    LDI t3, 4
    MUL t3, t0, t3
    ADD t4, t1, t3
    SI t4, t2
    ; Variable access: months
    LDI t0, -80
    ADD t0, fp, t0
    LD t1, t0
    ; Literal value: 9
    LDI t0, 9
    ; Literal value: 31
    LDI t2, 31
    ; Array index assignment
    LDI t3, 4
    MUL t3, t0, t3
    ADD t4, t1, t3
    SI t4, t2
    ; Variable access: months
    LDI t0, -80
    ADD t0, fp, t0
    LD t1, t0
    ; Literal value: 10
    LDI t0, 10
    ; Literal value: 30
    LDI t2, 30
    ; Array index assignment
    LDI t3, 4
    MUL t3, t0, t3
    ADD t4, t1, t3
    SI t4, t2
    ; Variable access: months
    LDI t0, -80
    ADD t0, fp, t0
    LD t1, t0
    ; Literal value: 11
    LDI t0, 11
    ; Literal value: 31
    LDI t2, 31
    ; Array index assignment
    LDI t3, 4
    MUL t3, t0, t3
    ADD t4, t1, t3
    SI t4, t2
    ; If statement
    ; Logical AND: BinaryOp(op=EQ, left=BinaryOp(op=MOD, left=Variable(name=year, type=INT), right=Literal(value=4, type=LONG)), right=Literal(value=0, type=LONG)) && BinaryOp(op=LOGICAL_OR, left=BinaryOp(op=NE, left=BinaryOp(op=MOD, left=Variable(name=year, type=INT), right=Literal(value=100, type=LONG)), right=Literal(value=0, type=LONG)), right=BinaryOp(op=EQ, left=BinaryOp(op=MOD, left=Variable(name=year, type=INT), right=Literal(value=400, type=LONG)), right=Literal(value=0, type=LONG)))
    ; Comparison: BinaryOp(op=MOD, left=Variable(name=year, type=INT), right=Literal(value=4, type=LONG)) EQ Literal(value=0, type=LONG)
    ; Arithmetic operation: MOD
    ; Variable access: year
    LDI t1, -48
    ADD t1, fp, t1
    LI t2, t1
    ; Literal value: 4
    LDI t1, 4
    MOD t0, t2, t1
    ; Literal value: 0
    LDI t1, 0
    SUB t2, t0, t1
    ; Jump if t0 != t1
    JNZ else_107, t2
    ; Logical OR: BinaryOp(op=NE, left=BinaryOp(op=MOD, left=Variable(name=year, type=INT), right=Literal(value=100, type=LONG)), right=Literal(value=0, type=LONG)) || BinaryOp(op=EQ, left=BinaryOp(op=MOD, left=Variable(name=year, type=INT), right=Literal(value=400, type=LONG)), right=Literal(value=0, type=LONG))
    ; Comparison: BinaryOp(op=MOD, left=Variable(name=year, type=INT), right=Literal(value=100, type=LONG)) NE Literal(value=0, type=LONG)
    ; Arithmetic operation: MOD
    ; Variable access: year
    LDI t1, -48
    ADD t1, fp, t1
    LI t2, t1
    ; Literal value: 100
    LDI t1, 100
    MOD t0, t2, t1
    ; Literal value: 0
    LDI t1, 0
    SUB t2, t0, t1
    ; Jump if t0 == t1
    JZ or_eval_right_109, t2
    JMP or_skip_110
or_eval_right_109:
    ; Comparison: BinaryOp(op=MOD, left=Variable(name=year, type=INT), right=Literal(value=400, type=LONG)) EQ Literal(value=0, type=LONG)
    ; Arithmetic operation: MOD
    ; Variable access: year
    LDI t1, -48
    ADD t1, fp, t1
    LI t2, t1
    ; Literal value: 400
    LDI t1, 400
    MOD t0, t2, t1
    ; Literal value: 0
    LDI t1, 0
    SUB t2, t0, t1
    ; Jump if t0 != t1
    JNZ else_107, t2
or_skip_110:
    ; Variable access: months
    LDI t0, -80
    ADD t0, fp, t0
    LD t1, t0
    ; Literal value: 1
    LDI t0, 1
    ; Literal value: 29
    LDI t2, 29
    ; Array index assignment
    LDI t3, 4
    MUL t3, t0, t3
    ADD t4, t1, t3
    SI t4, t2
else_107:
    ; Variable declaration: month
    ; Literal value: 0
    LDI t0, 0
    LDI t1, -84
    ADD t1, fp, t1
    SI t1, t0
    ; Variable declaration: monthCalcComplete
    ; Literal value: 0
    LDI t0, 0
    LDI t1, -88
    ADD t1, fp, t1
    SI t1, t0
    ; While loop
loop_111:
    ; Logical AND: BinaryOp(op=EQ, left=Variable(name=monthCalcComplete, type=INT), right=Literal(value=0, type=LONG)) && BinaryOp(op=LT, left=Variable(name=month, type=INT), right=Literal(value=12, type=LONG))
    ; Comparison: Variable(name=monthCalcComplete, type=INT) EQ Literal(value=0, type=LONG)
    ; Variable access: monthCalcComplete
    LDI t0, -88
    ADD t0, fp, t0
    LI t1, t0
    ; Literal value: 0
    LDI t0, 0
    SUB t2, t1, t0
    ; Jump if t1 != t0
    JNZ endloop_112, t2
    ; Comparison: Variable(name=month, type=INT) LT Literal(value=12, type=LONG)
    ; Variable access: month
    LDI t0, -84
    ADD t0, fp, t0
    LI t1, t0
    ; Literal value: 12
    LDI t0, 12
    SUB t2, t1, t0
    ; Jump if t1 >= t0
    JPN skip_ge_113, t2
    JMP endloop_112
skip_ge_113:
    ; If statement
    ; Comparison: Variable(name=dayOfYear, type=INT) LT Variable(name=months, type=PointerType[elementType=INT])[Variable(name=month, type=INT)]
    ; Variable access: dayOfYear
    LDI t0, -72
    ADD t0, fp, t0
    LI t1, t0
    ; Array indexing operation
    ; Variable access: months
    LDI t0, -80
    ADD t0, fp, t0
    LD t2, t0
    ; Variable access: month
    LDI t0, -84
    ADD t0, fp, t0
    LI t3, t0
    LDI t0, 4
    MUL t0, t3, t0
    ADD t4, t2, t0
    LI t5, t4
    SUB t0, t1, t5
    ; Jump if t1 >= t5
    JPN skip_ge_116, t0
    JMP else_114
skip_ge_116:
    ; Variable assignment: monthCalcComplete
    ; Literal value: 1
    LDI t0, 1
    LDI t1, -88
    ADD t1, fp, t1
    SI t1, t0
    JMP endif_115
else_114:
    ; Variable assignment: dayOfYear
    ; Arithmetic operation: SUB
    ; Variable access: dayOfYear
    LDI t1, -72
    ADD t1, fp, t1
    LI t2, t1
    ; Array indexing operation
    ; Variable access: months
    LDI t1, -80
    ADD t1, fp, t1
    LD t3, t1
    ; Variable access: month
    LDI t1, -84
    ADD t1, fp, t1
    LI t4, t1
    LDI t1, 4
    MUL t1, t4, t1
    ADD t5, t3, t1
    LI t6, t5
    SUB t0, t2, t6
    LDI t1, -72
    ADD t1, fp, t1
    SI t1, t0
    ; Variable assignment: month
    ; Arithmetic operation: ADD
    ; Variable access: month
    LDI t1, -84
    ADD t1, fp, t1
    LI t2, t1
    ; Literal value: 1
    LDI t1, 1
    ADD t0, t2, t1
    LDI t1, -84
    ADD t1, fp, t1
    SI t1, t0
endif_115:
    JMP loop_111
endloop_112:
    ; Variable declaration: day
    ; Arithmetic operation: ADD
    ; Variable access: dayOfYear
    LDI t1, -72
    ADD t1, fp, t1
    LI t2, t1
    ; Literal value: 1
    LDI t1, 1
    ADD t0, t2, t1
    LDI t1, -92
    ADD t1, fp, t1
    SI t1, t0
    ; Variable assignment: month
    ; Arithmetic operation: ADD
    ; Variable access: month
    LDI t1, -84
    ADD t1, fp, t1
    LI t2, t1
    ; Literal value: 1
    LDI t1, 1
    ADD t0, t2, t1
    LDI t1, -84
    ADD t1, fp, t1
    SI t1, t0
    ; Variable declaration: dayStr
    ; Function call: malloc
    ; Preparing function call: malloc
    ; Evaluating argument 0
    ; Literal value: 2
    LDI t0, 2
    PUSH t0
    JAL malloc, ra
    LDI t0, 8
    ADD sp, sp, t0
    ; Cleaned up 1 arguments from stack
    MOV t0, a0
    LDI t1, -100
    ADD t1, fp, t1
    ST t1, t0
    ; Expression statement
    ; Function call: __num_to_2digit_str
    ; Preparing function call: __num_to_2digit_str
    ; Evaluating argument 0
    ; Variable access: day
    LDI t0, -92
    ADD t0, fp, t0
    LI t1, t0
    ; Evaluating argument 1
    ; Variable access: dayStr
    LDI t0, -100
    ADD t0, fp, t0
    LD t2, t0
    PUSH t2
    PUSH t1
    JAL __num_to_2digit_str, ra
    LDI t0, 16
    ADD sp, sp, t0
    ; Cleaned up 2 arguments from stack
    MOV t0, a0
    ; Variable declaration: monthStr
    ; Function call: malloc
    ; Preparing function call: malloc
    ; Evaluating argument 0
    ; Literal value: 2
    LDI t0, 2
    PUSH t0
    JAL malloc, ra
    LDI t0, 8
    ADD sp, sp, t0
    ; Cleaned up 1 arguments from stack
    MOV t0, a0
    LDI t1, -108
    ADD t1, fp, t1
    ST t1, t0
    ; Expression statement
    ; Function call: __num_to_2digit_str
    ; Preparing function call: __num_to_2digit_str
    ; Evaluating argument 0
    ; Variable access: month
    LDI t0, -84
    ADD t0, fp, t0
    LI t1, t0
    ; Evaluating argument 1
    ; Variable access: monthStr
    LDI t0, -108
    ADD t0, fp, t0
    LD t2, t0
    PUSH t2
    PUSH t1
    JAL __num_to_2digit_str, ra
    LDI t0, 16
    ADD sp, sp, t0
    ; Cleaned up 2 arguments from stack
    MOV t0, a0
    ; Variable declaration: hourStr
    ; Function call: malloc
    ; Preparing function call: malloc
    ; Evaluating argument 0
    ; Literal value: 2
    LDI t0, 2
    PUSH t0
    JAL malloc, ra
    LDI t0, 8
    ADD sp, sp, t0
    ; Cleaned up 1 arguments from stack
    MOV t0, a0
    LDI t1, -116
    ADD t1, fp, t1
    ST t1, t0
    ; Expression statement
    ; Function call: __num_to_2digit_str
    ; Preparing function call: __num_to_2digit_str
    ; Evaluating argument 0
    ; Variable access: hours
    LDI t0, -44
    ADD t0, fp, t0
    LI t1, t0
    ; Evaluating argument 1
    ; Variable access: hourStr
    LDI t0, -116
    ADD t0, fp, t0
    LD t2, t0
    PUSH t2
    PUSH t1
    JAL __num_to_2digit_str, ra
    LDI t0, 16
    ADD sp, sp, t0
    ; Cleaned up 2 arguments from stack
    MOV t0, a0
    ; Variable declaration: minuteStr
    ; Function call: malloc
    ; Preparing function call: malloc
    ; Evaluating argument 0
    ; Literal value: 2
    LDI t0, 2
    PUSH t0
    JAL malloc, ra
    LDI t0, 8
    ADD sp, sp, t0
    ; Cleaned up 1 arguments from stack
    MOV t0, a0
    LDI t1, -124
    ADD t1, fp, t1
    ST t1, t0
    ; Expression statement
    ; Function call: __num_to_2digit_str
    ; Preparing function call: __num_to_2digit_str
    ; Evaluating argument 0
    ; Variable access: minutes
    LDI t0, -40
    ADD t0, fp, t0
    LI t1, t0
    ; Evaluating argument 1
    ; Variable access: minuteStr
    LDI t0, -124
    ADD t0, fp, t0
    LD t2, t0
    PUSH t2
    PUSH t1
    JAL __num_to_2digit_str, ra
    LDI t0, 16
    ADD sp, sp, t0
    ; Cleaned up 2 arguments from stack
    MOV t0, a0
    ; Variable declaration: secondStr
    ; Function call: malloc
    ; Preparing function call: malloc
    ; Evaluating argument 0
    ; Literal value: 2
    LDI t0, 2
    PUSH t0
    JAL malloc, ra
    LDI t0, 8
    ADD sp, sp, t0
    ; Cleaned up 1 arguments from stack
    MOV t0, a0
    LDI t1, -132
    ADD t1, fp, t1
    ST t1, t0
    ; Expression statement
    ; Function call: __num_to_2digit_str
    ; Preparing function call: __num_to_2digit_str
    ; Evaluating argument 0
    ; Variable access: seconds
    LDI t0, -36
    ADD t0, fp, t0
    LI t1, t0
    ; Evaluating argument 1
    ; Variable access: secondStr
    LDI t0, -132
    ADD t0, fp, t0
    LD t2, t0
    PUSH t2
    PUSH t1
    JAL __num_to_2digit_str, ra
    LDI t0, 16
    ADD sp, sp, t0
    ; Cleaned up 2 arguments from stack
    MOV t0, a0
    ; Variable declaration: yearStr
    ; Function call: malloc
    ; Preparing function call: malloc
    ; Evaluating argument 0
    ; Literal value: 4
    LDI t0, 4
    PUSH t0
    JAL malloc, ra
    LDI t0, 8
    ADD sp, sp, t0
    ; Cleaned up 1 arguments from stack
    MOV t0, a0
    LDI t1, -140
    ADD t1, fp, t1
    ST t1, t0
    ; Variable access: yearStr
    LDI t0, -140
    ADD t0, fp, t0
    LD t1, t0
    ; Literal value: 0
    LDI t0, 0
    ; Arithmetic operation: ADD
    ; Literal value: 48
    LDI t3, 48
    ; Arithmetic operation: DIV
    ; Variable access: year
    LDI t5, -48
    ADD t5, fp, t5
    LI t6, t5
    ; Literal value: 1000
    LDI t5, 1000
    DIV t4, t6, t5
    ADD t2, t3, t4
    ; Array index assignment
    LDI t3, 1
    MUL t3, t0, t3
    ADD t4, t1, t3
    SB t4, t2
    ; Variable access: yearStr
    LDI t0, -140
    ADD t0, fp, t0
    LD t1, t0
    ; Literal value: 1
    LDI t0, 1
    ; Arithmetic operation: ADD
    ; Literal value: 48
    LDI t3, 48
    ; Arithmetic operation: MOD
    ; Arithmetic operation: DIV
    ; Variable access: year
    LDI t6, -48
    ADD t6, fp, t6
    LI t7, t6
    ; Literal value: 100
    LDI t6, 100
    DIV t5, t7, t6
    ; Literal value: 10
    LDI t6, 10
    MOD t4, t5, t6
    ADD t2, t3, t4
    ; Array index assignment
    LDI t3, 1
    MUL t3, t0, t3
    ADD t4, t1, t3
    SB t4, t2
    ; Variable access: yearStr
    LDI t0, -140
    ADD t0, fp, t0
    LD t1, t0
    ; Literal value: 2
    LDI t0, 2
    ; Arithmetic operation: ADD
    ; Literal value: 48
    LDI t3, 48
    ; Arithmetic operation: MOD
    ; Arithmetic operation: DIV
    ; Variable access: year
    LDI t6, -48
    ADD t6, fp, t6
    LI t7, t6
    ; Literal value: 10
    LDI t6, 10
    DIV t5, t7, t6
    ; Literal value: 10
    LDI t6, 10
    MOD t4, t5, t6
    ADD t2, t3, t4
    ; Array index assignment
    LDI t3, 1
    MUL t3, t0, t3
    ADD t4, t1, t3
    SB t4, t2
    ; Variable access: yearStr
    LDI t0, -140
    ADD t0, fp, t0
    LD t1, t0
    ; Literal value: 3
    LDI t0, 3
    ; Arithmetic operation: ADD
    ; Literal value: 48
    LDI t3, 48
    ; Arithmetic operation: MOD
    ; Variable access: year
    LDI t5, -48
    ADD t5, fp, t5
    LI t6, t5
    ; Literal value: 10
    LDI t5, 10
    MOD t4, t6, t5
    ADD t2, t3, t4
    ; Array index assignment
    LDI t3, 1
    MUL t3, t0, t3
    ADD t4, t1, t3
    SB t4, t2
    ; Variable access: buffer
    LDI t0, 24
    ADD t0, fp, t0
    LD t1, t0
    ; Literal value: 0
    LDI t0, 0
    ; Array indexing operation
    ; Variable access: dayStr
    LDI t2, -100
    ADD t2, fp, t2
    LD t3, t2
    ; Literal value: 0
    LDI t2, 0
    LDI t4, 1
    MUL t4, t2, t4
    ADD t5, t3, t4
    LB t6, t5
    ; Array index assignment
    LDI t2, 1
    MUL t2, t0, t2
    ADD t3, t1, t2
    SB t3, t6
    ; Variable access: buffer
    LDI t0, 24
    ADD t0, fp, t0
    LD t1, t0
    ; Literal value: 1
    LDI t0, 1
    ; Array indexing operation
    ; Variable access: dayStr
    LDI t2, -100
    ADD t2, fp, t2
    LD t3, t2
    ; Literal value: 1
    LDI t2, 1
    LDI t4, 1
    MUL t4, t2, t4
    ADD t5, t3, t4
    LB t6, t5
    ; Array index assignment
    LDI t2, 1
    MUL t2, t0, t2
    ADD t3, t1, t2
    SB t3, t6
    ; Variable access: buffer
    LDI t0, 24
    ADD t0, fp, t0
    LD t1, t0
    ; Literal value: 2
    LDI t0, 2
    ; Literal value: 47
    LDI t2, 47
    ; Array index assignment
    LDI t3, 1
    MUL t3, t0, t3
    ADD t4, t1, t3
    SB t4, t2
    ; Variable access: buffer
    LDI t0, 24
    ADD t0, fp, t0
    LD t1, t0
    ; Literal value: 3
    LDI t0, 3
    ; Array indexing operation
    ; Variable access: monthStr
    LDI t2, -108
    ADD t2, fp, t2
    LD t3, t2
    ; Literal value: 0
    LDI t2, 0
    LDI t4, 1
    MUL t4, t2, t4
    ADD t5, t3, t4
    LB t6, t5
    ; Array index assignment
    LDI t2, 1
    MUL t2, t0, t2
    ADD t3, t1, t2
    SB t3, t6
    ; Variable access: buffer
    LDI t0, 24
    ADD t0, fp, t0
    LD t1, t0
    ; Literal value: 4
    LDI t0, 4
    ; Array indexing operation
    ; Variable access: monthStr
    LDI t2, -108
    ADD t2, fp, t2
    LD t3, t2
    ; Literal value: 1
    LDI t2, 1
    LDI t4, 1
    MUL t4, t2, t4
    ADD t5, t3, t4
    LB t6, t5
    ; Array index assignment
    LDI t2, 1
    MUL t2, t0, t2
    ADD t3, t1, t2
    SB t3, t6
    ; Variable access: buffer
    LDI t0, 24
    ADD t0, fp, t0
    LD t1, t0
    ; Literal value: 5
    LDI t0, 5
    ; Literal value: 47
    LDI t2, 47
    ; Array index assignment
    LDI t3, 1
    MUL t3, t0, t3
    ADD t4, t1, t3
    SB t4, t2
    ; Variable access: buffer
    LDI t0, 24
    ADD t0, fp, t0
    LD t1, t0
    ; Literal value: 6
    LDI t0, 6
    ; Array indexing operation
    ; Variable access: yearStr
    LDI t2, -140
    ADD t2, fp, t2
    LD t3, t2
    ; Literal value: 0
    LDI t2, 0
    LDI t4, 1
    MUL t4, t2, t4
    ADD t5, t3, t4
    LB t6, t5
    ; Array index assignment
    LDI t2, 1
    MUL t2, t0, t2
    ADD t3, t1, t2
    SB t3, t6
    ; Variable access: buffer
    LDI t0, 24
    ADD t0, fp, t0
    LD t1, t0
    ; Literal value: 7
    LDI t0, 7
    ; Array indexing operation
    ; Variable access: yearStr
    LDI t2, -140
    ADD t2, fp, t2
    LD t3, t2
    ; Literal value: 1
    LDI t2, 1
    LDI t4, 1
    MUL t4, t2, t4
    ADD t5, t3, t4
    LB t6, t5
    ; Array index assignment
    LDI t2, 1
    MUL t2, t0, t2
    ADD t3, t1, t2
    SB t3, t6
    ; Variable access: buffer
    LDI t0, 24
    ADD t0, fp, t0
    LD t1, t0
    ; Literal value: 8
    LDI t0, 8
    ; Array indexing operation
    ; Variable access: yearStr
    LDI t2, -140
    ADD t2, fp, t2
    LD t3, t2
    ; Literal value: 2
    LDI t2, 2
    LDI t4, 1
    MUL t4, t2, t4
    ADD t5, t3, t4
    LB t6, t5
    ; Array index assignment
    LDI t2, 1
    MUL t2, t0, t2
    ADD t3, t1, t2
    SB t3, t6
    ; Variable access: buffer
    LDI t0, 24
    ADD t0, fp, t0
    LD t1, t0
    ; Literal value: 9
    LDI t0, 9
    ; Array indexing operation
    ; Variable access: yearStr
    LDI t2, -140
    ADD t2, fp, t2
    LD t3, t2
    ; Literal value: 3
    LDI t2, 3
    LDI t4, 1
    MUL t4, t2, t4
    ADD t5, t3, t4
    LB t6, t5
    ; Array index assignment
    LDI t2, 1
    MUL t2, t0, t2
    ADD t3, t1, t2
    SB t3, t6
    ; Variable access: buffer
    LDI t0, 24
    ADD t0, fp, t0
    LD t1, t0
    ; Literal value: 10
    LDI t0, 10
    ; Literal value: 32
    LDI t2, 32
    ; Array index assignment
    LDI t3, 1
    MUL t3, t0, t3
    ADD t4, t1, t3
    SB t4, t2
    ; Variable access: buffer
    LDI t0, 24
    ADD t0, fp, t0
    LD t1, t0
    ; Literal value: 11
    LDI t0, 11
    ; Array indexing operation
    ; Variable access: hourStr
    LDI t2, -116
    ADD t2, fp, t2
    LD t3, t2
    ; Literal value: 0
    LDI t2, 0
    LDI t4, 1
    MUL t4, t2, t4
    ADD t5, t3, t4
    LB t6, t5
    ; Array index assignment
    LDI t2, 1
    MUL t2, t0, t2
    ADD t3, t1, t2
    SB t3, t6
    ; Variable access: buffer
    LDI t0, 24
    ADD t0, fp, t0
    LD t1, t0
    ; Literal value: 12
    LDI t0, 12
    ; Array indexing operation
    ; Variable access: hourStr
    LDI t2, -116
    ADD t2, fp, t2
    LD t3, t2
    ; Literal value: 1
    LDI t2, 1
    LDI t4, 1
    MUL t4, t2, t4
    ADD t5, t3, t4
    LB t6, t5
    ; Array index assignment
    LDI t2, 1
    MUL t2, t0, t2
    ADD t3, t1, t2
    SB t3, t6
    ; Variable access: buffer
    LDI t0, 24
    ADD t0, fp, t0
    LD t1, t0
    ; Literal value: 13
    LDI t0, 13
    ; Literal value: 58
    LDI t2, 58
    ; Array index assignment
    LDI t3, 1
    MUL t3, t0, t3
    ADD t4, t1, t3
    SB t4, t2
    ; Variable access: buffer
    LDI t0, 24
    ADD t0, fp, t0
    LD t1, t0
    ; Literal value: 14
    LDI t0, 14
    ; Array indexing operation
    ; Variable access: minuteStr
    LDI t2, -124
    ADD t2, fp, t2
    LD t3, t2
    ; Literal value: 0
    LDI t2, 0
    LDI t4, 1
    MUL t4, t2, t4
    ADD t5, t3, t4
    LB t6, t5
    ; Array index assignment
    LDI t2, 1
    MUL t2, t0, t2
    ADD t3, t1, t2
    SB t3, t6
    ; Variable access: buffer
    LDI t0, 24
    ADD t0, fp, t0
    LD t1, t0
    ; Literal value: 15
    LDI t0, 15
    ; Array indexing operation
    ; Variable access: minuteStr
    LDI t2, -124
    ADD t2, fp, t2
    LD t3, t2
    ; Literal value: 1
    LDI t2, 1
    LDI t4, 1
    MUL t4, t2, t4
    ADD t5, t3, t4
    LB t6, t5
    ; Array index assignment
    LDI t2, 1
    MUL t2, t0, t2
    ADD t3, t1, t2
    SB t3, t6
    ; Variable access: buffer
    LDI t0, 24
    ADD t0, fp, t0
    LD t1, t0
    ; Literal value: 16
    LDI t0, 16
    ; Literal value: 58
    LDI t2, 58
    ; Array index assignment
    LDI t3, 1
    MUL t3, t0, t3
    ADD t4, t1, t3
    SB t4, t2
    ; Variable access: buffer
    LDI t0, 24
    ADD t0, fp, t0
    LD t1, t0
    ; Literal value: 17
    LDI t0, 17
    ; Array indexing operation
    ; Variable access: secondStr
    LDI t2, -132
    ADD t2, fp, t2
    LD t3, t2
    ; Literal value: 0
    LDI t2, 0
    LDI t4, 1
    MUL t4, t2, t4
    ADD t5, t3, t4
    LB t6, t5
    ; Array index assignment
    LDI t2, 1
    MUL t2, t0, t2
    ADD t3, t1, t2
    SB t3, t6
    ; Variable access: buffer
    LDI t0, 24
    ADD t0, fp, t0
    LD t1, t0
    ; Literal value: 18
    LDI t0, 18
    ; Array indexing operation
    ; Variable access: secondStr
    LDI t2, -132
    ADD t2, fp, t2
    LD t3, t2
    ; Literal value: 1
    LDI t2, 1
    LDI t4, 1
    MUL t4, t2, t4
    ADD t5, t3, t4
    LB t6, t5
    ; Array index assignment
    LDI t2, 1
    MUL t2, t0, t2
    ADD t3, t1, t2
    SB t3, t6
    ; Variable access: buffer
    LDI t0, 24
    ADD t0, fp, t0
    LD t1, t0
    ; Literal value: 19
    LDI t0, 19
    ; Literal value: 0
    LDI t2, 0
    ; Array index assignment
    LDI t3, 1
    MUL t3, t0, t3
    ADD t4, t1, t3
    SB t4, t2
    ; Function epilogue
__millis_to_date_str_end_94:
    LDI t0, 144
    ADD sp, sp, t0
    ; Deallocated 144 bytes for frame
    POP fp
    POP ra
    JMP ra                               ; Return from function

    ; =============================
    ; Function: __handle_date
    ; =============================
__handle_date:
    ; Pre-allocating 4 local variables
    ; Pre-allocated variable: currentTime (LONG)
    ; Pre-allocated variable: dateBuffer (PointerType[elementType=BYTE])
    ; Pre-allocated variable: msg1Len (INT)
    ; Pre-allocated variable: msg1 (PointerType[elementType=BYTE])
    ; Function prologue
    PUSH ra
    PUSH fp
    MOV fp, sp
    ; Total frame size: 32 bytes
    LDI t0, 32
    SUB sp, sp, t0
    ; Allocated 32 bytes for stack frame
    ; Variable declaration: currentTime
    ; Dereference operation
    ; Arithmetic operation: ADD
    ; Variable access: __MMIO_BASE
    LDI t2, 56
    ADD t2, gp, t2
    LD t3, t2
    ; Variable access: __TIME_MILLIS_OFFSET
    LDI t2, 80
    ADD t2, gp, t2
    LD t4, t2
    ADD t1, t3, t4
    LD t0, t1
    LDI t1, -8
    ADD t1, fp, t1
    ST t1, t0
    ; Variable declaration: dateBuffer
    ; Function call: malloc
    ; Preparing function call: malloc
    ; Evaluating argument 0
    ; Literal value: 20
    LDI t0, 20
    PUSH t0
    JAL malloc, ra
    LDI t0, 8
    ADD sp, sp, t0
    ; Cleaned up 1 arguments from stack
    MOV t0, a0
    LDI t1, -16
    ADD t1, fp, t1
    ST t1, t0
    ; Expression statement
    ; Function call: __millis_to_date_str
    ; Preparing function call: __millis_to_date_str
    ; Evaluating argument 0
    ; Variable access: currentTime
    LDI t0, -8
    ADD t0, fp, t0
    LD t1, t0
    ; Evaluating argument 1
    ; Variable access: dateBuffer
    LDI t0, -16
    ADD t0, fp, t0
    LD t2, t0
    PUSH t2
    PUSH t1
    JAL __millis_to_date_str, ra
    LDI t0, 16
    ADD sp, sp, t0
    ; Cleaned up 2 arguments from stack
    MOV t0, a0
    ; Variable declaration: msg1Len
    ; Literal value: 23
    LDI t0, 23
    LDI t1, -20
    ADD t1, fp, t1
    SI t1, t0
    ; Variable declaration: msg1
    ; Function call: malloc
    ; Preparing function call: malloc
    ; Evaluating argument 0
    ; Variable access: msg1Len
    LDI t0, -20
    ADD t0, fp, t0
    LI t1, t0
    PUSH t1
    JAL malloc, ra
    LDI t0, 8
    ADD sp, sp, t0
    ; Cleaned up 1 arguments from stack
    MOV t0, a0
    LDI t1, -28
    ADD t1, fp, t1
    ST t1, t0
    ; Variable access: msg1
    LDI t0, -28
    ADD t0, fp, t0
    LD t1, t0
    ; Dereference assignment to address: t1
    ; Storing array literal to memory at t1
    LDI t0, 0
    ADD t2, t1, t0
    ; Literal value: 67
    LDI t3, 67
    SB t2, t3
    LDI t0, 1
    ADD t2, t1, t0
    ; Literal value: 117
    LDI t3, 117
    SB t2, t3
    LDI t0, 2
    ADD t2, t1, t0
    ; Literal value: 114
    LDI t3, 114
    SB t2, t3
    LDI t0, 3
    ADD t2, t1, t0
    ; Literal value: 114
    LDI t3, 114
    SB t2, t3
    LDI t0, 4
    ADD t2, t1, t0
    ; Literal value: 101
    LDI t3, 101
    SB t2, t3
    LDI t0, 5
    ADD t2, t1, t0
    ; Literal value: 110
    LDI t3, 110
    SB t2, t3
    LDI t0, 6
    ADD t2, t1, t0
    ; Literal value: 116
    LDI t3, 116
    SB t2, t3
    LDI t0, 7
    ADD t2, t1, t0
    ; Literal value: 32
    LDI t3, 32
    SB t2, t3
    LDI t0, 8
    ADD t2, t1, t0
    ; Literal value: 100
    LDI t3, 100
    SB t2, t3
    LDI t0, 9
    ADD t2, t1, t0
    ; Literal value: 97
    LDI t3, 97
    SB t2, t3
    LDI t0, 10
    ADD t2, t1, t0
    ; Literal value: 116
    LDI t3, 116
    SB t2, t3
    LDI t0, 11
    ADD t2, t1, t0
    ; Literal value: 101
    LDI t3, 101
    SB t2, t3
    LDI t0, 12
    ADD t2, t1, t0
    ; Literal value: 32
    LDI t3, 32
    SB t2, t3
    LDI t0, 13
    ADD t2, t1, t0
    ; Literal value: 97
    LDI t3, 97
    SB t2, t3
    LDI t0, 14
    ADD t2, t1, t0
    ; Literal value: 110
    LDI t3, 110
    SB t2, t3
    LDI t0, 15
    ADD t2, t1, t0
    ; Literal value: 100
    LDI t3, 100
    SB t2, t3
    LDI t0, 16
    ADD t2, t1, t0
    ; Literal value: 32
    LDI t3, 32
    SB t2, t3
    LDI t0, 17
    ADD t2, t1, t0
    ; Literal value: 116
    LDI t3, 116
    SB t2, t3
    LDI t0, 18
    ADD t2, t1, t0
    ; Literal value: 105
    LDI t3, 105
    SB t2, t3
    LDI t0, 19
    ADD t2, t1, t0
    ; Literal value: 109
    LDI t3, 109
    SB t2, t3
    LDI t0, 20
    ADD t2, t1, t0
    ; Literal value: 101
    LDI t3, 101
    SB t2, t3
    LDI t0, 21
    ADD t2, t1, t0
    ; Literal value: 58
    LDI t3, 58
    SB t2, t3
    LDI t0, 22
    ADD t2, t1, t0
    ; Literal value: 32
    LDI t3, 32
    SB t2, t3
    LDI t0, 23
    ADD t2, t1, t0
    ; Literal value: 0
    LDI t3, 0
    SB t2, t3
    ; Expression statement
    ; Function call: print
    ; Preparing function call: print
    ; Evaluating argument 0
    ; Variable access: msg1
    LDI t0, -28
    ADD t0, fp, t0
    LD t1, t0
    ; Evaluating argument 1
    ; Variable access: msg1Len
    LDI t0, -20
    ADD t0, fp, t0
    LI t2, t0
    PUSH t2
    PUSH t1
    JAL print, ra
    LDI t0, 16
    ADD sp, sp, t0
    ; Cleaned up 2 arguments from stack
    MOV t0, a0
    ; Expression statement
    ; Function call: print
    ; Preparing function call: print
    ; Evaluating argument 0
    ; Variable access: dateBuffer
    LDI t0, -16
    ADD t0, fp, t0
    LD t1, t0
    ; Evaluating argument 1
    ; Literal value: 19
    LDI t0, 19
    PUSH t0
    PUSH t1
    JAL print, ra
    LDI t0, 16
    ADD sp, sp, t0
    ; Cleaned up 2 arguments from stack
    MOV t0, a0
    ; Expression statement
    ; Function call: println
    ; Preparing function call: println
    ; Evaluating argument 0
    ; Literal value: 0
    LDI t0, 0
    ; Evaluating argument 1
    ; Literal value: 0
    LDI t1, 0
    PUSH t1
    PUSH t0
    JAL println, ra
    LDI t0, 16
    ADD sp, sp, t0
    ; Cleaned up 2 arguments from stack
    MOV t0, a0
    ; Function epilogue
__handle_date_end_117:
    LDI t0, 32
    ADD sp, sp, t0
    ; Deallocated 32 bytes for frame
    POP fp
    POP ra
    JMP ra                               ; Return from function

    ; ==========================
    ; Function: __handle_version
    ; ==========================
__handle_version:
    ; Pre-allocating 6 local variables
    ; Pre-allocated variable: msg1Len (INT)
    ; Pre-allocated variable: msg1 (PointerType[elementType=BYTE])
    ; Pre-allocated variable: msg2Len (INT)
    ; Pre-allocated variable: msg2 (PointerType[elementType=BYTE])
    ; Pre-allocated variable: msg3Len (INT)
    ; Pre-allocated variable: msg3 (PointerType[elementType=BYTE])
    ; Function prologue
    PUSH ra
    PUSH fp
    MOV fp, sp
    ; Total frame size: 40 bytes
    LDI t0, 40
    SUB sp, sp, t0
    ; Allocated 40 bytes for stack frame
    ; Variable declaration: msg1Len
    ; Literal value: 23
    LDI t0, 23
    LDI t1, -4
    ADD t1, fp, t1
    SI t1, t0
    ; Variable declaration: msg1
    ; Function call: malloc
    ; Preparing function call: malloc
    ; Evaluating argument 0
    ; Variable access: msg1Len
    LDI t0, -4
    ADD t0, fp, t0
    LI t1, t0
    PUSH t1
    JAL malloc, ra
    LDI t0, 8
    ADD sp, sp, t0
    ; Cleaned up 1 arguments from stack
    MOV t0, a0
    LDI t1, -12
    ADD t1, fp, t1
    ST t1, t0
    ; Variable access: msg1
    LDI t0, -12
    ADD t0, fp, t0
    LD t1, t0
    ; Dereference assignment to address: t1
    ; Storing array literal to memory at t1
    LDI t0, 0
    ADD t2, t1, t0
    ; Literal value: 84
    LDI t3, 84
    SB t2, t3
    LDI t0, 1
    ADD t2, t1, t0
    ; Literal value: 114
    LDI t3, 114
    SB t2, t3
    LDI t0, 2
    ADD t2, t1, t0
    ; Literal value: 105
    LDI t3, 105
    SB t2, t3
    LDI t0, 3
    ADD t2, t1, t0
    ; Literal value: 116
    LDI t3, 116
    SB t2, t3
    LDI t0, 4
    ADD t2, t1, t0
    ; Literal value: 111
    LDI t3, 111
    SB t2, t3
    LDI t0, 5
    ADD t2, t1, t0
    ; Literal value: 110
    LDI t3, 110
    SB t2, t3
    LDI t0, 6
    ADD t2, t1, t0
    ; Literal value: 45
    LDI t3, 45
    SB t2, t3
    LDI t0, 7
    ADD t2, t1, t0
    ; Literal value: 79
    LDI t3, 79
    SB t2, t3
    LDI t0, 8
    ADD t2, t1, t0
    ; Literal value: 83
    LDI t3, 83
    SB t2, t3
    LDI t0, 9
    ADD t2, t1, t0
    ; Literal value: 32
    LDI t3, 32
    SB t2, t3
    LDI t0, 10
    ADD t2, t1, t0
    ; Literal value: 86
    LDI t3, 86
    SB t2, t3
    LDI t0, 11
    ADD t2, t1, t0
    ; Literal value: 101
    LDI t3, 101
    SB t2, t3
    LDI t0, 12
    ADD t2, t1, t0
    ; Literal value: 114
    LDI t3, 114
    SB t2, t3
    LDI t0, 13
    ADD t2, t1, t0
    ; Literal value: 115
    LDI t3, 115
    SB t2, t3
    LDI t0, 14
    ADD t2, t1, t0
    ; Literal value: 105
    LDI t3, 105
    SB t2, t3
    LDI t0, 15
    ADD t2, t1, t0
    ; Literal value: 111
    LDI t3, 111
    SB t2, t3
    LDI t0, 16
    ADD t2, t1, t0
    ; Literal value: 110
    LDI t3, 110
    SB t2, t3
    LDI t0, 17
    ADD t2, t1, t0
    ; Literal value: 32
    LDI t3, 32
    SB t2, t3
    LDI t0, 18
    ADD t2, t1, t0
    ; Literal value: 48
    LDI t3, 48
    SB t2, t3
    LDI t0, 19
    ADD t2, t1, t0
    ; Literal value: 46
    LDI t3, 46
    SB t2, t3
    LDI t0, 20
    ADD t2, t1, t0
    ; Literal value: 49
    LDI t3, 49
    SB t2, t3
    LDI t0, 21
    ADD t2, t1, t0
    ; Literal value: 46
    LDI t3, 46
    SB t2, t3
    LDI t0, 22
    ADD t2, t1, t0
    ; Literal value: 48
    LDI t3, 48
    SB t2, t3
    LDI t0, 23
    ADD t2, t1, t0
    ; Literal value: 0
    LDI t3, 0
    SB t2, t3
    ; Expression statement
    ; Function call: println
    ; Preparing function call: println
    ; Evaluating argument 0
    ; Variable access: msg1
    LDI t0, -12
    ADD t0, fp, t0
    LD t1, t0
    ; Evaluating argument 1
    ; Variable access: msg1Len
    LDI t0, -4
    ADD t0, fp, t0
    LI t2, t0
    PUSH t2
    PUSH t1
    JAL println, ra
    LDI t0, 16
    ADD sp, sp, t0
    ; Cleaned up 2 arguments from stack
    MOV t0, a0
    ; Variable declaration: msg2Len
    ; Literal value: 22
    LDI t0, 22
    LDI t1, -16
    ADD t1, fp, t1
    SI t1, t0
    ; Variable declaration: msg2
    ; Function call: malloc
    ; Preparing function call: malloc
    ; Evaluating argument 0
    ; Variable access: msg2Len
    LDI t0, -16
    ADD t0, fp, t0
    LI t1, t0
    PUSH t1
    JAL malloc, ra
    LDI t0, 8
    ADD sp, sp, t0
    ; Cleaned up 1 arguments from stack
    MOV t0, a0
    LDI t1, -24
    ADD t1, fp, t1
    ST t1, t0
    ; Variable access: msg2
    LDI t0, -24
    ADD t0, fp, t0
    LD t1, t0
    ; Dereference assignment to address: t1
    ; Storing array literal to memory at t1
    LDI t0, 0
    ADD t2, t1, t0
    ; Literal value: 66
    LDI t3, 66
    SB t2, t3
    LDI t0, 1
    ADD t2, t1, t0
    ; Literal value: 117
    LDI t3, 117
    SB t2, t3
    LDI t0, 2
    ADD t2, t1, t0
    ; Literal value: 105
    LDI t3, 105
    SB t2, t3
    LDI t0, 3
    ADD t2, t1, t0
    ; Literal value: 108
    LDI t3, 108
    SB t2, t3
    LDI t0, 4
    ADD t2, t1, t0
    ; Literal value: 100
    LDI t3, 100
    SB t2, t3
    LDI t0, 5
    ADD t2, t1, t0
    ; Literal value: 32
    LDI t3, 32
    SB t2, t3
    LDI t0, 6
    ADD t2, t1, t0
    ; Literal value: 68
    LDI t3, 68
    SB t2, t3
    LDI t0, 7
    ADD t2, t1, t0
    ; Literal value: 97
    LDI t3, 97
    SB t2, t3
    LDI t0, 8
    ADD t2, t1, t0
    ; Literal value: 116
    LDI t3, 116
    SB t2, t3
    LDI t0, 9
    ADD t2, t1, t0
    ; Literal value: 101
    LDI t3, 101
    SB t2, t3
    LDI t0, 10
    ADD t2, t1, t0
    ; Literal value: 58
    LDI t3, 58
    SB t2, t3
    LDI t0, 11
    ADD t2, t1, t0
    ; Literal value: 32
    LDI t3, 32
    SB t2, t3
    LDI t0, 12
    ADD t2, t1, t0
    ; Literal value: 50
    LDI t3, 50
    SB t2, t3
    LDI t0, 13
    ADD t2, t1, t0
    ; Literal value: 48
    LDI t3, 48
    SB t2, t3
    LDI t0, 14
    ADD t2, t1, t0
    ; Literal value: 47
    LDI t3, 47
    SB t2, t3
    LDI t0, 15
    ADD t2, t1, t0
    ; Literal value: 48
    LDI t3, 48
    SB t2, t3
    LDI t0, 16
    ADD t2, t1, t0
    ; Literal value: 56
    LDI t3, 56
    SB t2, t3
    LDI t0, 17
    ADD t2, t1, t0
    ; Literal value: 47
    LDI t3, 47
    SB t2, t3
    LDI t0, 18
    ADD t2, t1, t0
    ; Literal value: 50
    LDI t3, 50
    SB t2, t3
    LDI t0, 19
    ADD t2, t1, t0
    ; Literal value: 48
    LDI t3, 48
    SB t2, t3
    LDI t0, 20
    ADD t2, t1, t0
    ; Literal value: 50
    LDI t3, 50
    SB t2, t3
    LDI t0, 21
    ADD t2, t1, t0
    ; Literal value: 53
    LDI t3, 53
    SB t2, t3
    LDI t0, 22
    ADD t2, t1, t0
    ; Literal value: 0
    LDI t3, 0
    SB t2, t3
    ; Expression statement
    ; Function call: println
    ; Preparing function call: println
    ; Evaluating argument 0
    ; Variable access: msg2
    LDI t0, -24
    ADD t0, fp, t0
    LD t1, t0
    ; Evaluating argument 1
    ; Variable access: msg2Len
    LDI t0, -16
    ADD t0, fp, t0
    LI t2, t0
    PUSH t2
    PUSH t1
    JAL println, ra
    LDI t0, 16
    ADD sp, sp, t0
    ; Cleaned up 2 arguments from stack
    MOV t0, a0
    ; Variable declaration: msg3Len
    ; Literal value: 33
    LDI t0, 33
    LDI t1, -28
    ADD t1, fp, t1
    SI t1, t0
    ; Variable declaration: msg3
    ; Function call: malloc
    ; Preparing function call: malloc
    ; Evaluating argument 0
    ; Variable access: msg3Len
    LDI t0, -28
    ADD t0, fp, t0
    LI t1, t0
    PUSH t1
    JAL malloc, ra
    LDI t0, 8
    ADD sp, sp, t0
    ; Cleaned up 1 arguments from stack
    MOV t0, a0
    LDI t1, -36
    ADD t1, fp, t1
    ST t1, t0
    ; Variable access: msg3
    LDI t0, -36
    ADD t0, fp, t0
    LD t1, t0
    ; Dereference assignment to address: t1
    ; Storing array literal to memory at t1
    LDI t0, 0
    ADD t2, t1, t0
    ; Literal value: 67
    LDI t3, 67
    SB t2, t3
    LDI t0, 1
    ADD t2, t1, t0
    ; Literal value: 111
    LDI t3, 111
    SB t2, t3
    LDI t0, 2
    ADD t2, t1, t0
    ; Literal value: 112
    LDI t3, 112
    SB t2, t3
    LDI t0, 3
    ADD t2, t1, t0
    ; Literal value: 121
    LDI t3, 121
    SB t2, t3
    LDI t0, 4
    ADD t2, t1, t0
    ; Literal value: 114
    LDI t3, 114
    SB t2, t3
    LDI t0, 5
    ADD t2, t1, t0
    ; Literal value: 105
    LDI t3, 105
    SB t2, t3
    LDI t0, 6
    ADD t2, t1, t0
    ; Literal value: 103
    LDI t3, 103
    SB t2, t3
    LDI t0, 7
    ADD t2, t1, t0
    ; Literal value: 104
    LDI t3, 104
    SB t2, t3
    LDI t0, 8
    ADD t2, t1, t0
    ; Literal value: 116
    LDI t3, 116
    SB t2, t3
    LDI t0, 9
    ADD t2, t1, t0
    ; Literal value: 32
    LDI t3, 32
    SB t2, t3
    LDI t0, 10
    ADD t2, t1, t0
    ; Literal value: 40
    LDI t3, 40
    SB t2, t3
    LDI t0, 11
    ADD t2, t1, t0
    ; Literal value: 99
    LDI t3, 99
    SB t2, t3
    LDI t0, 12
    ADD t2, t1, t0
    ; Literal value: 41
    LDI t3, 41
    SB t2, t3
    LDI t0, 13
    ADD t2, t1, t0
    ; Literal value: 32
    LDI t3, 32
    SB t2, t3
    LDI t0, 14
    ADD t2, t1, t0
    ; Literal value: 50
    LDI t3, 50
    SB t2, t3
    LDI t0, 15
    ADD t2, t1, t0
    ; Literal value: 48
    LDI t3, 48
    SB t2, t3
    LDI t0, 16
    ADD t2, t1, t0
    ; Literal value: 50
    LDI t3, 50
    SB t2, t3
    LDI t0, 17
    ADD t2, t1, t0
    ; Literal value: 53
    LDI t3, 53
    SB t2, t3
    LDI t0, 18
    ADD t2, t1, t0
    ; Literal value: 32
    LDI t3, 32
    SB t2, t3
    LDI t0, 19
    ADD t2, t1, t0
    ; Literal value: 84
    LDI t3, 84
    SB t2, t3
    LDI t0, 20
    ADD t2, t1, t0
    ; Literal value: 114
    LDI t3, 114
    SB t2, t3
    LDI t0, 21
    ADD t2, t1, t0
    ; Literal value: 105
    LDI t3, 105
    SB t2, t3
    LDI t0, 22
    ADD t2, t1, t0
    ; Literal value: 116
    LDI t3, 116
    SB t2, t3
    LDI t0, 23
    ADD t2, t1, t0
    ; Literal value: 111
    LDI t3, 111
    SB t2, t3
    LDI t0, 24
    ADD t2, t1, t0
    ; Literal value: 110
    LDI t3, 110
    SB t2, t3
    LDI t0, 25
    ADD t2, t1, t0
    ; Literal value: 32
    LDI t3, 32
    SB t2, t3
    LDI t0, 26
    ADD t2, t1, t0
    ; Literal value: 83
    LDI t3, 83
    SB t2, t3
    LDI t0, 27
    ADD t2, t1, t0
    ; Literal value: 121
    LDI t3, 121
    SB t2, t3
    LDI t0, 28
    ADD t2, t1, t0
    ; Literal value: 115
    LDI t3, 115
    SB t2, t3
    LDI t0, 29
    ADD t2, t1, t0
    ; Literal value: 116
    LDI t3, 116
    SB t2, t3
    LDI t0, 30
    ADD t2, t1, t0
    ; Literal value: 101
    LDI t3, 101
    SB t2, t3
    LDI t0, 31
    ADD t2, t1, t0
    ; Literal value: 109
    LDI t3, 109
    SB t2, t3
    LDI t0, 32
    ADD t2, t1, t0
    ; Literal value: 115
    LDI t3, 115
    SB t2, t3
    LDI t0, 33
    ADD t2, t1, t0
    ; Literal value: 0
    LDI t3, 0
    SB t2, t3
    ; Expression statement
    ; Function call: println
    ; Preparing function call: println
    ; Evaluating argument 0
    ; Variable access: msg3
    LDI t0, -36
    ADD t0, fp, t0
    LD t1, t0
    ; Evaluating argument 1
    ; Variable access: msg3Len
    LDI t0, -28
    ADD t0, fp, t0
    LI t2, t0
    PUSH t2
    PUSH t1
    JAL println, ra
    LDI t0, 16
    ADD sp, sp, t0
    ; Cleaned up 2 arguments from stack
    MOV t0, a0
    ; Function epilogue
__handle_version_end_118:
    LDI t0, 40
    ADD sp, sp, t0
    ; Deallocated 40 bytes for frame
    POP fp
    POP ra
    JMP ra                               ; Return from function

    ; ============================
    ; Function: __handle_reset
    ; ============================
__handle_reset:
    ; Pre-allocating 0 local variables
    ; Function prologue
    PUSH ra
    PUSH fp
    MOV fp, sp
    ; Total frame size: 0 bytes
    ; Expression statement
    ; Function call: console_clear
    ; Preparing function call: console_clear
    JAL console_clear, ra
    MOV t0, a0
    ; Expression statement
    ; Function call: __display_welcome
    ; Preparing function call: __display_welcome
    JAL __display_welcome, ra
    MOV t0, a0
    ; Function epilogue
__handle_reset_end_119:
    POP fp
    POP ra
    JMP ra                               ; Return from function

    ; =========================
    ; Function: __process_command
    ; =========================
__process_command:
    ; Pre-allocating 4 local variables
    ; Pre-allocated variable: prefixLen (INT)
    ; Pre-allocated variable: prefix (PointerType[elementType=BYTE])
    ; Pre-allocated variable: suffixLen (INT)
    ; Pre-allocated variable: suffix (PointerType[elementType=BYTE])
    ; Function prologue
    PUSH ra
    PUSH fp
    MOV fp, sp
    ; Total frame size: 24 bytes
    LDI t0, 24
    SUB sp, sp, t0
    ; Allocated 24 bytes for stack frame
    ; If statement
    ; Comparison: FunctionCall(name=strcmp, arguments=[Variable(name=cmdBuffer, type=PointerType[elementType=BYTE]), Variable(name=cmdLength, type=INT), Variable(name=__helpStr, type=PointerType[elementType=BYTE]), Variable(name=__helpStrLen, type=INT)], returnType=INT) EQ Literal(value=1, type=LONG)
    ; Function call: strcmp
    ; Preparing function call: strcmp
    ; Evaluating argument 0
    ; Variable access: cmdBuffer
    LDI t0, 16
    ADD t0, fp, t0
    LD t1, t0
    ; Evaluating argument 1
    ; Variable access: cmdLength
    LDI t0, 24
    ADD t0, fp, t0
    LI t2, t0
    ; Evaluating argument 2
    ; Variable access: __helpStr
    LDI t0, 88
    ADD t0, gp, t0
    LD t3, t0
    ; Evaluating argument 3
    ; Variable access: __helpStrLen
    LDI t0, 96
    ADD t0, gp, t0
    LI t4, t0
    PUSH t4
    PUSH t3
    PUSH t2
    PUSH t1
    JAL strcmp, ra
    LDI t0, 32
    ADD sp, sp, t0
    ; Cleaned up 4 arguments from stack
    MOV t0, a0
    ; Literal value: 1
    LDI t1, 1
    SUB t2, t0, t1
    ; Jump if t0 != t1
    JNZ else_121, t2
    ; Expression statement
    ; Function call: __handle_help
    ; Preparing function call: __handle_help
    JAL __handle_help, ra
    MOV t0, a0
    ; Return statement
    JMP __process_command_end_120
else_121:
    ; If statement
    ; Comparison: FunctionCall(name=strcmp, arguments=[Variable(name=cmdBuffer, type=PointerType[elementType=BYTE]), Variable(name=cmdLength, type=INT), Variable(name=__infoStr, type=PointerType[elementType=BYTE]), Variable(name=__infoStrLen, type=INT)], returnType=INT) EQ Literal(value=1, type=LONG)
    ; Function call: strcmp
    ; Preparing function call: strcmp
    ; Evaluating argument 0
    ; Variable access: cmdBuffer
    LDI t0, 16
    ADD t0, fp, t0
    LD t1, t0
    ; Evaluating argument 1
    ; Variable access: cmdLength
    LDI t0, 24
    ADD t0, fp, t0
    LI t2, t0
    ; Evaluating argument 2
    ; Variable access: __infoStr
    LDI t0, 100
    ADD t0, gp, t0
    LD t3, t0
    ; Evaluating argument 3
    ; Variable access: __infoStrLen
    LDI t0, 108
    ADD t0, gp, t0
    LI t4, t0
    PUSH t4
    PUSH t3
    PUSH t2
    PUSH t1
    JAL strcmp, ra
    LDI t0, 32
    ADD sp, sp, t0
    ; Cleaned up 4 arguments from stack
    MOV t0, a0
    ; Literal value: 1
    LDI t1, 1
    SUB t2, t0, t1
    ; Jump if t0 != t1
    JNZ else_123, t2
    ; Expression statement
    ; Function call: __handle_info
    ; Preparing function call: __handle_info
    JAL __handle_info, ra
    MOV t0, a0
    ; Return statement
    JMP __process_command_end_120
else_123:
    ; If statement
    ; Comparison: FunctionCall(name=strcmp, arguments=[Variable(name=cmdBuffer, type=PointerType[elementType=BYTE]), Variable(name=cmdLength, type=INT), Variable(name=__clearStr, type=PointerType[elementType=BYTE]), Variable(name=__clearStrLen, type=INT)], returnType=INT) EQ Literal(value=1, type=LONG)
    ; Function call: strcmp
    ; Preparing function call: strcmp
    ; Evaluating argument 0
    ; Variable access: cmdBuffer
    LDI t0, 16
    ADD t0, fp, t0
    LD t1, t0
    ; Evaluating argument 1
    ; Variable access: cmdLength
    LDI t0, 24
    ADD t0, fp, t0
    LI t2, t0
    ; Evaluating argument 2
    ; Variable access: __clearStr
    LDI t0, 112
    ADD t0, gp, t0
    LD t3, t0
    ; Evaluating argument 3
    ; Variable access: __clearStrLen
    LDI t0, 120
    ADD t0, gp, t0
    LI t4, t0
    PUSH t4
    PUSH t3
    PUSH t2
    PUSH t1
    JAL strcmp, ra
    LDI t0, 32
    ADD sp, sp, t0
    ; Cleaned up 4 arguments from stack
    MOV t0, a0
    ; Literal value: 1
    LDI t1, 1
    SUB t2, t0, t1
    ; Jump if t0 != t1
    JNZ else_125, t2
    ; Expression statement
    ; Function call: __handle_clear
    ; Preparing function call: __handle_clear
    JAL __handle_clear, ra
    MOV t0, a0
    ; Return statement
    JMP __process_command_end_120
else_125:
    ; If statement
    ; Comparison: FunctionCall(name=strcmp, arguments=[Variable(name=cmdBuffer, type=PointerType[elementType=BYTE]), Variable(name=cmdLength, type=INT), Variable(name=__versionStr, type=PointerType[elementType=BYTE]), Variable(name=__versionStrLen, type=INT)], returnType=INT) EQ Literal(value=1, type=LONG)
    ; Function call: strcmp
    ; Preparing function call: strcmp
    ; Evaluating argument 0
    ; Variable access: cmdBuffer
    LDI t0, 16
    ADD t0, fp, t0
    LD t1, t0
    ; Evaluating argument 1
    ; Variable access: cmdLength
    LDI t0, 24
    ADD t0, fp, t0
    LI t2, t0
    ; Evaluating argument 2
    ; Variable access: __versionStr
    LDI t0, 136
    ADD t0, gp, t0
    LD t3, t0
    ; Evaluating argument 3
    ; Variable access: __versionStrLen
    LDI t0, 144
    ADD t0, gp, t0
    LI t4, t0
    PUSH t4
    PUSH t3
    PUSH t2
    PUSH t1
    JAL strcmp, ra
    LDI t0, 32
    ADD sp, sp, t0
    ; Cleaned up 4 arguments from stack
    MOV t0, a0
    ; Literal value: 1
    LDI t1, 1
    SUB t2, t0, t1
    ; Jump if t0 != t1
    JNZ else_127, t2
    ; Expression statement
    ; Function call: __handle_version
    ; Preparing function call: __handle_version
    JAL __handle_version, ra
    MOV t0, a0
    ; Return statement
    JMP __process_command_end_120
else_127:
    ; If statement
    ; Comparison: FunctionCall(name=strcmp, arguments=[Variable(name=cmdBuffer, type=PointerType[elementType=BYTE]), Variable(name=cmdLength, type=INT), Variable(name=__dateStr, type=PointerType[elementType=BYTE]), Variable(name=__dateStrLen, type=INT)], returnType=INT) EQ Literal(value=1, type=LONG)
    ; Function call: strcmp
    ; Preparing function call: strcmp
    ; Evaluating argument 0
    ; Variable access: cmdBuffer
    LDI t0, 16
    ADD t0, fp, t0
    LD t1, t0
    ; Evaluating argument 1
    ; Variable access: cmdLength
    LDI t0, 24
    ADD t0, fp, t0
    LI t2, t0
    ; Evaluating argument 2
    ; Variable access: __dateStr
    LDI t0, 148
    ADD t0, gp, t0
    LD t3, t0
    ; Evaluating argument 3
    ; Variable access: __dateStrLen
    LDI t0, 156
    ADD t0, gp, t0
    LI t4, t0
    PUSH t4
    PUSH t3
    PUSH t2
    PUSH t1
    JAL strcmp, ra
    LDI t0, 32
    ADD sp, sp, t0
    ; Cleaned up 4 arguments from stack
    MOV t0, a0
    ; Literal value: 1
    LDI t1, 1
    SUB t2, t0, t1
    ; Jump if t0 != t1
    JNZ else_129, t2
    ; Expression statement
    ; Function call: __handle_date
    ; Preparing function call: __handle_date
    JAL __handle_date, ra
    MOV t0, a0
    ; Return statement
    JMP __process_command_end_120
else_129:
    ; If statement
    ; Comparison: FunctionCall(name=strcmp, arguments=[Variable(name=cmdBuffer, type=PointerType[elementType=BYTE]), Variable(name=cmdLength, type=INT), Variable(name=__resetStr, type=PointerType[elementType=BYTE]), Variable(name=__resetStrLen, type=INT)], returnType=INT) EQ Literal(value=1, type=LONG)
    ; Function call: strcmp
    ; Preparing function call: strcmp
    ; Evaluating argument 0
    ; Variable access: cmdBuffer
    LDI t0, 16
    ADD t0, fp, t0
    LD t1, t0
    ; Evaluating argument 1
    ; Variable access: cmdLength
    LDI t0, 24
    ADD t0, fp, t0
    LI t2, t0
    ; Evaluating argument 2
    ; Variable access: __resetStr
    LDI t0, 160
    ADD t0, gp, t0
    LD t3, t0
    ; Evaluating argument 3
    ; Variable access: __resetStrLen
    LDI t0, 168
    ADD t0, gp, t0
    LI t4, t0
    PUSH t4
    PUSH t3
    PUSH t2
    PUSH t1
    JAL strcmp, ra
    LDI t0, 32
    ADD sp, sp, t0
    ; Cleaned up 4 arguments from stack
    MOV t0, a0
    ; Literal value: 1
    LDI t1, 1
    SUB t2, t0, t1
    ; Jump if t0 != t1
    JNZ else_131, t2
    ; Expression statement
    ; Function call: __handle_reset
    ; Preparing function call: __handle_reset
    JAL __handle_reset, ra
    MOV t0, a0
    ; Return statement
    JMP __process_command_end_120
else_131:
    ; Variable declaration: prefixLen
    ; Literal value: 17
    LDI t0, 17
    LDI t1, -4
    ADD t1, fp, t1
    SI t1, t0
    ; Variable declaration: prefix
    ; Function call: malloc
    ; Preparing function call: malloc
    ; Evaluating argument 0
    ; Variable access: prefixLen
    LDI t0, -4
    ADD t0, fp, t0
    LI t1, t0
    PUSH t1
    JAL malloc, ra
    LDI t0, 8
    ADD sp, sp, t0
    ; Cleaned up 1 arguments from stack
    MOV t0, a0
    LDI t1, -12
    ADD t1, fp, t1
    ST t1, t0
    ; Variable access: prefix
    LDI t0, -12
    ADD t0, fp, t0
    LD t1, t0
    ; Dereference assignment to address: t1
    ; Storing array literal to memory at t1
    LDI t0, 0
    ADD t2, t1, t0
    ; Literal value: 85
    LDI t3, 85
    SB t2, t3
    LDI t0, 1
    ADD t2, t1, t0
    ; Literal value: 110
    LDI t3, 110
    SB t2, t3
    LDI t0, 2
    ADD t2, t1, t0
    ; Literal value: 107
    LDI t3, 107
    SB t2, t3
    LDI t0, 3
    ADD t2, t1, t0
    ; Literal value: 110
    LDI t3, 110
    SB t2, t3
    LDI t0, 4
    ADD t2, t1, t0
    ; Literal value: 111
    LDI t3, 111
    SB t2, t3
    LDI t0, 5
    ADD t2, t1, t0
    ; Literal value: 119
    LDI t3, 119
    SB t2, t3
    LDI t0, 6
    ADD t2, t1, t0
    ; Literal value: 110
    LDI t3, 110
    SB t2, t3
    LDI t0, 7
    ADD t2, t1, t0
    ; Literal value: 32
    LDI t3, 32
    SB t2, t3
    LDI t0, 8
    ADD t2, t1, t0
    ; Literal value: 99
    LDI t3, 99
    SB t2, t3
    LDI t0, 9
    ADD t2, t1, t0
    ; Literal value: 111
    LDI t3, 111
    SB t2, t3
    LDI t0, 10
    ADD t2, t1, t0
    ; Literal value: 109
    LDI t3, 109
    SB t2, t3
    LDI t0, 11
    ADD t2, t1, t0
    ; Literal value: 109
    LDI t3, 109
    SB t2, t3
    LDI t0, 12
    ADD t2, t1, t0
    ; Literal value: 97
    LDI t3, 97
    SB t2, t3
    LDI t0, 13
    ADD t2, t1, t0
    ; Literal value: 110
    LDI t3, 110
    SB t2, t3
    LDI t0, 14
    ADD t2, t1, t0
    ; Literal value: 100
    LDI t3, 100
    SB t2, t3
    LDI t0, 15
    ADD t2, t1, t0
    ; Literal value: 32
    LDI t3, 32
    SB t2, t3
    LDI t0, 16
    ADD t2, t1, t0
    ; Literal value: 39
    LDI t3, 39
    SB t2, t3
    LDI t0, 17
    ADD t2, t1, t0
    ; Literal value: 0
    LDI t3, 0
    SB t2, t3
    ; Expression statement
    ; Function call: print
    ; Preparing function call: print
    ; Evaluating argument 0
    ; Variable access: prefix
    LDI t0, -12
    ADD t0, fp, t0
    LD t1, t0
    ; Evaluating argument 1
    ; Variable access: prefixLen
    LDI t0, -4
    ADD t0, fp, t0
    LI t2, t0
    PUSH t2
    PUSH t1
    JAL print, ra
    LDI t0, 16
    ADD sp, sp, t0
    ; Cleaned up 2 arguments from stack
    MOV t0, a0
    ; Expression statement
    ; Function call: print
    ; Preparing function call: print
    ; Evaluating argument 0
    ; Variable access: cmdBuffer
    LDI t0, 16
    ADD t0, fp, t0
    LD t1, t0
    ; Evaluating argument 1
    ; Variable access: cmdLength
    LDI t0, 24
    ADD t0, fp, t0
    LI t2, t0
    PUSH t2
    PUSH t1
    JAL print, ra
    LDI t0, 16
    ADD sp, sp, t0
    ; Cleaned up 2 arguments from stack
    MOV t0, a0
    ; Variable declaration: suffixLen
    ; Literal value: 38
    LDI t0, 38
    LDI t1, -16
    ADD t1, fp, t1
    SI t1, t0
    ; Variable declaration: suffix
    ; Function call: malloc
    ; Preparing function call: malloc
    ; Evaluating argument 0
    ; Variable access: suffixLen
    LDI t0, -16
    ADD t0, fp, t0
    LI t1, t0
    PUSH t1
    JAL malloc, ra
    LDI t0, 8
    ADD sp, sp, t0
    ; Cleaned up 1 arguments from stack
    MOV t0, a0
    LDI t1, -24
    ADD t1, fp, t1
    ST t1, t0
    ; Variable access: suffix
    LDI t0, -24
    ADD t0, fp, t0
    LD t1, t0
    ; Dereference assignment to address: t1
    ; Storing array literal to memory at t1
    LDI t0, 0
    ADD t2, t1, t0
    ; Literal value: 39
    LDI t3, 39
    SB t2, t3
    LDI t0, 1
    ADD t2, t1, t0
    ; Literal value: 32
    LDI t3, 32
    SB t2, t3
    LDI t0, 2
    ADD t2, t1, t0
    ; Literal value: 45
    LDI t3, 45
    SB t2, t3
    LDI t0, 3
    ADD t2, t1, t0
    ; Literal value: 32
    LDI t3, 32
    SB t2, t3
    LDI t0, 4
    ADD t2, t1, t0
    ; Literal value: 116
    LDI t3, 116
    SB t2, t3
    LDI t0, 5
    ADD t2, t1, t0
    ; Literal value: 121
    LDI t3, 121
    SB t2, t3
    LDI t0, 6
    ADD t2, t1, t0
    ; Literal value: 112
    LDI t3, 112
    SB t2, t3
    LDI t0, 7
    ADD t2, t1, t0
    ; Literal value: 101
    LDI t3, 101
    SB t2, t3
    LDI t0, 8
    ADD t2, t1, t0
    ; Literal value: 32
    LDI t3, 32
    SB t2, t3
    LDI t0, 9
    ADD t2, t1, t0
    ; Literal value: 39
    LDI t3, 39
    SB t2, t3
    LDI t0, 10
    ADD t2, t1, t0
    ; Literal value: 104
    LDI t3, 104
    SB t2, t3
    LDI t0, 11
    ADD t2, t1, t0
    ; Literal value: 101
    LDI t3, 101
    SB t2, t3
    LDI t0, 12
    ADD t2, t1, t0
    ; Literal value: 108
    LDI t3, 108
    SB t2, t3
    LDI t0, 13
    ADD t2, t1, t0
    ; Literal value: 112
    LDI t3, 112
    SB t2, t3
    LDI t0, 14
    ADD t2, t1, t0
    ; Literal value: 39
    LDI t3, 39
    SB t2, t3
    LDI t0, 15
    ADD t2, t1, t0
    ; Literal value: 32
    LDI t3, 32
    SB t2, t3
    LDI t0, 16
    ADD t2, t1, t0
    ; Literal value: 102
    LDI t3, 102
    SB t2, t3
    LDI t0, 17
    ADD t2, t1, t0
    ; Literal value: 111
    LDI t3, 111
    SB t2, t3
    LDI t0, 18
    ADD t2, t1, t0
    ; Literal value: 114
    LDI t3, 114
    SB t2, t3
    LDI t0, 19
    ADD t2, t1, t0
    ; Literal value: 32
    LDI t3, 32
    SB t2, t3
    LDI t0, 20
    ADD t2, t1, t0
    ; Literal value: 97
    LDI t3, 97
    SB t2, t3
    LDI t0, 21
    ADD t2, t1, t0
    ; Literal value: 118
    LDI t3, 118
    SB t2, t3
    LDI t0, 22
    ADD t2, t1, t0
    ; Literal value: 97
    LDI t3, 97
    SB t2, t3
    LDI t0, 23
    ADD t2, t1, t0
    ; Literal value: 105
    LDI t3, 105
    SB t2, t3
    LDI t0, 24
    ADD t2, t1, t0
    ; Literal value: 108
    LDI t3, 108
    SB t2, t3
    LDI t0, 25
    ADD t2, t1, t0
    ; Literal value: 97
    LDI t3, 97
    SB t2, t3
    LDI t0, 26
    ADD t2, t1, t0
    ; Literal value: 98
    LDI t3, 98
    SB t2, t3
    LDI t0, 27
    ADD t2, t1, t0
    ; Literal value: 108
    LDI t3, 108
    SB t2, t3
    LDI t0, 28
    ADD t2, t1, t0
    ; Literal value: 101
    LDI t3, 101
    SB t2, t3
    LDI t0, 29
    ADD t2, t1, t0
    ; Literal value: 32
    LDI t3, 32
    SB t2, t3
    LDI t0, 30
    ADD t2, t1, t0
    ; Literal value: 99
    LDI t3, 99
    SB t2, t3
    LDI t0, 31
    ADD t2, t1, t0
    ; Literal value: 111
    LDI t3, 111
    SB t2, t3
    LDI t0, 32
    ADD t2, t1, t0
    ; Literal value: 109
    LDI t3, 109
    SB t2, t3
    LDI t0, 33
    ADD t2, t1, t0
    ; Literal value: 109
    LDI t3, 109
    SB t2, t3
    LDI t0, 34
    ADD t2, t1, t0
    ; Literal value: 97
    LDI t3, 97
    SB t2, t3
    LDI t0, 35
    ADD t2, t1, t0
    ; Literal value: 110
    LDI t3, 110
    SB t2, t3
    LDI t0, 36
    ADD t2, t1, t0
    ; Literal value: 100
    LDI t3, 100
    SB t2, t3
    LDI t0, 37
    ADD t2, t1, t0
    ; Literal value: 115
    LDI t3, 115
    SB t2, t3
    LDI t0, 38
    ADD t2, t1, t0
    ; Literal value: 0
    LDI t3, 0
    SB t2, t3
    ; Expression statement
    ; Function call: println
    ; Preparing function call: println
    ; Evaluating argument 0
    ; Variable access: suffix
    LDI t0, -24
    ADD t0, fp, t0
    LD t1, t0
    ; Evaluating argument 1
    ; Variable access: suffixLen
    LDI t0, -16
    ADD t0, fp, t0
    LI t2, t0
    PUSH t2
    PUSH t1
    JAL println, ra
    LDI t0, 16
    ADD sp, sp, t0
    ; Cleaned up 2 arguments from stack
    MOV t0, a0
    ; Function epilogue
__process_command_end_120:
    LDI t0, 24
    ADD sp, sp, t0
    ; Deallocated 24 bytes for frame
    POP fp
    POP ra
    JMP ra                               ; Return from function

    ; ============================
    ; Function: __read_command
    ; ============================
__read_command:
    ; Pre-allocating 5 local variables
    ; Pre-allocated variable: cmdLength (INT)
    ; Pre-allocated variable: inputComplete (INT)
    ; Pre-allocated variable: hasInput (INT)
    ; Pre-allocated variable: inputChar (LONG)
    ; Pre-allocated variable: processedInput (INT)
    ; Function prologue
    PUSH ra
    PUSH fp
    MOV fp, sp
    ; Total frame size: 24 bytes
    LDI t0, 24
    SUB sp, sp, t0
    ; Allocated 24 bytes for stack frame
    ; Variable declaration: cmdLength
    ; Literal value: 0
    LDI t0, 0
    LDI t1, -4
    ADD t1, fp, t1
    SI t1, t0
    ; Variable declaration: inputComplete
    ; Literal value: 0
    LDI t0, 0
    LDI t1, -8
    ADD t1, fp, t1
    SI t1, t0
    ; While loop
loop_134:
    ; Comparison: Variable(name=inputComplete, type=INT) EQ Literal(value=0, type=LONG)
    ; Variable access: inputComplete
    LDI t0, -8
    ADD t0, fp, t0
    LI t1, t0
    ; Literal value: 0
    LDI t0, 0
    SUB t2, t1, t0
    ; Jump if t1 != t0
    JNZ endloop_135, t2
    ; Variable declaration: hasInput
    ; Literal value: 0
    LDI t0, 0
    LDI t1, -12
    ADD t1, fp, t1
    SI t1, t0
    ; Variable declaration: inputChar
    ; Dereference operation
    ; Arithmetic operation: ADD
    ; Variable access: __MMIO_BASE
    LDI t2, 56
    ADD t2, gp, t2
    LD t3, t2
    ; Variable access: __QUEUE_HEAD_OFFSET
    LDI t2, 64
    ADD t2, gp, t2
    LD t4, t2
    ADD t1, t3, t4
    LD t0, t1
    LDI t1, -20
    ADD t1, fp, t1
    ST t1, t0
    ; If statement
    ; Comparison: Variable(name=inputChar, type=LONG) NE Literal(value=255, type=LONG)
    ; Variable access: inputChar
    LDI t0, -20
    ADD t0, fp, t0
    LD t1, t0
    ; Literal value: 255
    LDI t0, 255
    SUB t2, t1, t0
    ; Jump if t1 == t0
    JZ else_136, t2
    ; Variable assignment: hasInput
    ; Literal value: 1
    LDI t0, 1
    LDI t1, -12
    ADD t1, fp, t1
    SI t1, t0
else_136:
    ; Variable declaration: processedInput
    ; Literal value: 0
    LDI t0, 0
    LDI t1, -24
    ADD t1, fp, t1
    SI t1, t0
    ; While loop
loop_138:
    ; Logical AND: BinaryOp(op=EQ, left=Variable(name=hasInput, type=INT), right=Literal(value=1, type=LONG)) && BinaryOp(op=EQ, left=Variable(name=processedInput, type=INT), right=Literal(value=0, type=LONG))
    ; Comparison: Variable(name=hasInput, type=INT) EQ Literal(value=1, type=LONG)
    ; Variable access: hasInput
    LDI t0, -12
    ADD t0, fp, t0
    LI t1, t0
    ; Literal value: 1
    LDI t0, 1
    SUB t2, t1, t0
    ; Jump if t1 != t0
    JNZ endloop_139, t2
    ; Comparison: Variable(name=processedInput, type=INT) EQ Literal(value=0, type=LONG)
    ; Variable access: processedInput
    LDI t0, -24
    ADD t0, fp, t0
    LI t1, t0
    ; Literal value: 0
    LDI t0, 0
    SUB t2, t1, t0
    ; Jump if t1 != t0
    JNZ endloop_139, t2
    ; Arithmetic operation: ADD
    ; Variable access: __MMIO_BASE
    LDI t1, 56
    ADD t1, gp, t1
    LD t2, t1
    ; Variable access: __QUEUE_CONTROL_OFFSET
    LDI t1, 72
    ADD t1, gp, t1
    LD t3, t1
    ADD t0, t2, t3
    ; Dereference assignment to address: t0
    ; Literal value: 1
    LDI t1, 1
    ; Store LONG to address t0
    ST t0, t1
    ; If statement
    ; Comparison: Variable(name=inputChar, type=LONG) EQ Literal(value=10, type=LONG)
    ; Variable access: inputChar
    LDI t0, -20
    ADD t0, fp, t0
    LD t1, t0
    ; Literal value: 10
    LDI t0, 10
    SUB t2, t1, t0
    ; Jump if t1 != t0
    JNZ else_140, t2
    ; Expression statement
    ; Function call: println
    ; Preparing function call: println
    ; Evaluating argument 0
    ; Literal value: 0
    LDI t0, 0
    ; Evaluating argument 1
    ; Literal value: 0
    LDI t1, 0
    PUSH t1
    PUSH t0
    JAL println, ra
    LDI t0, 16
    ADD sp, sp, t0
    ; Cleaned up 2 arguments from stack
    MOV t0, a0
    ; Variable assignment: inputComplete
    ; Literal value: 1
    LDI t0, 1
    LDI t1, -8
    ADD t1, fp, t1
    SI t1, t0
    ; Variable assignment: processedInput
    ; Literal value: 1
    LDI t0, 1
    LDI t1, -24
    ADD t1, fp, t1
    SI t1, t0
    JMP endif_141
else_140:
    ; If statement
    ; Comparison: Variable(name=inputChar, type=LONG) EQ Literal(value=8, type=LONG)
    ; Variable access: inputChar
    LDI t0, -20
    ADD t0, fp, t0
    LD t1, t0
    ; Literal value: 8
    LDI t0, 8
    SUB t2, t1, t0
    ; Jump if t1 != t0
    JNZ else_142, t2
    ; If statement
    ; Comparison: Variable(name=cmdLength, type=INT) GT Literal(value=0, type=LONG)
    ; Variable access: cmdLength
    LDI t0, -4
    ADD t0, fp, t0
    LI t1, t0
    ; Literal value: 0
    LDI t0, 0
    SUB t2, t1, t0
    ; Jump if t1 <= t0
    JPP skip_le_146, t2
    JMP else_144
skip_le_146:
    ; Expression statement
    ; Function call: console_backspace
    ; Preparing function call: console_backspace
    JAL console_backspace, ra
    MOV t0, a0
    ; Variable assignment: cmdLength
    ; Arithmetic operation: SUB
    ; Variable access: cmdLength
    LDI t1, -4
    ADD t1, fp, t1
    LI t2, t1
    ; Literal value: 1
    LDI t1, 1
    SUB t0, t2, t1
    LDI t1, -4
    ADD t1, fp, t1
    SI t1, t0
else_144:
    ; Variable assignment: processedInput
    ; Literal value: 1
    LDI t0, 1
    LDI t1, -24
    ADD t1, fp, t1
    SI t1, t0
    JMP endif_143
else_142:
    ; If statement
    ; Comparison: Variable(name=cmdLength, type=INT) LT BinaryOp(op=SUB, left=Variable(name=cmdBufferSize, type=INT), right=Literal(value=1, type=LONG))
    ; Variable access: cmdLength
    LDI t0, -4
    ADD t0, fp, t0
    LI t1, t0
    ; Arithmetic operation: SUB
    ; Variable access: cmdBufferSize
    LDI t2, 24
    ADD t2, fp, t2
    LI t3, t2
    ; Literal value: 1
    LDI t2, 1
    SUB t0, t3, t2
    SUB t2, t1, t0
    ; Jump if t1 >= t0
    JPN skip_ge_149, t2
    JMP else_147
skip_ge_149:
    ; Variable access: cmdBuffer
    LDI t0, 16
    ADD t0, fp, t0
    LD t1, t0
    ; Variable access: cmdLength
    LDI t0, -4
    ADD t0, fp, t0
    LI t2, t0
    ; Variable access: inputChar
    LDI t0, -20
    ADD t0, fp, t0
    LD t3, t0
    ; Array index assignment
    LDI t0, 1
    MUL t0, t2, t0
    ADD t4, t1, t0
    SB t4, t3
    ; Variable assignment: cmdLength
    ; Arithmetic operation: ADD
    ; Variable access: cmdLength
    LDI t1, -4
    ADD t1, fp, t1
    LI t2, t1
    ; Literal value: 1
    LDI t1, 1
    ADD t0, t2, t1
    LDI t1, -4
    ADD t1, fp, t1
    SI t1, t0
    ; Expression statement
    ; Function call: console_putc
    ; Preparing function call: console_putc
    ; Evaluating argument 0
    ; Variable access: inputChar
    LDI t0, -20
    ADD t0, fp, t0
    LD t1, t0
    PUSH t1
    JAL console_putc, ra
    LDI t0, 8
    ADD sp, sp, t0
    ; Cleaned up 1 arguments from stack
    MOV t0, a0
else_147:
    ; Variable assignment: processedInput
    ; Literal value: 1
    LDI t0, 1
    LDI t1, -24
    ADD t1, fp, t1
    SI t1, t0
endif_143:
endif_141:
    JMP loop_138
endloop_139:
    JMP loop_134
endloop_135:
    ; Return statement
    ; Variable access: cmdLength
    LDI t0, -4
    ADD t0, fp, t0
    LI t1, t0
    MOV a0, t1
    JMP __read_command_end_133
    ; Function epilogue
__read_command_end_133:
    LDI t0, 24
    ADD sp, sp, t0
    ; Deallocated 24 bytes for frame
    POP fp
    POP ra
    JMP ra                               ; Return from function

    ; =========================
    ; Function: __display_welcome
    ; =========================
__display_welcome:
    ; Pre-allocating 0 local variables
    ; Function prologue
    PUSH ra
    PUSH fp
    MOV fp, sp
    ; Total frame size: 0 bytes
    ; Expression statement
    ; Function call: println
    ; Preparing function call: println
    ; Evaluating argument 0
    ; Variable access: __welcomeStr
    LDI t0, 184
    ADD t0, gp, t0
    LD t1, t0
    ; Evaluating argument 1
    ; Variable access: __welcomeStrLen
    LDI t0, 192
    ADD t0, gp, t0
    LI t2, t0
    PUSH t2
    PUSH t1
    JAL println, ra
    LDI t0, 16
    ADD sp, sp, t0
    ; Cleaned up 2 arguments from stack
    MOV t0, a0
    ; Expression statement
    ; Function call: println
    ; Preparing function call: println
    ; Evaluating argument 0
    ; Variable access: __hintStr
    LDI t0, 196
    ADD t0, gp, t0
    LD t1, t0
    ; Evaluating argument 1
    ; Variable access: __hintStrLen
    LDI t0, 204
    ADD t0, gp, t0
    LI t2, t0
    PUSH t2
    PUSH t1
    JAL println, ra
    LDI t0, 16
    ADD sp, sp, t0
    ; Cleaned up 2 arguments from stack
    MOV t0, a0
    ; Function epilogue
__display_welcome_end_150:
    POP fp
    POP ra
    JMP ra                               ; Return from function

    ; ==============================
    ; Function: __shell_loop
    ; ==============================
__shell_loop:
    ; Pre-allocating 4 local variables
    ; Pre-allocated variable: CMD_BUFFER_SIZE (INT)
    ; Pre-allocated variable: cmdBuffer (PointerType[elementType=BYTE])
    ; Pre-allocated variable: mainLoop (INT)
    ; Pre-allocated variable: cmdLength (INT)
    ; Function prologue
    PUSH ra
    PUSH fp
    MOV fp, sp
    ; Total frame size: 24 bytes
    LDI t0, 24
    SUB sp, sp, t0
    ; Allocated 24 bytes for stack frame
    ; Variable declaration: CMD_BUFFER_SIZE
    ; Literal value: 128
    LDI t0, 128
    LDI t1, -4
    ADD t1, fp, t1
    SI t1, t0
    ; Variable declaration: cmdBuffer
    ; Function call: malloc
    ; Preparing function call: malloc
    ; Evaluating argument 0
    ; Variable access: CMD_BUFFER_SIZE
    LDI t0, -4
    ADD t0, fp, t0
    LI t1, t0
    PUSH t1
    JAL malloc, ra
    LDI t0, 8
    ADD sp, sp, t0
    ; Cleaned up 1 arguments from stack
    MOV t0, a0
    LDI t1, -12
    ADD t1, fp, t1
    ST t1, t0
    ; Variable declaration: mainLoop
    ; Literal value: 1
    LDI t0, 1
    LDI t1, -16
    ADD t1, fp, t1
    SI t1, t0
    ; While loop
loop_152:
    ; Comparison: Variable(name=mainLoop, type=INT) EQ Literal(value=1, type=LONG)
    ; Variable access: mainLoop
    LDI t0, -16
    ADD t0, fp, t0
    LI t1, t0
    ; Literal value: 1
    LDI t0, 1
    SUB t2, t1, t0
    ; Jump if t1 != t0
    JNZ endloop_153, t2
    ; Expression statement
    ; Function call: print
    ; Preparing function call: print
    ; Evaluating argument 0
    ; Variable access: __promptStr
    LDI t0, 172
    ADD t0, gp, t0
    LD t1, t0
    ; Evaluating argument 1
    ; Variable access: __promptStrLen
    LDI t0, 180
    ADD t0, gp, t0
    LI t2, t0
    PUSH t2
    PUSH t1
    JAL print, ra
    LDI t0, 16
    ADD sp, sp, t0
    ; Cleaned up 2 arguments from stack
    MOV t0, a0
    ; Variable declaration: cmdLength
    ; Function call: __read_command
    ; Preparing function call: __read_command
    ; Evaluating argument 0
    ; Variable access: cmdBuffer
    LDI t0, -12
    ADD t0, fp, t0
    LD t1, t0
    ; Evaluating argument 1
    ; Variable access: CMD_BUFFER_SIZE
    LDI t0, -4
    ADD t0, fp, t0
    LI t2, t0
    PUSH t2
    PUSH t1
    JAL __read_command, ra
    LDI t0, 16
    ADD sp, sp, t0
    ; Cleaned up 2 arguments from stack
    MOV t0, a0
    LDI t1, -20
    ADD t1, fp, t1
    SI t1, t0
    ; If statement
    ; Comparison: Variable(name=cmdLength, type=INT) GT Literal(value=0, type=LONG)
    ; Variable access: cmdLength
    LDI t0, -20
    ADD t0, fp, t0
    LI t1, t0
    ; Literal value: 0
    LDI t0, 0
    SUB t2, t1, t0
    ; Jump if t1 <= t0
    JPP skip_le_156, t2
    JMP else_154
skip_le_156:
    ; Expression statement
    ; Function call: __process_command
    ; Preparing function call: __process_command
    ; Evaluating argument 0
    ; Variable access: cmdBuffer
    LDI t0, -12
    ADD t0, fp, t0
    LD t1, t0
    ; Evaluating argument 1
    ; Variable access: cmdLength
    LDI t0, -20
    ADD t0, fp, t0
    LI t2, t0
    PUSH t2
    PUSH t1
    JAL __process_command, ra
    LDI t0, 16
    ADD sp, sp, t0
    ; Cleaned up 2 arguments from stack
    MOV t0, a0
else_154:
    JMP loop_152
endloop_153:
    ; Function epilogue
__shell_loop_end_151:
    LDI t0, 24
    ADD sp, sp, t0
    ; Deallocated 24 bytes for frame
    POP fp
    POP ra
    JMP ra                               ; Return from function

    ; ======================================
    ; Function: main
    ; ======================================
main:
    ; Pre-allocating 0 local variables
    ; Function prologue
    PUSH ra
    PUSH fp
    MOV fp, sp
    ; Total frame size: 0 bytes
    ; Expression statement
    ; Function call: console_init
    ; Preparing function call: console_init
    JAL console_init, ra
    MOV t0, a0
    ; Expression statement
    ; Function call: __init_strings
    ; Preparing function call: __init_strings
    JAL __init_strings, ra
    MOV t0, a0
    ; Expression statement
    ; Function call: __display_welcome
    ; Preparing function call: __display_welcome
    JAL __display_welcome, ra
    MOV t0, a0
    ; Expression statement
    ; Function call: __shell_loop
    ; Preparing function call: __shell_loop
    JAL __shell_loop, ra
    MOV t0, a0
    ; Function epilogue
main_end_157:
    POP fp
    POP ra
    JMP ra                               ; Return from function